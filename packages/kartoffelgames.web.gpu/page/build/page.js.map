{"version":3,"file":".././page/build/page.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;AC9Ia;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,uDAAuD;AACvD;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,YAAY;AACZ;;;;;;;;;;ACnLa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,wCAAwC;AACxC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;;;;;;;;;ACpKa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB;AACA,YAAY,aAAa,MAAM,wBAAwB;AACvD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;;;;;;;;;ACjCa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,mBAAmB,GAAG,gBAAgB,GAAG,gBAAgB,GAAG,aAAa,GAAG,iBAAiB,GAAG,YAAY,GAAG,kBAAkB;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAO,CAAC,uGAA6B;AACxD,8CAA6C,EAAE,qCAAqC,mCAAmC,EAAC;AACxH,aAAa,mBAAO,CAAC,2FAAuB;AAC5C,wCAAuC,EAAE,qCAAqC,uBAAuB,EAAC;AACtG,kBAAkB,mBAAO,CAAC,2FAAuB;AACjD,6CAA4C,EAAE,qCAAqC,iCAAiC,EAAC;AACrH,cAAc,mBAAO,CAAC,6FAAwB;AAC9C,yCAAwC,EAAE,qCAAqC,yBAAyB,EAAC;AACzG;AACA,kBAAkB,mBAAO,CAAC,iFAAkB;AAC5C,4CAA2C,EAAE,qCAAqC,gCAAgC,EAAC;AACnH,kBAAkB,mBAAO,CAAC,iFAAkB;AAC5C,4CAA2C,EAAE,qCAAqC,gCAAgC,EAAC;AACnH;AACA,mBAAmB,mBAAO,CAAC,6FAAwB;AACnD,+CAA8C,EAAE,qCAAqC,oCAAoC,EAAC;AAC1H,6CAA4C,EAAE,qCAAqC,kCAAkC,EAAC;AACtH;;;;;;;;;;AC9Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;ACrHa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;ACpCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,eAAe,mBAAO,CAAC,4EAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;;;;;;;;;AC5Ea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,eAAe,mBAAO,CAAC,4EAAsB;AAC7C,iCAAiC,mBAAO,CAAC,sHAAgC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wCAAwC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;;;;;;;;;ACrDa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,eAAe,mBAAO,CAAC,4EAAsB;AAC7C,iCAAiC,mBAAO,CAAC,sHAAgC;AACzE,iCAAiC,mBAAO,CAAC,yHAA0B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iEAAiE;AACpG,kCAAkC,iEAAiE;AACnG,iCAAiC,iEAAiE;AAClG,gCAAgC,iEAAiE;AACjG,0BAA0B,iEAAiE;AAC3F,2BAA2B,iEAAiE;AAC5F,2BAA2B,iEAAiE;AAC5F,4BAA4B,iEAAiE;AAC7F,4BAA4B,iEAAiE;AAC7F,2BAA2B,iEAAiE;AAC5F,0BAA0B,kEAAkE;AAC5F,iCAAiC,kEAAkE;AACnG,oCAAoC,kEAAkE;AACtG,mCAAmC,kEAAkE;AACrG,kCAAkC,kEAAkE;AACpG,oCAAoC,kEAAkE;AACtG,mCAAmC,+DAA+D;AAClG,mCAAmC,+DAA+D;AAClG,qCAAqC,kEAAkE;AACvG,oCAAoC,+DAA+D;AACnG,oCAAoC,+DAA+D;AACnG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2CAA2C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;;;;;;;;;AC9Ea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,eAAe,mBAAO,CAAC,4EAAsB;AAC7C,+BAA+B,mBAAO,CAAC,sHAAgC;AACvE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;;;;;;;;;ACnEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,sCAAsC,mBAAO,CAAC,oIAAuC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;;;;;;;;;;ACba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,eAAe,mBAAO,CAAC,4EAAsB;AAC7C,6BAA6B,mBAAO,CAAC,gHAA6B;AAClE,6BAA6B,mBAAO,CAAC,gHAA6B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;;;;;;;;;AC5Ja;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,eAAe,mBAAO,CAAC,4EAAsB;AAC7C,8BAA8B,mBAAO,CAAC,gHAA6B;AACnE,4BAA4B,mBAAO,CAAC,4GAA2B;AAC/D,4BAA4B,mBAAO,CAAC,wGAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;;;;;;;;;AC9Da;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gCAAgC;AAChC,4BAA4B,mBAAO,CAAC,4GAA2B;AAC/D,4BAA4B,mBAAO,CAAC,4GAA2B;AAC/D,4BAA4B,mBAAO,CAAC,wGAAqB;AACzgCAAgC;AAChC;;;;;;;;;;AC7Ga;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB;AACA;AACA;AACA;AACA,CAAC,sBAAsB,uBAAuB,uBAAuB;AACrE;;;;;;;;;;ACRa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oBAAoB,qBAAqB,qBAAqB;AAC/D;;;;;;;;;;AC3Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB;AACA;AACA;AACA;AACA,CAAC,kBAAkB,mBAAmB,mBAAmB;AACzD;;;;;;;;;;ACRa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtqBAAqB,sBAAsB,sBAAsB;AAClE;;;;;;;;;;ACvIa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kBAAkB,mBAAmB,mBAAmB;AACzD;;;;;;;;;;ACfa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;;;;;;;;;ACzCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sources":["webpack:///./page/source/camera/light/ambient-light.ts","webpack:///./page/source/camera/math/euler.ts","webpack:///./page/source/camera/math/matrix.ts","webpack:///./page/source/camera/math/quaternion.ts","webpack:///./page/source/camera/math/vector.ts","webpack:///./page/source/camera/transform.ts","webpack:///./page/source/camera/view_projection/projection/perspective-projection.ts","webpack:///./page/source/camera/view_projection/view-projection.ts","webpack:///./page/source/meshes/canvas-mesh.ts","webpack:///./page/source/meshes/cube-mesh.ts","webpack:///./page/source/meshes/particle-mesh.ts","webpack:///./page/source/util.ts","webpack:///./source/base-memory-layout.ts","webpack:///./source/buffer/gpu-buffer-view.ts","webpack:///./source/buffer/gpu-buffer.ts","webpack:///./source/buffer/memory_layout/array-buffer-memory-layout.ts","webpack:///./source/buffer/memory_layout/base-buffer-memory-layout.ts","webpack:///./source/buffer/memory_layout/primitive-buffer-memory-layout.ts","webpack:///./source/buffer/memory_layout/struct-buffer-memory-layout-property-setup.ts","webpack:///./source/buffer/memory_layout/struct-buffer-memory-layout-setup.ts","webpack:///./source/buffer/memory_layout/struct-buffer-memory-layout.ts","webpack:///./source/constant/buffer-alignment-type.enum.ts","webpack:///./source/constant/buffer-item-format.enum.ts","webpack:///./source/constant/buffer-item-multiplier.enum.ts","webpack:///./source/constant/buffer-usage.enum.ts","webpack:///./source/constant/compare-function.enum.ts","webpack:///./source/constant/compute-stage.enum.ts","webpack:///./source/constant/filter-mode.enum.ts","webpack:///./source/constant/gpu-feature.enum.ts","webpack:///./source/constant/gpu-limit.enum.ts","webpack:///./source/constant/primitive-cullmode.enum.ts","webpack:///./source/constant/primitive-front-face.enum.ts","webpack:///./source/constant/primitive-topology.enum.ts","webpack:///./source/constant/sampler-type.enum.ts","webpack:///./source/constant/stencil-operation.enum.ts","webpack:///./source/constant/storage-binding-type.enum.ts","webpack:///./source/constant/texture-aspect.enum.ts","webpack:///./source/constant/texture-blend-factor.enum.ts","webpack:///./source/constant/texture-blend-operation.enum.ts","webpack:///./source/constant/texture-dimension.enum.ts","webpack:///./source/constant/texture-format.enum.ts","webpack:///./source/constant/texture-operation.enum.ts","webpack:///./source/constant/texture-sample-type.enum.ts","webpack:///./source/constant/texture-usage.enum.ts","webpack:///./source/constant/texture-view-dimension.enum.ts","webpack:///./source/constant/vertex-parameter-step-mode.enum.ts","webpack:///./source/constant/wrapping-mode.enum.ts","webpack:///./source/device/capabilities/gpu-device-capabilities.ts","webpack:///./source/device/capabilities/gpu-texture-format-capabilities.ts","webpack:///./source/device/gpu-device.ts","webpack:///./source/execution/gpu-execution.ts","webpack:///./source/execution/pass/compute-pass-context.ts","webpack:///./source/execution/pass/compute-pass.ts","webpack:///./source/execution/pass/render-pass-context.ts","webpack:///./source/execution/pass/render-pass.ts","webpack:///./source/gpu_object/gpu-object-child-setup.ts","webpack:///./source/gpu_object/gpu-object-invalidation-reasons.ts","webpack:///./source/gpu_object/gpu-object-setup.ts","webpack:///./source/gpu_object/gpu-object.ts","webpack:///./source/gpu_object/gpu-resource-object.ts","webpack:///./source/pipeline/bind_group/bind-group-data-setup.ts","webpack:///./source/pipeline/bind_group/bind-group.ts","webpack:///./source/pipeline/bind_group_layout/bind-group-layout-buffer-memory-layout-setup.ts","webpack:///./source/pipeline/bind_group_layout/bind-group-layout-memory-layout-setup.ts","webpack:///./source/pipeline/bind_group_layout/bind-group-layout-setup.ts","webpack:///./source/pipeline/bind_group_layout/bind-group-layout.ts","webpack:///./source/pipeline/compute-pipeline.ts","webpack:///./source/pipeline/pipeline-layout.ts","webpack:///./source/pipeline/pipeline_data/pipeline-data-group-setup.ts","webpack:///./source/pipeline/pipeline_data/pipeline-data-setup.ts","webpack:///./source/pipeline/pipeline_data/pipeline-data.ts","webpack:///./source/pipeline/render_targets/render-targets-setup.ts","webpack:///./source/pipeline/render_targets/render-targets-texture-setup.ts","webpack:///./source/pipeline/render_targets/render-targets.ts","webpack:///./source/pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline-depth-configuration.ts","webpack:///./source/pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline-stencil-configuration.ts","webpack:///./source/pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline-target-configuration.ts","webpack:///./source/pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline.ts","webpack:///./source/pipeline/vertex_parameter/vertex-parameter-buffer-layout-setup.ts","webpack:///./source/pipeline/vertex_parameter/vertex-parameter-layout-setup.ts","webpack:///./source/pipeline/vertex_parameter/vertex-parameter-layout.ts","webpack:///./source/pipeline/vertex_parameter/vertex-parameter.ts","webpack:///./source/shader/setup/shader-compute-entry-point-setup.ts","webpack:///./source/shader/setup/shader-fragment-entry-point-setup.ts","webpack:///./source/shader/setup/shader-setup.ts","webpack:///./source/shader/shader-compute-module.ts","webpack:///./source/shader/shader-render-module.ts","webpack:///./source/shader/shader.ts","webpack:///./source/texture/canvas-texture.ts","webpack:///./source/texture/gpu-texture-view.ts","webpack:///./source/texture/gpu-texture.ts","webpack:///./source/texture/memory_layout/sampler-memory-layout.ts","webpack:///./source/texture/memory_layout/texture-view-memory-layout.ts","webpack:///./source/texture/texture-sampler.ts","webpack:///./page/source/game_objects/color_cube/color-cube-shader.wgsl","webpack:///./page/source/game_objects/cube/cube-shader.wgsl","webpack:///./page/source/game_objects/leaf_particle/particle-compute-shader.wgsl","webpack:///./page/source/game_objects/leaf_particle/particle-shader.wgsl","webpack:///./page/source/game_objects/light/light-box-shader.wgsl","webpack:///./page/source/game_objects/skybox/sky-box-shader.wgsl","webpack:///./page/source/game_objects/video_canvas/video-canvas-shader.wgsl","webpack:///../kartoffelgames.core/library/source/algorithm/myers-diff.js","webpack:///../kartoffelgames.core/library/source/data_container/dictionary.js","webpack:///../kartoffelgames.core/library/source/data_container/list.js","webpack:///../kartoffelgames.core/library/source/data_container/stack.js","webpack:///../kartoffelgames.core/library/source/exception/exception.js","webpack:///../kartoffelgames.core/library/source/index.js","webpack:///../kartoffelgames.core/library/source/util/enum-util.js","webpack:///../kartoffelgames.core/library/source/util/type-util.js","webpack:///../kartoffelgames.web.game_input/library/source/configuration/device-configuration.js","webpack:///../kartoffelgames.web.game_input/library/source/configuration/gamepad-button-mapping.js","webpack:///../kartoffelgames.web.game_input/library/source/configuration/input-configuration.js","webpack:///../kartoffelgames.web.game_input/library/source/connector/gamepad-connector.js","webpack:///../kartoffelgames.web.game_input/library/source/connector/mouse-keyboard-connector.js","webpack:///../kartoffelgames.web.game_input/library/source/device/base-input-device.js","webpack:///../kartoffelgames.web.game_input/library/source/device/gamepad-input-device.js","webpack:///../kartoffelgames.web.game_input/library/source/device/mouse-keyboard-input-device.js","webpack:///../kartoffelgames.web.game_input/library/source/enum/button-value-type.enum.js","webpack:///../kartoffelgames.web.game_input/library/source/enum/gamepad-button.enum.js","webpack:///../kartoffelgames.web.game_input/library/source/enum/input-device.enum.js","webpack:///../kartoffelgames.web.game_input/library/source/enum/keyboard-button.enum.js","webpack:///../kartoffelgames.web.game_input/library/source/enum/mouse-button.enum.js","webpack:///../kartoffelgames.web.game_input/library/source/event/input-action-event.js","webpack:///../kartoffelgames.web.game_input/library/source/event/input-button-event.js","webpack:///../kartoffelgames.web.game_input/library/source/index.js","webpack:///../kartoffelgames.web.game_input/library/source/input-devices.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./page/source/index.ts"],"sourcesContent":["import { Exception } from '@kartoffelgames/core';\r\nimport { Vector } from '../math/vector';\r\n\r\nexport class AmbientLight {\r\n    private readonly mColor: Vector;\r\n\r\n    /**\r\n     * Ambient light Vector4 data.\r\n     */\r\n    public get data(): Array<number> {\r\n        return this.mColor.data;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    public constructor() {\r\n        this.mColor = new Vector([1, 1, 1, 1]);\r\n    }\r\n\r\n    /**\r\n     * Set ambient light color.\r\n     * @param pRed - Red.\r\n     * @param pGreen - Green.\r\n     * @param pBlue - Blue.\r\n     */\r\n    public setColor(pRed: number, pGreen: number, pBlue: number): void {\r\n        if(pRed > 1 || pRed < 0 || pGreen > 1 || pGreen < 0 || pBlue > 1 || pBlue < 0){\r\n            throw new Exception(`Color values need to be in 0 to 1 range. (R:${pRed}, G:${pGreen}, B:${pBlue})`, this);\r\n        }\r\n\r\n        this.mColor.data[0] = pRed;\r\n        this.mColor.data[1] = pGreen;\r\n        this.mColor.data[2] = pBlue;\r\n    }\r\n}","export class Euler {\r\n    private mX: number;\r\n    private mY: number;\r\n    private mZ: number;\r\n\r\n    /**\r\n     * X axis degree.\r\n     */\r\n    public get x(): number {\r\n        return this.mX;\r\n    } set x(pValue: number) {\r\n        this.mX = pValue;\r\n    }\r\n\r\n    /**\r\n     * Y axis degree.\r\n     */\r\n    public get y(): number {\r\n        return this.mY;\r\n    } set y(pValue: number) {\r\n        this.mY = pValue;\r\n    }\r\n\r\n    /**\r\n     * Z axis degree.\r\n     */\r\n    public get z(): number {\r\n        return this.mZ;\r\n    } set z(pValue: number) {\r\n        this.mZ = pValue;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    public constructor() {\r\n        this.mX = 0;\r\n        this.mY = 0;\r\n        this.mZ = 0;\r\n    }\r\n}","import { Exception } from '@kartoffelgames/core';\r\nimport { Vector } from './vector';\r\n\r\nexport class Matrix {\r\n    /**\r\n     * Create matrix from data array.\r\n     * Direction from reading columns than rows.\r\n     * @param pArray - Array data. \r\n     * @param pHeight \r\n     * @param pWidth \r\n     * @returns \r\n     */\r\n    public static fromArray(pArray: Array<number>, pHeight: number, pWidth: number): Matrix {\r\n        const lData: Array<Array<number>> = new Array<Array<number>>();\r\n\r\n        for (let lRowIndex = 0; lRowIndex < pHeight; lRowIndex++) {\r\n            const lRowData: Array<number> = new Array<number>(pWidth);\r\n\r\n            for (let lColumnIndex = 0; lColumnIndex < pWidth; lColumnIndex++) {\r\n                lRowData[lColumnIndex] = pArray[(lColumnIndex * pHeight) + lRowIndex];\r\n            }\r\n\r\n            // Add row to data array.\r\n            lData.push(lRowData);\r\n        }\r\n\r\n        return new Matrix(lData);\r\n    }\r\n\r\n    /**\r\n     * Create identity matrix.\r\n     * @param pSize - Matix size: nxn\r\n     * @param pValue - Value of identity. \r\n     */\r\n    public static identity(pSize: number): Matrix {\r\n        const lData: Array<Array<number>> = new Array<Array<number>>();\r\n        for (let lRowIndex = 0; lRowIndex < pSize; lRowIndex++) {\r\n            // Create Array filled with zeros.\r\n            const lRowData: Array<number> = new Array<number>(pSize).fill(0);\r\n\r\n            // Set identity column to value.\r\n            lRowData[lRowIndex] = 1;\r\n\r\n            // Add row to data array.\r\n            lData.push(lRowData);\r\n        }\r\n\r\n        return new Matrix(lData);\r\n    }\r\n\r\n    private readonly mData: Array<Array<number>>;\r\n\r\n    /**\r\n     * Get matix raw data.\r\n     */\r\n    public get data(): Array<Array<number>> {\r\n        return this.mData;\r\n    }\r\n\r\n    /**\r\n     * Data as number array.\r\n     */\r\n    public get dataArray(): Array<number> {\r\n        const lData: Array<number> = new Array<number>();\r\n\r\n        // Read from columns to rows.\r\n        for (let lColumnIndex = 0; lColumnIndex < this.width; lColumnIndex++) {\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                lData.push(this.mData[lRowIndex][lColumnIndex]);\r\n            }\r\n        }\r\n\r\n        return lData;\r\n    }\r\n\r\n    /**\r\n     * Get matrix height.\r\n     */\r\n    public get height(): number {\r\n        return this.mData.length;\r\n    }\r\n\r\n    /**\r\n     * Get matrix width.\r\n     */\r\n    public get width(): number {\r\n        return this.mData[0]?.length ?? 0;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pData - Matrix data.\r\n     */\r\n    public constructor(pData: Array<Array<number>>) {\r\n        this.mData = pData;\r\n    }\r\n\r\n    /**\r\n     * Add value to matrix.\r\n     * @param pAddData - Matrix or scalar value.\r\n     */\r\n    public add(pAddData: Matrix | number): Matrix {\r\n        const lData: Array<Array<number>> = new Array<Array<number>>();\r\n\r\n        if (pAddData instanceof Matrix) {\r\n            // Restrict on same length.\r\n            if (this.height !== pAddData.height && this.width !== pAddData.width) {\r\n                throw new Exception('Matrices need to be the same size for calculation.', this);\r\n            }\r\n\r\n            // Iterate rows and extend data dynamicly by pushing new data rows.\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                // Add each column of row.\r\n                const lRowData: Array<number> = new Array<number>(this.width);\r\n                for (let lColumnIndex = 0; lColumnIndex < lRowData.length; lColumnIndex++) {\r\n                    lRowData[lColumnIndex] = this.mData[lRowIndex][lColumnIndex] + pAddData.data[lRowIndex][lColumnIndex];\r\n                }\r\n\r\n                lData.push(lRowData);\r\n            }\r\n        } else {\r\n            // Add scalar to each matrix component.\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                const lRowData: Array<number> = new Array<number>(this.width);\r\n                for (let lColumnIndex = 0; lColumnIndex < lRowData.length; lColumnIndex++) {\r\n                    lRowData[lColumnIndex] = this.mData[lRowIndex][lColumnIndex] + pAddData;\r\n                }\r\n\r\n                lData.push(lRowData);\r\n            }\r\n        }\r\n\r\n        return new Matrix(lData);\r\n    }\r\n\r\n    /**\r\n     * Adjoint matrix.\r\n     */\r\n    public adjoint(): Matrix {\r\n        const lMatrixData: Array<Array<number>> = new Array<Array<number>>();\r\n\r\n        // Allways use first row and iterate over columns.\r\n        for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n            const lMatrixRow: Array<number> = new Array<number>();\r\n            for (let lColumIndex = 0; lColumIndex < this.width; lColumIndex++) {\r\n                // Calculate determant of matrix with omitted column and row.\r\n                // Toggle sign on each new row or column.\r\n                let lDeterminant: number = this.omit(lRowIndex, lColumIndex).determinant();\r\n                lDeterminant *= Math.pow(-1, (lRowIndex + 1) + (lColumIndex + 1));\r\n\r\n\r\n                lMatrixRow.push(lDeterminant);\r\n            }\r\n\r\n            // Add row to matrix data.\r\n            lMatrixData.push(lMatrixRow);\r\n        }\r\n\r\n        // Calculate transpose from cofactor matrix to get adjoint. \r\n        const lCofactorMatrix = new Matrix(lMatrixData);\r\n        return lCofactorMatrix.transpose();\r\n    }\r\n\r\n    /**\r\n     * Calculate determant of matrix.\r\n     */\r\n    public determinant(): number {\r\n        // Super fast determinant calculation of a 1x1 matrix.\r\n        if (this.height === 1 && this.width === 1) {\r\n            return this.data[0][0];\r\n        }\r\n\r\n        let lDeterminant: number = 0;\r\n        for (let lIterationIndex = 0; lIterationIndex < this.width; lIterationIndex++) {\r\n            // Get number of row iteration to detect if any calculation musst be done.\r\n            let lSignedNumber: number = this.data[0][lIterationIndex];\r\n            lSignedNumber *= (lIterationIndex % 2) ? -1 : 1; // Toggle sign between iteration. Begin with plus.\r\n\r\n            // Check if any calculation needs to be done. Zero multiplicated is allways zero.\r\n            if (lSignedNumber !== 0) {\r\n                // Calculate determinant of new matrix. Allways use first row.\r\n                const lDeterminantMatrix: Matrix = this.omit(0, lIterationIndex);\r\n                lDeterminant += lSignedNumber * lDeterminantMatrix.determinant();\r\n            }\r\n        }\r\n\r\n        return lDeterminant;\r\n    }\r\n\r\n    /**\r\n     * Inverse matrix.\r\n     */\r\n    public inverse(): Matrix {\r\n        const lAdjoint: Matrix = this.adjoint();\r\n        const lDeterminant: number = this.determinant();\r\n\r\n        // Devide each adjoint matrix component by determinant.\r\n        for (let lColumIndex = 0; lColumIndex < this.width; lColumIndex++) {\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                lAdjoint.data[lRowIndex][lColumIndex] /= lDeterminant;\r\n            }\r\n        }\r\n\r\n        return lAdjoint;\r\n    }\r\n\r\n    /**\r\n     * Multiplicate matrix.\r\n     * @param pMultData - Matrix or scalar value.\r\n     */\r\n    public mult(pMultData: Matrix | number): Matrix {\r\n        const lData: Array<Array<number>> = new Array<Array<number>>();\r\n\r\n        if (pMultData instanceof Matrix) {\r\n            // Restrict on same length.\r\n            if (this.width !== pMultData.height) {\r\n                throw new Exception('Matrices A width and B height must match for multiplication.', this);\r\n            }\r\n\r\n            // Iterate rows and extend data dynamicly by pushing new data rows.\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                // Add each column of row.\r\n                const lRowData: Array<number> = new Array<number>(pMultData.width);\r\n                for (let lColumnIndex = 0; lColumnIndex < lRowData.length; lColumnIndex++) {\r\n\r\n                    // Multiplicate target row with source column components.\r\n                    // Iteration length is eighter target.height or source.width.\r\n                    let lProduct: number = 0;\r\n                    for (let lComponentIndex = 0; lComponentIndex < this.height; lComponentIndex++) {\r\n                        lProduct += this.mData[lRowIndex][lComponentIndex] * pMultData.data[lComponentIndex][lColumnIndex];\r\n                    }\r\n                    lRowData[lColumnIndex] = lProduct;\r\n                }\r\n\r\n                lData.push(lRowData);\r\n            }\r\n        } else {\r\n            // Multiplicate scalar to each matrix component.\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                const lRowData: Array<number> = new Array<number>(this.width);\r\n                for (let lColumnIndex = 0; lColumnIndex < this.width; lColumnIndex++) {\r\n                    lRowData[lColumnIndex] = this.mData[lRowIndex][lColumnIndex] * pMultData;\r\n                }\r\n\r\n                lData.push(lRowData);\r\n            }\r\n        }\r\n\r\n        return new Matrix(lData);\r\n    }\r\n\r\n    /**\r\n     * Omit row and column from matrix.\r\n     * @param pOmitRow - Omitting row.\r\n     * @param pOmitColumn - Omiting column\r\n     */\r\n    public omit(pOmitRow: number, pOmitColumn: number): Matrix {\r\n        const lMatrixData: Array<Array<number>> = new Array<Array<number>>();\r\n\r\n        // Allways use first row and iterate over columns.\r\n        for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n            if (lRowIndex !== pOmitRow) {\r\n                const lMatrixRow: Array<number> = new Array<number>();\r\n                for (let lColumIndex = 0; lColumIndex < this.width; lColumIndex++) {\r\n                    // Skip column of\r\n                    if (lColumIndex !== pOmitColumn) {\r\n                        lMatrixRow.push(this.data[lRowIndex][lColumIndex]);\r\n                    }\r\n                }\r\n\r\n                // Add row to matrix data.\r\n                lMatrixData.push(lMatrixRow);\r\n            }\r\n        }\r\n\r\n        return new Matrix(lMatrixData);\r\n    }\r\n\r\n    /**\r\n     * Substract value to matrix.\r\n     * @param pAddData - Matrix or scalar value.\r\n     */\r\n    public sub(pAddData: Matrix | number): Matrix {\r\n        const lData: Array<Array<number>> = new Array<Array<number>>();\r\n\r\n        if (pAddData instanceof Matrix) {\r\n            // Restrict on same length.\r\n            if (this.height !== pAddData.height && this.width !== pAddData.width) {\r\n                throw new Exception('Matrices need to be the same size for calculation.', this);\r\n            }\r\n\r\n            // Iterate rows and extend data dynamicly by pushing new data rows.\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                // Add each column of row.\r\n                const lRowData: Array<number> = new Array<number>(this.width);\r\n                for (let lColumnIndex = 0; lColumnIndex < lRowData.length; lColumnIndex++) {\r\n                    lRowData[lColumnIndex] = this.mData[lRowIndex][lColumnIndex] - pAddData.data[lRowIndex][lColumnIndex];\r\n                }\r\n\r\n                lData.push(lRowData);\r\n            }\r\n        } else {\r\n            // Add scalar to each matrix component.\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                const lRowData: Array<number> = new Array<number>(this.width);\r\n                for (let lColumnIndex = 0; lColumnIndex < lRowData.length; lColumnIndex++) {\r\n                    lRowData[lColumnIndex] = this.mData[lRowIndex][lColumnIndex] - pAddData;\r\n                }\r\n\r\n                lData.push(lRowData);\r\n            }\r\n        }\r\n\r\n        return new Matrix(lData);\r\n    }\r\n\r\n    /**\r\n     * Transpose matrix.\r\n     */\r\n    public transpose(): Matrix {\r\n        const lMatrixData: Array<Array<number>> = new Array<Array<number>>();\r\n\r\n        // Transpose by copying column into row.\r\n        for (let lColumIndex = 0; lColumIndex < this.width; lColumIndex++) {\r\n            const lMatrixRow: Array<number> = new Array<number>();\r\n            for (let lRowIndex = 0; lRowIndex < this.height; lRowIndex++) {\r\n                lMatrixRow.push(this.data[lRowIndex][lColumIndex]);\r\n            }\r\n\r\n            // Add row to matrix data.\r\n            lMatrixData.push(lMatrixRow);\r\n        }\r\n\r\n        return new Matrix(lMatrixData);\r\n    }\r\n\r\n    /**\r\n     * Multiplicate matrix with vector.\r\n     * @param pMultData - Vector.\r\n     * @returns \r\n     */\r\n    public vectorMult(pMultData: Vector): Vector {\r\n        // Restrict on same length.\r\n        if (this.width !== pMultData.data.length) {\r\n            throw new Exception('Matrices A width and B height must match for multiplication.', this);\r\n        }\r\n\r\n        // Convert vector to matrix by creating a \r\n        const lMatrixData: Array<Array<number>> = new Array<Array<number>>();\r\n        for (const lVectorComponent of pMultData.data) {\r\n            lMatrixData.push([lVectorComponent]);\r\n        }\r\n\r\n        // Multiplicate\r\n        const lMutiplicatedMatrix = this.mult(new Matrix(lMatrixData));\r\n\r\n        const lVectorData: Array<number> = new Array<number>();\r\n        for (let lRowIndex = 0; lRowIndex < lMutiplicatedMatrix.height; lRowIndex++) {\r\n            lVectorData.push(lMutiplicatedMatrix.data[lRowIndex][0]);\r\n        }\r\n\r\n        return new Vector(lVectorData);\r\n    }\r\n}","import { Euler } from './euler';\r\nimport { Matrix } from './matrix';\r\nimport { Vector } from './vector';\r\n\r\nexport class Quaternion {\r\n    /**\r\n     * Create new quaternion from degree rotation.\r\n     * Rotate order XYZ (Pitch, Yaw, Roll)\r\n     * @param pPitch - Pitch degree.\r\n     * @param pYaw - Yaw degree.\r\n     * @param pRoll - Roll degree.\r\n     */\r\n    public static fromRotation(pPitch: number, pYaw: number, pRoll: number): Quaternion {\r\n        // Conversion to radian.\r\n        const lPitchRadian: number = (pPitch % 360) * Math.PI / 180;\r\n        const lYawRadian: number = (pYaw % 360) * Math.PI / 180;\r\n        const lRollRadian: number = (pRoll % 360) * Math.PI / 180;\r\n\r\n        // Pre calculate.\r\n        const lCosPitch = Math.cos(lPitchRadian * 0.5);\r\n        const lSinPitch = Math.sin(lPitchRadian * 0.5);\r\n        const lCosYaw = Math.cos(lYawRadian * 0.5);\r\n        const lSinYaw = Math.sin(lYawRadian * 0.5);\r\n        const lCosRoll = Math.cos(lRollRadian * 0.5);\r\n        const lSinRoll = Math.sin(lRollRadian * 0.5);\r\n\r\n        // Create quaternion.\r\n        const lQuaternion = Quaternion.identity();\r\n        lQuaternion.w = lCosPitch * lCosYaw * lCosRoll + lSinPitch * lSinYaw * lSinRoll;\r\n        lQuaternion.x = lSinPitch * lCosYaw * lCosRoll - lCosPitch * lSinYaw * lSinRoll;\r\n        lQuaternion.y = lCosPitch * lSinYaw * lCosRoll + lSinPitch * lCosYaw * lSinRoll;\r\n        lQuaternion.z = lCosPitch * lCosYaw * lSinRoll - lSinPitch * lSinYaw * lCosRoll;\r\n\r\n        return lQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Create identity quaternion.\r\n     */\r\n    public static identity(): Quaternion {\r\n        return new Quaternion(1, 0, 0, 0);\r\n    }\r\n\r\n    public mW: number;\r\n    public mX: number;\r\n    public mY: number;\r\n    public mZ: number;\r\n\r\n    /**\r\n     * Rotation forward vector.\r\n     */\r\n    public get vectorForward(): Vector {\r\n        // Products.\r\n        const lSquareX: number = 2 * Math.pow(this.mX, 2);\r\n        const lSquareY: number = 2 * Math.pow(this.mY, 2);\r\n        const lProductXz: number = 2 * this.mX * this.mZ;\r\n        const lProductYw: number = 2 * this.mY * this.mW;\r\n        const lProductYz: number = 2 * this.mY * this.mZ;\r\n        const lProductXw: number = 2 * this.mX * this.mW;\r\n\r\n        const lX: number = lProductXz + lProductYw;\r\n        const lY: number = lProductYz - lProductXw;\r\n        const lZ: number = 1 - lSquareX - lSquareY;\r\n\r\n        return new Vector([lX, lY, lZ]);\r\n    }\r\n\r\n    /**\r\n     * Rotation vector right.\r\n     */\r\n    public get vectorRight(): Vector {\r\n        // Products.\r\n        const lSquareY: number = 2 * Math.pow(this.mY, 2);\r\n        const lSquareZ: number = 2 * Math.pow(this.mZ, 2);\r\n        const lProductXy: number = 2 * this.mX * this.mY;\r\n        const lProductZw: number = 2 * this.mZ * this.mW;\r\n        const lProductYz: number = 2 * this.mY * this.mZ;\r\n        const lProductXw: number = 2 * this.mX * this.mW;\r\n\r\n        const lX: number = 1 - lSquareY - lSquareZ;\r\n        const lY: number = lProductXy + lProductZw;\r\n        const lZ: number = lProductYz + lProductXw;\r\n\r\n        return new Vector([lX, lY, lZ]);\r\n    }\r\n\r\n    /**\r\n     * Rotation up vector.\r\n     */\r\n    public get vectorUp(): Vector {\r\n        // Products.\r\n        const lSquareX: number = 2 * Math.pow(this.mX, 2);\r\n        const lSquareZ: number = 2 * Math.pow(this.mZ, 2);\r\n        const lProductXy: number = 2 * this.mX * this.mY;\r\n        const lProductZw: number = 2 * this.mZ * this.mW;\r\n\r\n        const lProductYz: number = 2 * this.mY * this.mZ;\r\n        const lProductXw: number = 2 * this.mX * this.mW;\r\n\r\n        const lX: number = lProductXy - lProductZw;\r\n        const lY: number = 1 - lSquareX - lSquareZ;\r\n        const lZ: number = lProductYz + lProductXw;\r\n\r\n        return new Vector([lX, lY, lZ]);\r\n    }\r\n\r\n    /**\r\n     * Get w value.\r\n     */\r\n    public get w(): number {\r\n        return this.mW;\r\n    } set w(pValue: number) {\r\n        this.mW = pValue;\r\n    }\r\n\r\n    /**\r\n     * Get x value.\r\n     */\r\n    public get x(): number {\r\n        return this.mX;\r\n    } set x(pValue: number) {\r\n        this.mX = pValue;\r\n    }\r\n\r\n    /**\r\n     * Get y value.\r\n     */\r\n    public get y(): number {\r\n        return this.mY;\r\n    } set y(pValue: number) {\r\n        this.mY = pValue;\r\n    }\r\n\r\n    /**\r\n     * Get z value.\r\n     */\r\n    public get z(): number {\r\n        return this.mZ;\r\n    } set z(pValue: number) {\r\n        this.mZ = pValue;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pW - W.\r\n     * @param pX - X.\r\n     * @param pY - Y.\r\n     * @param pZ - Z.\r\n     */\r\n    public constructor(pW: number, pX: number, pY: number, pZ: number) {\r\n        this.mX = pX;\r\n        this.mY = pY;\r\n        this.mZ = pZ;\r\n        this.mW = pW;\r\n    }\r\n\r\n    /**\r\n     * Add angles to current euler rotation.\r\n     * @param pPitch - Pitch degree.\r\n     * @param pYaw - Yaw degree.\r\n     * @param pRoll - Roll degree.\r\n     */\r\n    public addEulerRotation(pPitch: number, pYaw: number, pRoll: number): Quaternion {\r\n        // Apply current rotation after setting new rotation to apply rotation as absolute euler rotation and not as relative quaternion.\r\n        return this.mult(Quaternion.fromRotation(pPitch, pYaw, pRoll));\r\n    }\r\n\r\n    /**\r\n     * Quaternion rotation as euler rotation\r\n     */\r\n    public asEuler(): Euler {\r\n        const lEuler: Euler = new Euler();\r\n\r\n        // Pitch (x-axis rotation)\r\n        const lSinPitchCosYaw = 2 * (this.mW * this.mX + this.mY * this.mZ);\r\n        const lCosPitchCosYaw = 1 - 2 * (this.mX * this.mX + this.mY * this.mY);\r\n        const lPitchRadian = Math.atan2(lSinPitchCosYaw, lCosPitchCosYaw);\r\n        const lPitchDegree = (lPitchRadian * 180 / Math.PI) % 360;\r\n        lEuler.x = (lPitchDegree < 0) ? lPitchDegree + 360 : lPitchDegree;\r\n\r\n        // Yaw (y-axis rotation)\r\n        const lSinYaw = Math.sqrt(1 + 2 * (this.mW * this.mY - this.mX * this.mZ));\r\n        const lCosYaw = Math.sqrt(1 - 2 * (this.mW * this.mY - this.mX * this.mZ));\r\n        const lYawRadian = 2 * Math.atan2(lSinYaw, lCosYaw) - Math.PI / 2;\r\n        const lYawDegree = (lYawRadian * 180 / Math.PI) % 360;\r\n        lEuler.y = (lYawDegree < 0) ? lYawDegree + 360 : lYawDegree;\r\n\r\n        // Roll (z-axis rotation)\r\n        const lSinRollCosYaw = 2 * (this.mW * this.mZ + this.mX * this.mY);\r\n        const lCosRollCosYaw = 1 - 2 * (this.mY * this.mY + this.mZ * this.mZ);\r\n        const lRollRadian = Math.atan2(lSinRollCosYaw, lCosRollCosYaw);\r\n        const lRollDegree = (lRollRadian * 180 / Math.PI) % 360;\r\n        lEuler.z = (lRollDegree < 0) ? lRollDegree + 360 : lRollDegree;\r\n\r\n        return lEuler;\r\n    }\r\n\r\n    /**\r\n     * Convert quaternion to a 4x4 rotation matrix.\r\n     */\r\n    public asMatrix(): Matrix {\r\n        /*\r\n            1 - 2*qy² - 2*qz²\t2*qx*qy - 2*qz*qw\t2*qx*qz + 2*qy*qw\r\n            2*qx*qy + 2*qz*qw\t1 - 2*qx² - 2*qz²\t2*qy*qz - 2*qx*qw\r\n            2*qx*qz - 2*qy*qw\t2*qy*qz + 2*qx*qw\t1 - 2*qx² - 2*qy²\r\n        */\r\n        // Sqares\r\n        const lSquareX: number = 2 * Math.pow(this.mX, 2);\r\n        const lSquareY: number = 2 * Math.pow(this.mY, 2);\r\n        const lSquareZ: number = 2 * Math.pow(this.mZ, 2);\r\n\r\n        // Products.\r\n        const lProductXy: number = 2 * this.mX * this.mY;\r\n        const lProductZw: number = 2 * this.mZ * this.mW;\r\n        const lProductXz: number = 2 * this.mX * this.mZ;\r\n        const lProductYw: number = 2 * this.mY * this.mW;\r\n        const lProductYz: number = 2 * this.mY * this.mZ;\r\n        const lProductXw: number = 2 * this.mX * this.mW;\r\n\r\n        // Fill matrix\r\n        const lMatrix: Matrix = Matrix.identity(4);\r\n        lMatrix.data[0][0] = 1 - lSquareY - lSquareZ;\r\n        lMatrix.data[0][1] = lProductXy - lProductZw;\r\n        lMatrix.data[0][2] = lProductXz + lProductYw;\r\n\r\n        lMatrix.data[1][0] = lProductXy + lProductZw;\r\n        lMatrix.data[1][1] = 1 - lSquareX - lSquareZ;\r\n        lMatrix.data[1][2] = lProductYz - lProductXw;\r\n\r\n        lMatrix.data[2][0] = lProductXz - lProductYw;\r\n        lMatrix.data[2][1] = lProductYz + lProductXw;\r\n        lMatrix.data[2][2] = 1 - lSquareX - lSquareY;\r\n\r\n        return lMatrix;\r\n    }\r\n\r\n    /**\r\n     * Multiplicate with quaternion.\r\n     * @param pQuaternion - Quaterion source.\r\n     */\r\n    public mult(pQuaternion: Quaternion): Quaternion {\r\n        const lW: number = this.mW * pQuaternion.w - this.mX * pQuaternion.x - this.mY * pQuaternion.y - this.mZ * pQuaternion.z;\r\n        const lX: number = this.mW * pQuaternion.x + this.mX * pQuaternion.w + this.mY * pQuaternion.z - this.mZ * pQuaternion.y;\r\n        const lY: number = this.mW * pQuaternion.y - this.mX * pQuaternion.z + this.mY * pQuaternion.w + this.mZ * pQuaternion.x;\r\n        const lZ: number = this.mW * pQuaternion.z + this.mX * pQuaternion.y - this.mY * pQuaternion.x + this.mZ * pQuaternion.w;\r\n\r\n        return new Quaternion(lW, lX, lY, lZ);\r\n    }\r\n\r\n    /**\r\n     * Normalize quaternion.\r\n     */\r\n    public normalize(): Quaternion {\r\n        // Calculate length.\r\n        const lLength = Math.hypot(Math.pow(this.mW, 2), Math.pow(this.mX, 2), Math.pow(this.mY, 2), Math.pow(this.mZ, 2));\r\n\r\n        // Create new quaternion by dividing each dimension by length.\r\n        return new Quaternion(this.mW / lLength, this.mX / lLength, this.mY / lLength, this.mZ / lLength);\r\n    }\r\n}","import { Exception } from '@kartoffelgames/core';\r\n\r\nexport class Vector {\r\n    private readonly mData: Array<number>;\r\n\r\n    /**\r\n     * Get vector data.\r\n     */\r\n    public get data(): Array<number> {\r\n        return this.mData;\r\n    }\r\n\r\n    /**\r\n     * W value quick access. \r\n     */\r\n    public get w(): number {\r\n        return this.mData[3];\r\n    }\r\n\r\n    /**\r\n     * X value quick access. \r\n     */\r\n    public get x(): number {\r\n        return this.mData[0];\r\n    }\r\n\r\n    /**\r\n     * Y value quick access. \r\n     */\r\n    public get y(): number {\r\n        return this.mData[1];\r\n    }\r\n\r\n    /**\r\n     * Z value quick access. \r\n     */\r\n    public get z(): number {\r\n        return this.mData[2];\r\n    }\r\n    \r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pData - Vector data.\r\n     */\r\n    public constructor(pData: Array<number>) {\r\n        this.mData = [...pData];\r\n    }\r\n\r\n    /**\r\n     * Add two vectors.\r\n     * @param pAddData - Vector or scalar.\r\n     */\r\n    public add(pAddData: Vector | number): Vector {\r\n        const lData: Array<number> = new Array<number>();\r\n\r\n        if (pAddData instanceof Vector) {\r\n            // Restrict on same length.\r\n            if (this.mData.length !== pAddData.data.length) {\r\n                throw new Exception('Vectors need to be the same length for calculation.', this);\r\n            }\r\n\r\n            // Add values.\r\n            for (let lIndex: number = 0; lIndex < this.mData.length; lIndex++) {\r\n                lData.push(this.mData[lIndex] + pAddData.data[lIndex]);\r\n            }\r\n        } else {\r\n            // Add scalar to each vector component.\r\n            for (const lItem of this.mData) {\r\n                lData.push(lItem + pAddData);\r\n            }\r\n        }\r\n\r\n        return new Vector(lData);\r\n    }\r\n\r\n    /**\r\n     * Get length of vector.\r\n     */\r\n    public length(): number {\r\n        // Square root sum.\r\n        return Math.hypot(...this.mData);\r\n    }\r\n\r\n    /**\r\n     * Calulate cross product of two vector3.\r\n     * @param pVector - Vector3.\r\n     */\r\n    public multCross(pVector: Vector): Vector {\r\n        // Restrict on same length.\r\n        if (this.mData.length !== pVector.data.length && this.mData.length !== 3) {\r\n            throw new Exception('Vectors need to be the length of 3 for corss product calculation.', this);\r\n        }\r\n\r\n        /*\r\n         * cx = ay*bz − az*by\r\n         * cy = az*bx − ax*bz\r\n         * cz = ax*by − ay*bx\r\n         */\r\n        return new Vector([\r\n            this.mData[1] * pVector.data[2] - this.mData[2] * pVector.data[1],\r\n            this.mData[2] * pVector.data[0] - this.mData[0] * pVector.data[2],\r\n            this.mData[0] * pVector.data[1] - this.mData[1] * pVector.data[0]\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Multiply with dot procedure.\r\n     * @param pVector - Vector.\r\n     */\r\n    public multDot(pVector: Vector): number {\r\n        // Restrict on same length.\r\n        if (this.mData.length !== pVector.data.length) {\r\n            throw new Exception('Vectors need to be the same length for calculation.', this);\r\n        }\r\n\r\n        // Calculate dot product.\r\n        let lProduct: number = 0;\r\n        for (let lIndex: number = 0; lIndex < this.mData.length; lIndex++) {\r\n            lProduct += this.mData[lIndex] * pVector.data[lIndex];\r\n        }\r\n\r\n        return lProduct;\r\n    }\r\n\r\n    /**\r\n     * Normalize vector.\r\n     */\r\n    public normalize(): Vector {\r\n        const lLength: number = this.length();\r\n\r\n        // Devide each vector component with it vector length.\r\n        const lData: Array<number> = new Array<number>();\r\n        for (const lItem of this.mData) {\r\n            lData.push(lItem / lLength);\r\n        }\r\n\r\n        return new Vector(lData);\r\n    }\r\n\r\n    /**\r\n     * Substract two vectors.\r\n     * @param pSubData - Vector or scalar\r\n     */\r\n    public sub(pSubData: Vector | number): Vector {\r\n        const lData: Array<number> = new Array<number>();\r\n\r\n        if (pSubData instanceof Vector) {\r\n            // Restrict on same length.\r\n            if (this.mData.length !== pSubData.data.length) {\r\n                throw new Exception('Vectors need to be the same length for calculation.', this);\r\n            }\r\n\r\n            // Add values.\r\n            for (let lIndex: number = 0; lIndex < this.mData.length; lIndex++) {\r\n                lData.push(this.mData[lIndex] - pSubData.data[lIndex]);\r\n            }\r\n        } else {\r\n            // Substract scalar to each vector component.\r\n            for (const lItem of this.mData) {\r\n                lData.push(lItem - pSubData);\r\n            }\r\n        }\r\n\r\n        return new Vector(lData);\r\n    }\r\n}","import { Matrix } from './math/matrix';\r\nimport { Quaternion } from './math/quaternion';\r\nimport { Vector } from './math/vector';\r\n\r\nexport class Transform {\r\n    private readonly mPivot: Matrix;\r\n    private mRotation: Quaternion;\r\n    private readonly mScale: Matrix;\r\n    private readonly mTranslation: Matrix;\r\n\r\n    /**\r\n     * X pivot point.\r\n     */\r\n    public get pivotX(): number {\r\n        return this.mPivot.data[0][3];\r\n    } set pivotX(pValue: number) {\r\n        this.mPivot.data[0][3] = pValue;\r\n    }\r\n\r\n    /**\r\n     * Y pivot point.\r\n     */\r\n    public get pivotY(): number {\r\n        return this.mPivot.data[1][3];\r\n    } set pivotY(pValue: number) {\r\n        this.mPivot.data[1][3] = pValue;\r\n    }\r\n\r\n    /**\r\n     * Z pivot point.\r\n     */\r\n    public get pivotZ(): number {\r\n        return this.mPivot.data[2][3];\r\n    } set pivotZ(pValue: number) {\r\n        this.mPivot.data[2][3] = pValue;\r\n    }\r\n\r\n    /**\r\n     * Rotation on X angle.\r\n     * Pitch.\r\n     */\r\n    public get rotationPitch(): number {\r\n        return this.mRotation.asEuler().x;\r\n    }\r\n\r\n    /**\r\n     * Rotation on Z angle.\r\n     * Roll.\r\n     */\r\n    public get rotationRoll(): number {\r\n        return this.mRotation.asEuler().z;\r\n    }\r\n\r\n    /**\r\n     * Rotation on Y angle.\r\n     * Yaw.\r\n     */\r\n    public get rotationYaw(): number {\r\n        return this.mRotation.asEuler().y;\r\n    }\r\n\r\n    /**\r\n     * Depth scale.\r\n     */\r\n    public get scaleDepth(): number {\r\n        return this.mScale.data[2][2];\r\n    }\r\n\r\n    /**\r\n     * Height scale.\r\n     */\r\n    public get scaleHeight(): number {\r\n        return this.mScale.data[1][1];\r\n    }\r\n\r\n    /**\r\n     * Width scale.\r\n     */\r\n    public get scaleWidth(): number {\r\n        return this.mScale.data[0][0];\r\n    }\r\n\r\n    /**\r\n     * X translation.\r\n     */\r\n    public get translationX(): number {\r\n        return this.mTranslation.data[0][3];\r\n    }\r\n\r\n    /**\r\n     * Y translation.\r\n     */\r\n    public get translationY(): number {\r\n        return this.mTranslation.data[1][3];\r\n    }\r\n\r\n    /**\r\n     * Z translation.\r\n     */\r\n    public get translationZ(): number {\r\n        return this.mTranslation.data[2][3];\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    public constructor() {\r\n        this.mScale = Matrix.identity(4);\r\n        this.mTranslation = Matrix.identity(4);\r\n        this.mRotation = new Quaternion(1, 0, 0, 0);\r\n        this.mPivot = Matrix.identity(4);\r\n    }\r\n\r\n    /**\r\n     * Add angles to current euler rotation angles.\r\n     * @param pPitch - Pitch degree.\r\n     * @param pYaw - Yaw degree.\r\n     * @param pRoll - Roll degree.\r\n     */\r\n    public addEulerRotation(pPitch: number, pYaw: number, pRoll: number): void {\r\n        // Apply rotation to current rotation.\r\n        this.mRotation = this.mRotation.addEulerRotation(pPitch, pYaw, pRoll);\r\n    }\r\n\r\n    /**\r\n     * Add rotation to already rotated object.\r\n     * @param pPitch - Pitch degree.\r\n     * @param pYaw - Yaw degree.\r\n     * @param pRoll - Roll degree.\r\n     */\r\n    public addRotation(pPitch: number, pYaw: number, pRoll: number): void {\r\n        // Apply rotation to current rotation.\r\n        this.mRotation = Quaternion.fromRotation(pPitch, pYaw, pRoll).mult(this.mRotation);\r\n    }\r\n\r\n    /**\r\n     * Add scale.\r\n     * @param pWidth - Width multiplier.\r\n     * @param pHeight - Height multiplier.\r\n     * @param pDepth - Depth multiplier.\r\n     */\r\n    public addScale(pWidth: number, pHeight: number, pDepth: number): void {\r\n        this.mScale.data[0][0] += pWidth;\r\n        this.mScale.data[1][1] += pHeight;\r\n        this.mScale.data[2][2] += pDepth;\r\n    }\r\n\r\n    /**\r\n     * Add translation.\r\n     * @param pX - Movement on worlds X axis.\r\n     * @param pY - Movement on worlds Y axis.\r\n     * @param pZ - Movement on worlds Z axis.\r\n     */\r\n    public addTranslation(pX: number, pY: number, pZ: number): this {\r\n        this.mTranslation.data[0][3] += pX;\r\n        this.mTranslation.data[1][3] += pY;\r\n        this.mTranslation.data[2][3] += pZ;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get transformation matrix.\r\n     */\r\n    public getMatrix(pType: TransformMatrix): Matrix {\r\n        switch (pType) {\r\n            case TransformMatrix.Scale: {\r\n                return this.mScale;\r\n            }\r\n            case TransformMatrix.Translation: {\r\n                return this.mTranslation;\r\n            }\r\n            case TransformMatrix.Rotation: {\r\n                return this.mRotation.asMatrix();\r\n            }\r\n            case TransformMatrix.PivotRotation: {\r\n                const lRotationMatrix: Matrix = this.getMatrix(TransformMatrix.Rotation);\r\n\r\n                // Check if pivit point is used.\r\n                let lPivotRotation: Matrix;\r\n                if (this.pivotX !== 0 || this.pivotY !== 0 || this.pivotZ !== 0) {\r\n                    // Translate pivot => rotate => reverse pivate translation.\r\n                    lPivotRotation = this.mPivot.inverse().mult(lRotationMatrix).mult(this.mPivot);\r\n                } else {\r\n                    lPivotRotation = lRotationMatrix;\r\n                }\r\n\r\n                return lPivotRotation;\r\n            }\r\n            case TransformMatrix.Transformation: {\r\n                const lScale: Matrix = this.getMatrix(TransformMatrix.Scale);\r\n                const lTranslation: Matrix = this.getMatrix(TransformMatrix.Translation);\r\n                const lRotation: Matrix = this.getMatrix(TransformMatrix.PivotRotation);\r\n\r\n                // First scale, second rotate, third translate.\r\n                return lTranslation.mult(lRotation).mult(lScale);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset current rotation and set new rotation.\r\n     * @param pPitch - Pitch degree.\r\n     * @param pYaw - Yaw degree.\r\n     * @param pRoll - Roll degree.\r\n     */\r\n    public setRotation(pPitch: number | null, pYaw: number | null, pRoll: number | null): void {\r\n        const lPitch: number = pPitch ?? this.rotationPitch;\r\n        const lYaw: number = pYaw ?? this.rotationYaw;\r\n        const lRoll: number = pRoll ?? this.rotationRoll;\r\n\r\n        // Create new rotation.\r\n        this.mRotation = Quaternion.fromRotation(lPitch, lYaw, lRoll);\r\n    }\r\n\r\n    /**\r\n     * Set scale.\r\n     * @param pWidth - Width multiplier.\r\n     * @param pHeight - Height multiplier.\r\n     * @param pDepth - Depth multiplier.\r\n     */\r\n    public setScale(pWidth: number | null, pHeight: number | null, pDepth: number | null): this {\r\n        this.mScale.data[0][0] = pWidth ?? this.scaleWidth;\r\n        this.mScale.data[1][1] = pHeight ?? this.scaleHeight;\r\n        this.mScale.data[2][2] = pDepth ?? this.scaleDepth;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set translation.\r\n     * @param pX - Movement on worlds X axis.\r\n     * @param pY - Movement on worlds Y axis.\r\n     * @param pZ - Movement on worlds Z axis.\r\n     */\r\n    public setTranslation(pX: number | null, pY: number | null, pZ: number | null): this {\r\n        this.mTranslation.data[0][3] = pX ?? this.translationX;\r\n        this.mTranslation.data[1][3] = pY ?? this.translationY;\r\n        this.mTranslation.data[2][3] = pZ ?? this.translationZ;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translate into rotation direction.\r\n     * @param pForward - Forward movement.\r\n     * @param pRight - Right movement.\r\n     * @param pUp - Up movement.\r\n     */\r\n    public translateInDirection(pForward: number, pRight: number, pUp: number): void {\r\n        const lTranslationVector: Vector = new Vector([pRight, pUp, pForward, 1]);\r\n        const lDirectionVector: Vector = this.getMatrix(TransformMatrix.Rotation).vectorMult(lTranslationVector);\r\n\r\n        // Add direction.\r\n        this.addTranslation(lDirectionVector.x, lDirectionVector.y, lDirectionVector.z);\r\n    }\r\n}\r\n\r\nexport enum TransformMatrix {\r\n    Rotation = 1,\r\n    PivotRotation = 2,\r\n    Translation = 3,\r\n    Scale = 4,\r\n    Transformation = 5\r\n}","import { Matrix } from '../../math/matrix';\r\nimport { IProjection } from './i-projection.interface';\r\n\r\nexport class PerspectiveProjection implements IProjection {\r\n    private mAngleOfView: number;\r\n    private mAspectRatio: number;\r\n    private mCacheProjectionMatrix: Matrix | null;\r\n    private mFar: number;\r\n    private mNear: number;\r\n\r\n    /**\r\n     * Angle of view.\r\n     */\r\n    public get angleOfView(): number {\r\n        return this.mAngleOfView;\r\n    } set angleOfView(pValue: number) {\r\n        this.mAngleOfView = pValue;\r\n\r\n        // Reset cached matrix.\r\n        this.mCacheProjectionMatrix = null;\r\n    }\r\n\r\n    /**\r\n     * Angle of view.\r\n     */\r\n    public get aspectRatio(): number {\r\n        return this.mAspectRatio;\r\n    } set aspectRatio(pValue: number) {\r\n        this.mAspectRatio = pValue;\r\n\r\n        // Reset cached matrix.\r\n        this.mCacheProjectionMatrix = null;\r\n    }\r\n\r\n    /**\r\n     * Far plane.\r\n     */\r\n    public get far(): number {\r\n        return this.mFar;\r\n    } set far(pValue: number) {\r\n        this.mFar = pValue;\r\n\r\n        // Reset cached matrix.\r\n        this.mCacheProjectionMatrix = null;\r\n    }\r\n\r\n    /**\r\n     * Near plane.\r\n     */\r\n    public get near(): number {\r\n        return this.mNear;\r\n    } set near(pValue: number) {\r\n        this.mNear = pValue;\r\n\r\n        // Reset cached matrix.\r\n        this.mCacheProjectionMatrix = null;\r\n    }\r\n\r\n    /**\r\n     * Projection matrix.\r\n     */\r\n    public get projectionMatrix(): Matrix {\r\n        if (this.mCacheProjectionMatrix === null) {\r\n            this.mCacheProjectionMatrix = this.createMatrix();\r\n        }\r\n\r\n        return this.mCacheProjectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    public constructor() {\r\n        this.mAngleOfView = 0;\r\n        this.mNear = 0;\r\n        this.mFar = 0;\r\n        this.mAspectRatio = 0;\r\n\r\n        // Cache.\r\n        this.mCacheProjectionMatrix = null;\r\n    }\r\n\r\n    /**\r\n     * Create projection matrix.\r\n     */\r\n    private createMatrix(): Matrix {\r\n        const lMatrix: Matrix = Matrix.identity(4);\r\n\r\n        // Reset identity.\r\n        lMatrix.data[0][0] = 0;\r\n        lMatrix.data[1][1] = 0;\r\n        lMatrix.data[2][2] = 0;\r\n        lMatrix.data[3][3] = 0;\r\n\r\n        // Calculate planes with centered camera on z-plane.\r\n        const lFar: number = this.mFar;\r\n        const lNear: number = this.mNear;\r\n\r\n        // Top bottom calculated by get height from vertical angle of view.\r\n        // Half angle is from y=>0 to top plane, as the angle descripes the distance between top and bottom plane.\r\n        // Tan(angleOfView / 2) = Top / Near => Near * Tan(angleOfView / 2) = Top\r\n        const lTop: number = this.mNear * Math.tan((this.angleOfView * Math.PI / 180) / 2);\r\n        const lBottom: number = -lTop;\r\n\r\n        // Left right calculated from aspect ratio.\r\n        const lRight: number = lTop * this.aspectRatio;\r\n        const lLeft: number = -lRight;\r\n\r\n        // We need to set VectorZ to VectorW to devide VectorX and VectorY by the VectorZ.\r\n        // So planes are smaller the further ways they are.\r\n        // And scale VectorX and VectorY with the near plane to start the projection not on Z=0 but on Z=Near.\r\n        // ┌ N  0  0   0  ┐   ┌ 1 ┐   ┌ 1 ┐\r\n        // | 0  N  0   0  |   | 2 |   | 2 |\r\n        // | 0  0  M1  M2 | x | 3 | = | 3 |\r\n        // └ 0  0  1   0  ┘   └ 1 ┘   └ 3 ┘\r\n\r\n        // Problem is: The VectorZ get also divided by VectorX and VectorW.\r\n        // To fix the problem set VectorZ to VectorZ² with only M1 and M2 available.\r\n        // As as M1 is the Scaling(M1 * Z) and M2 is Translating(M2 + Z) we get:\r\n        // M1*Z + M2 = Z² => Quadratic means two solutions. But we need one.\r\n        // So we constrains the equation to be only valid between Near and Far. So we set Z=Near or Z=Far.\r\n        // All other Z Values are calculated quadratic ranging from Near to Far.\r\n        // So we get:\r\n        // M1*Near + M2 = Near²  => M1 = Far + Near\r\n        // M1*Far  + M2 = Far²   => M2 = -(Far * Near)\r\n        // ┌ N  0      0         0     ┐\r\n        // | 0  N      0         0     |\r\n        // | 0  0    F + N   -(F * N)  |\r\n        // └ 0  0      1         0     ┘\r\n\r\n        // Multiplicate this perspectiv matrix with the orthigraphic to center the camera.\r\n        // ┌  2/(R-L)    0         0    -(R+L)/(R-L) ┐   ┌ N  0      0         0     ┐\r\n        // |     0     2/(T-B)     0    -(T+B)/(T-B) |   | 0  N      0         0     |\r\n        // |     0        0     1/(F-N)   -N/(F-N)   | x | 0  0    F + N   -(F * N)  |\r\n        // └     0        0        0          1      ┘   └ 0  0      1         0     ┘\r\n\r\n        // And we get.\r\n        // ┌  2N/(R-L)    0        -(R+L)/(R-L)           0      ┐\r\n        // |     0     2N/(T-B)    -(T+B)/(T-B)           0      |\r\n        // |     0        0          F/(F-N)       -(F*N)/(F-N) |\r\n        // └     0        0             1                0      ┘\r\n\r\n\r\n        // Set matrix data. Row 1:\r\n        lMatrix.data[0][0] = (2 * lNear) / (lRight - lLeft);\r\n        lMatrix.data[0][2] = -(lRight + lLeft) / (lRight - lLeft);\r\n\r\n        // Set matrix data. Row 2:\r\n        lMatrix.data[1][1] = (2 * lNear) / (lTop - lBottom);\r\n        lMatrix.data[1][2] = -(lTop + lBottom) / (lTop - lBottom);\r\n\r\n        // Set matrix data. Row 3:\r\n        lMatrix.data[2][2] = lFar / (lFar - lNear);\r\n        lMatrix.data[2][3] = -(lFar * lNear) / (lFar - lNear);\r\n\r\n        // Set matrix data. Row 4:\r\n        lMatrix.data[3][2] = 1;\r\n\r\n        return lMatrix;\r\n    }\r\n}","import { Matrix } from '../math/matrix';\r\nimport { Transform, TransformMatrix } from '../transform';\r\nimport { IProjection } from './projection/i-projection.interface';\r\n\r\nexport class ViewProjection {\r\n    private readonly mProjection: IProjection;\r\n    private readonly mTransformation: Transform;\r\n\r\n    /**\r\n     * Camera projection.\r\n     */\r\n    public get projection(): IProjection {\r\n        return this.mProjection;\r\n    }\r\n\r\n    /**\r\n     * Camera transformation.\r\n     */\r\n    public get transformation(): Transform {\r\n        return this.mTransformation;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    public constructor(pProjection: IProjection) {\r\n        this.mProjection = pProjection;\r\n        this.mTransformation = new Transform();\r\n    }\r\n\r\n    /**\r\n     * Get camera matrix. \r\n     * @param pType - Matrix type. \r\n     */\r\n    public getMatrix(pType: CameraMatrix): Matrix {\r\n        switch (pType) {\r\n            case CameraMatrix.Translation: {\r\n                return this.mTransformation.getMatrix(TransformMatrix.Translation);\r\n            }\r\n            case CameraMatrix.Rotation: {\r\n                return this.mTransformation.getMatrix(TransformMatrix.Rotation);\r\n            }\r\n            case CameraMatrix.PivotRotation: {\r\n                return this.mTransformation.getMatrix(TransformMatrix.PivotRotation);\r\n            }\r\n            case CameraMatrix.Projection: {\r\n                return this.mProjection.projectionMatrix;\r\n            }\r\n            case CameraMatrix.View: {\r\n                const lTranslation: Matrix = this.getMatrix(CameraMatrix.Translation);\r\n                const lRotation: Matrix = this.getMatrix(CameraMatrix.Rotation);\r\n                return lTranslation.mult(lRotation).inverse();\r\n            }\r\n            case CameraMatrix.ViewProjection: {\r\n                const lView: Matrix = this.getMatrix(CameraMatrix.View);\r\n                const lProjection: Matrix = this.getMatrix(CameraMatrix.Projection);\r\n                return lProjection.mult(lView);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport enum CameraMatrix {\r\n    Translation = 1,\r\n    Rotation = 2,\r\n    PivotRotation = 3,\r\n    Projection = 4,\r\n    View = 5,\r\n    ViewProjection = 6\r\n}","// Create attributes data.\r\nexport const CanvasVertexPositionData: Array<number> = [ // 4x Position\r\n    -1.0, 1.0, 0.0, 1.0,\r\n    1.0, 1.0, 0.0, 1.0,\r\n    1.0, -1.0, 0.0, 1.0,\r\n    -1.0, -1.0, 0.0, 1.0,\r\n];\r\n\r\nexport const CanvasVertexUvData: Array<number> = [ // 4x Position\r\n    //  0, 1, 3\r\n    0.0, 0.0,\r\n    1.0, 0.0,\r\n    0.0, 1.0,\r\n    // 1, 2, 3\r\n    1.0, 0.0,\r\n    1.0, 1.0,\r\n    0.0, 1.0,\r\n];\r\n\r\nexport const CanvasVertexNormalData: Array<number> = [ // 4x Position\r\n    // Back 1,0,3\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n];\r\n\r\n// Create mesh.\r\nexport const CanvasVertexIndices = [\r\n    0, 1, 3,\r\n    1, 2, 3,\r\n];","// Create attributes data.\r\nexport const CubeVertexPositionData: Array<number> = [ // 4x Position\r\n    // Back\r\n    -1.0, 1.0, 1.0, 1.0,\r\n    1.0, 1.0, 1.0, 1.0,\r\n    1.0, -1.0, 1.0, 1.0,\r\n    -1.0, -1.0, 1.0, 1.0,\r\n\r\n    // Front\r\n    -1.0, 1.0, -1.0, 1.0,\r\n    1.0, 1.0, -1.0, 1.0,\r\n    1.0, -1.0, -1.0, 1.0,\r\n    -1.0, -1.0, -1.0, 1.0\r\n];\r\n\r\nexport const CubeVertexUvData: Array<number> = [ // 4x Position\r\n    // Front 4,5,6\r\n    0.33333, 0.25,\r\n    0.66666, 0.25,\r\n    0.66666, 0.50,\r\n    // Front 4,6,7\r\n    0.33333, 0.25,\r\n    0.66666, 0.50,\r\n    0.33333, 0.50,\r\n\r\n    // Back 1,0,3\r\n    0.66666, 1,\r\n    0.33333, 1,\r\n    0.33333, 0.75,\r\n    // Back 1,3,2\r\n    0.66666, 1,\r\n    0.33333, 0.75,\r\n    0.66666, 0.75,\r\n\r\n    // Left 0,4,7\r\n    0, 0.25,\r\n    0.33333, 0.25,\r\n    0.33333, 0.50,\r\n    // Left 0,7,3\r\n    0, 0.25,\r\n    0.33333, 0.50,\r\n    0, 0.50,\r\n\r\n    // Right 5,1,2\r\n    0.66666, 0.25,\r\n    1, 0.25,\r\n    1, 0.50,\r\n    // Right 5,2,6\r\n    0.66666, 0.25,\r\n    1, 0.50,\r\n    0.66666, 0.50,\r\n\r\n    // Top 0,1,5\r\n    0.33333, 0,\r\n    0.66666, 0,\r\n    0.66666, 0.25,\r\n    // Top 0,5,4\r\n    0.33333, 0,\r\n    0.66666, 0.25,\r\n    0.33333, 0.25,\r\n\r\n    // Bottom 7,6,2\r\n    0.33333, 0.50,\r\n    0.66666, 0.50,\r\n    0.66666, 0.75,\r\n    // Bottom 7,2,3\r\n    0.33333, 0.50,\r\n    0.66666, 0.75,\r\n    0.33333, 0.75,\r\n];\r\n\r\nexport const CubeVertexNormalData: Array<number> = [ // 4x Position\r\n    // Front\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n    0, 0, -1, 0,\r\n\r\n    // Back 1,0,3\r\n    0, 0, 1, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 1, 0,\r\n\r\n    // Left 0,4,7\r\n    -1, 0, 0, 0,\r\n    -1, 0, 0, 0,\r\n    -1, 0, 0, 0,\r\n    -1, 0, 0, 0,\r\n    -1, 0, 0, 0,\r\n    -1, 0, 0, 0,\r\n\r\n    // Right 5,1,2\r\n    1, 0, 0, 0,\r\n    1, 0, 0, 0,\r\n    1, 0, 0, 0,\r\n    1, 0, 0, 0,\r\n    1, 0, 0, 0,\r\n    1, 0, 0, 0,\r\n\r\n    // Top 0,1,5\r\n    0, 1, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 1, 0, 0,\r\n\r\n    // Bottom 7,6,2\r\n    0, -1, 0, 0,\r\n    0, -1, 0, 0,\r\n    0, -1, 0, 0,\r\n    0, -1, 0, 0,\r\n    0, -1, 0, 0,\r\n    0, -1, 0, 0,\r\n];\r\n\r\n// Create mesh.\r\nexport const CubeVertexIndices = [\r\n    // Front\r\n    4, 5, 6,\r\n    4, 6, 7,\r\n    // Back\r\n    1, 0, 3,\r\n    1, 3, 2,\r\n    // Left\r\n    0, 4, 7,\r\n    0, 7, 3,\r\n    // Right\r\n    5, 1, 2,\r\n    5, 2, 6,\r\n    // Top\r\n    0, 1, 5,\r\n    0, 5, 4,\r\n    // Bottom\r\n    7, 6, 2,\r\n    7, 2, 3\r\n];","// Create attributes data.\r\nexport const ParticleVertexPositionUvData: Array<number> = [ // 4x Position, 2x uv\r\n    // 1\r\n    -1.0, 0.5, 0.0, 1.0,/* UV */ 0.0, 0.0,\r\n    0.0, -0.5, 0.0, 1.0,/* UV */ 0.5, 1.0,\r\n    - 1.0, -0.5, -0.6, 1.0,/* UV */ 0.0, 1.0,\r\n\r\n    // 2\r\n    - 1.0, 0.5, 0.0, 1.0,/* UV */ 0.0, 0.0,\r\n    0.0, 0.5, 0.0, 1.0,/* UV */ 0.5, 0.0,\r\n    0.0, -0.5, 0.0, 1.0,/* UV */ 0.5, 1.0,\r\n\r\n    // 3\r\n    0.0, 0.5, 0.0, 1.0,/* UV */ 0.5, 0.0,\r\n    1.0, -0.5, -0.6, 1.0,/* UV */ 1.0, 1.0,\r\n    0.0, -0.5, 0.0, 1.0,/* UV */ 0.5, 1.0,\r\n\r\n    // 4\r\n    0.0, 0.5, 0.0, 1.0,/* UV */ 0.5, 0.0,\r\n    1.0, 0.5, -1.2, 1.0,/* UV */ 1.0, 0.0,\r\n    1.0, -0.5, -0.6, 1.0,/* UV */ 1.0, 1.0,\r\n];\r\n\r\n// Create mesh.\r\nexport const ParticleVertexIndices = [\r\n    0, 1, 2,\r\n    3, 4, 5,\r\n    6, 7, 8,\r\n    9, 10, 11\r\n];","import { Dictionary } from '@kartoffelgames/core';\r\nimport { BaseInputDevice, DeviceConfiguration, InputConfiguration, InputDevices, KeyboardButton, MouseButton, MouseKeyboardConnector } from '@kartoffelgames/web.game-input';\r\nimport { GpuBufferView } from '../../source/buffer/gpu-buffer-view';\r\nimport { CameraMatrix, ViewProjection } from './camera/view_projection/view-projection';\r\n\r\nexport const InitCameraControls = (pCanvas: HTMLCanvasElement, pCamera: ViewProjection, pCameraBuffer: GpuBufferView<Float32Array>): void => {\r\n    // Register keyboard mouse movements.\r\n    const lDefaultConfiguaration: DeviceConfiguration = new DeviceConfiguration();\r\n    lDefaultConfiguaration.addAction('Forward', [KeyboardButton.KeyW]);\r\n    lDefaultConfiguaration.addAction('Back', [KeyboardButton.KeyS]);\r\n    lDefaultConfiguaration.addAction('Left', [KeyboardButton.KeyA]);\r\n    lDefaultConfiguaration.addAction('Right', [KeyboardButton.KeyD]);\r\n    lDefaultConfiguaration.addAction('Up', [KeyboardButton.ShiftLeft]);\r\n    lDefaultConfiguaration.addAction('Down', [KeyboardButton.ControlLeft]);\r\n    lDefaultConfiguaration.addAction('RotateLeft', [KeyboardButton.KeyQ]);\r\n    lDefaultConfiguaration.addAction('RotateRight', [KeyboardButton.KeyE]);\r\n    lDefaultConfiguaration.addAction('Yaw', [MouseButton.Xaxis]);\r\n    lDefaultConfiguaration.addAction('Pitch', [MouseButton.Yaxis]);\r\n    lDefaultConfiguaration.triggerTolerance = 0;\r\n    const lInputConfiguration: InputConfiguration = new InputConfiguration(lDefaultConfiguaration);\r\n    const lInputDevices: InputDevices = new InputDevices(lInputConfiguration);\r\n    lInputDevices.registerConnector(new MouseKeyboardConnector());\r\n\r\n    const lCurrentActionValue: Dictionary<string, number> = new Dictionary<string, number>();\r\n    const lKeyboard: BaseInputDevice = lInputDevices.devices[0];\r\n    lKeyboard.addEventListener('actionstatechange', (pEvent) => {\r\n        lCurrentActionValue.set(pEvent.action, pEvent.state);\r\n    });\r\n    window.setInterval(() => {\r\n        const lSpeed = 10;\r\n\r\n        // Z Axis\r\n        if (lCurrentActionValue.get('Forward')! > 0) {\r\n            pCamera.transformation.translateInDirection((lCurrentActionValue.get('Forward')! / 50) * lSpeed, 0, 0);\r\n        }\r\n        if (lCurrentActionValue.get('Back')! > 0) {\r\n            pCamera.transformation.translateInDirection(-(lCurrentActionValue.get('Back')! / 50) * lSpeed, 0, 0);\r\n        }\r\n\r\n        // X Axis\r\n        if (lCurrentActionValue.get('Right')! > 0) {\r\n            pCamera.transformation.translateInDirection(0, (lCurrentActionValue.get('Right')! / 50) * lSpeed, 0);\r\n        }\r\n        if (lCurrentActionValue.get('Left')! > 0) {\r\n            pCamera.transformation.translateInDirection(0, -(lCurrentActionValue.get('Left')! / 50) * lSpeed, 0);\r\n        }\r\n\r\n        // Y Axis\r\n        if (lCurrentActionValue.get('Up')! > 0) {\r\n            pCamera.transformation.translateInDirection(0, 0, (lCurrentActionValue.get('Up')! / 50) * lSpeed);\r\n        }\r\n        if (lCurrentActionValue.get('Down')! > 0) {\r\n            pCamera.transformation.translateInDirection(0, 0, -(lCurrentActionValue.get('Down')! / 50) * lSpeed);\r\n        }\r\n\r\n        // Rotation.\r\n        if (lCurrentActionValue.get('Yaw')! > 0 || lCurrentActionValue.get('Yaw')! < 0) {\r\n            pCamera.transformation.addEulerRotation(0, lCurrentActionValue.get('Yaw')!, 0);\r\n        }\r\n        if (lCurrentActionValue.get('Pitch')! > 0 || lCurrentActionValue.get('Pitch')! < 0) {\r\n            pCamera.transformation.addEulerRotation(lCurrentActionValue.get('Pitch')!, 0, 0);\r\n        }\r\n        if (lCurrentActionValue.get('RotateLeft')! > 0) {\r\n            pCamera.transformation.addEulerRotation(0, 0, lCurrentActionValue.get('RotateLeft')!);\r\n        }\r\n        if (lCurrentActionValue.get('RotateRight')! > 0) {\r\n            pCamera.transformation.addEulerRotation(0, 0, -lCurrentActionValue.get('RotateRight')!);\r\n        }\r\n\r\n        // Update transformation buffer.\r\n        pCameraBuffer.write(pCamera.getMatrix(CameraMatrix.ViewProjection).dataArray, ['viewProjection']);\r\n        pCameraBuffer.write(pCamera.getMatrix(CameraMatrix.View).dataArray, ['view']);\r\n        pCameraBuffer.write(pCamera.getMatrix(CameraMatrix.Projection).dataArray, ['projection']);\r\n        pCameraBuffer.write([pCamera.transformation.translationX, pCamera.transformation.translationY, pCamera.transformation.translationZ], ['position']);\r\n\r\n        pCameraBuffer.write(pCamera.getMatrix(CameraMatrix.Rotation).dataArray, ['translation', 'rotation']);\r\n        pCameraBuffer.write(pCamera.getMatrix(CameraMatrix.Translation).dataArray, ['translation', 'translation']);\r\n        pCameraBuffer.write(pCamera.getMatrix(CameraMatrix.Rotation).inverse().dataArray, ['invertedTranslation', 'rotation']);\r\n        pCameraBuffer.write(pCamera.getMatrix(CameraMatrix.Translation).inverse().dataArray, ['invertedTranslation', 'translation']);\r\n    }, 8);\r\n    pCanvas.addEventListener('click', () => {\r\n        pCanvas.requestPointerLock();\r\n    });\r\n};\r\n\r\nexport const UpdateFpsDisplay = (() => {\r\n    let lMaxFps: number = 0;\r\n\r\n    return (pFps: number, pWidth: number): void => {\r\n        const lCanvas: HTMLCanvasElement = document.getElementById('fps-display') as HTMLCanvasElement;\r\n        const lCanvasContext: CanvasRenderingContext2D = lCanvas.getContext('2d', { willReadFrequently: true })!;\r\n\r\n        // Update canvas width.\r\n        if (pWidth !== lCanvas.width) {\r\n            lCanvas.width = pWidth;\r\n            lCanvas.height = 30;\r\n        }\r\n\r\n        if (lCanvas.width < 2) {\r\n            return;\r\n        }\r\n\r\n        // Get current fps image data except the first pixel column.\r\n        const lLastFpsData: ImageData = lCanvasContext.getImageData(1, 0, lCanvas.width - 1, lCanvas.height);\r\n\r\n        // Adjust to new fps scaling.\r\n        let lScaling: number = 1;\r\n        if (lMaxFps < pFps) {\r\n            lScaling = lMaxFps / pFps;\r\n            lMaxFps = pFps;\r\n        }\r\n\r\n        // now clear the right-most pixels:\r\n        if (lScaling === 1) {\r\n            lCanvasContext.clearRect(lCanvas.width - 1, 0, 1, lCanvas.height);\r\n        } else {\r\n            lCanvasContext.clearRect(0, 0, lCanvas.width, lCanvas.height);\r\n        }\r\n\r\n        // Put image data to left.\r\n        const lScalingSize: number = Math.floor(lCanvas.height * lScaling);\r\n        lCanvasContext.putImageData(lLastFpsData, 0, lCanvas.height - (lScalingSize), 0, 0, lCanvas.width - 1, lScalingSize);\r\n\r\n        // Calculate heigt of rect.\r\n        const lRectHeight: number = (pFps / lMaxFps) * lCanvas.height;\r\n\r\n        // Draw current fps.\r\n        lCanvasContext.fillStyle = '#87beee';\r\n        lCanvasContext.fillRect(lCanvas.width - 1, lCanvas.height - lRectHeight, 1, lRectHeight);\r\n    };\r\n})();","import { GpuDevice } from './device/gpu-device';\r\nimport { GpuObject } from './gpu_object/gpu-object';\r\nimport { GpuObjectSetup } from './gpu_object/gpu-object-setup';\r\n\r\n/**\r\n * Base memory layout. \r\n * Represents a memory slot used by a shader.\r\n */\r\nexport abstract class BaseMemoryLayout<TSetupObject extends GpuObjectSetup<any> | null = any> extends GpuObject<null, '', TSetupObject> {\r\n    /**\r\n     * Constuctor.\r\n     * @param pDevice - Device reference.\r\n     */\r\n    public constructor(pDevice: GpuDevice) {\r\n        super(pDevice);\r\n    }\r\n}","import { Exception, TypedArray } from '@kartoffelgames/core';\r\nimport { GpuLimit } from '../constant/gpu-limit.enum';\r\nimport { StorageBindingType } from '../constant/storage-binding-type.enum';\r\nimport { GpuBuffer } from './gpu-buffer';\r\nimport { BaseBufferMemoryLayout } from './memory_layout/base-buffer-memory-layout';\r\n\r\n/**\r\n * Create a view to look at a gpu buffer.\r\n */\r\nexport class GpuBufferView<T extends TypedArray> {\r\n    private readonly mBuffer: GpuBuffer;\r\n    private readonly mDynamicOffset: number;\r\n    private readonly mLayout: BaseBufferMemoryLayout;\r\n    private readonly mTypedArrayConstructor: GpuBufferViewFormat<T>;\r\n\r\n    /**\r\n     * Get underlying buffer of view.\r\n     */\r\n    public get buffer(): GpuBuffer {\r\n        return this.mBuffer;\r\n    }\r\n\r\n    /**\r\n     * Index of dynamic offset.\r\n     */\r\n    public get dynamicOffsetIndex(): number {\r\n        return this.mDynamicOffset / this.mLayout.fixedSize;\r\n    }\r\n\r\n    /**\r\n     * Buffer view format.\r\n     */\r\n    public get format(): GpuBufferViewFormat<T> {\r\n        return this.mTypedArrayConstructor;\r\n    }\r\n\r\n    /**\r\n     * Length of buffer view based on view type.\r\n     */\r\n    public get length(): number {\r\n        return this.mBuffer.size / this.mTypedArrayConstructor.BYTES_PER_ELEMENT;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pBuffer - Views buffer. \r\n     * @param pLayout - Layout of view.\r\n     * @param pDynamicOffsetIndex - Index of dynamic offset.\r\n     */\r\n    public constructor(pBuffer: GpuBuffer, pLayout: BaseBufferMemoryLayout, pType: GpuBufferViewFormat<T>, pDynamicOffsetIndex: number = 0, pStorageType: StorageBindingType = StorageBindingType.None) {\r\n        // Layout must fit into buffer.\r\n        if (pLayout.fixedSize > pBuffer.size) {\r\n            throw new Exception(`Buffer view fixed size (${pLayout.fixedSize}) exceedes buffer size (${pBuffer.size}). Buffer must at least be the layouts fixed size.`, this);\r\n        }\r\n\r\n        // Default dynamic offset.\r\n        this.mDynamicOffset = 0;\r\n\r\n        // Calculate and validate dynamic offset.\r\n        if (pDynamicOffsetIndex > 0) {\r\n            // Dynamic offsets can only be applied to fixed buffer layouts.\r\n            if (pLayout.variableSize > 0) {\r\n                throw new Exception('Dynamic offsets can only be applied to fixed buffer layouts.', this);\r\n            }\r\n\r\n            // Read correct alignment limitations for storage type.\r\n            const lOffsetAlignment: number = (() => {\r\n                if (pStorageType === StorageBindingType.None) {\r\n                    return pBuffer.device.capabilities.getLimit(GpuLimit.MinUniformBufferOffsetAlignment);\r\n                } else {\r\n                    return pBuffer.device.capabilities.getLimit(GpuLimit.MinStorageBufferOffsetAlignment);\r\n                }\r\n            })();\r\n\r\n            // Apply offset alignment to byte size.\r\n            const lMinBufferSize: number = (Math.ceil(pLayout.fixedSize / lOffsetAlignment) * lOffsetAlignment) * (pDynamicOffsetIndex + 1);\r\n            if (pBuffer.size < lMinBufferSize) {\r\n                throw new Exception(`Buffer view offset size (${lMinBufferSize}) exceedes buffer size ${pBuffer.size}.`, this);\r\n            }\r\n\r\n            this.mDynamicOffset = (Math.ceil(pLayout.fixedSize / lOffsetAlignment) * lOffsetAlignment) * pDynamicOffsetIndex;\r\n        }\r\n\r\n        this.mLayout = pLayout;\r\n        this.mBuffer = pBuffer;\r\n        this.mTypedArrayConstructor = pType;\r\n\r\n    }\r\n\r\n    /**\r\n     * Read buffer on layout location.\r\n     * \r\n     * @param pLayoutPath - Layout path. \r\n     */\r\n    public async read(pLayoutPath: Array<string> = []): Promise<TypedArray> {\r\n        const lLocation = this.mLayout.locationOf(pLayoutPath);\r\n\r\n        return new this.mTypedArrayConstructor(await this.mBuffer.read(this.mDynamicOffset + lLocation.offset, lLocation.size));\r\n    }\r\n\r\n    /**\r\n     * Write data on layout location.\r\n     * \r\n     * @param pData - Data.\r\n     * @param pLayoutPath - Layout path.\r\n     */\r\n    public async write(pData: ArrayLike<number>, pLayoutPath: Array<string> = []): Promise<void> {\r\n        const lLocation = this.mLayout.locationOf(pLayoutPath);\r\n\r\n        // Add data into a data buffer.\r\n        const lDataBuffer: TypedArray = new this.mTypedArrayConstructor(pData);\r\n\r\n        // Skip new promise creation by returning original promise.\r\n        return this.mBuffer.write(lDataBuffer.buffer, this.mDynamicOffset + lLocation.offset);\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport type GpuBufferViewFormat<T extends TypedArray> = (new (pArrayLike: ArrayLike<number> | ArrayBufferLike) => T) & { BYTES_PER_ELEMENT: number; };","import { Exception, TypedArray } from '@kartoffelgames/core';\r\nimport { BufferUsage } from '../constant/buffer-usage.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuResourceObject, GpuResourceObjectInvalidationType } from '../gpu_object/gpu-resource-object';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\nimport { GpuBufferView, GpuBufferViewFormat } from './gpu-buffer-view';\r\nimport { BaseBufferMemoryLayout } from './memory_layout/base-buffer-memory-layout';\r\n\r\n/**\r\n * GpuBuffer. Uses local and native gpu buffers.\r\n */\r\nexport class GpuBuffer extends GpuResourceObject<BufferUsage, GPUBuffer> implements IGpuObjectNative<GPUBuffer> {\r\n    private mByteSize: number;\r\n    private mInitialData: ArrayBufferLike | null | undefined;\r\n    private mReadBuffer: GPUBuffer | null;\r\n    private readonly mWriteBuffer: GpuBufferWriteBuffer;\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUBuffer {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Buffer size in bytes aligned to 4 bytes.\r\n     */\r\n    public get size(): number {\r\n        // Align data size by 4 byte.\r\n        return this.mByteSize;\r\n    } set size(pByteCount: number) {\r\n        // Calculate size. Align to 4 byte. Allways.\r\n        this.mByteSize = ((pByteCount) + 3) & ~3;\r\n\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Write buffer limitation.\r\n     * Limiting the amount of created staging buffer to perform reads.\r\n     */\r\n    public get writeBufferLimitation(): number {\r\n        return this.mWriteBuffer.limitation;\r\n    } set writeBufferLimitation(pLimit: number) {\r\n        this.mWriteBuffer.limitation = pLimit;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - GPU.\r\n     * @param pLayout - Buffer layout.\r\n     * @param pInitialData  - Inital data. Can be empty. Or Buffer size. \r\n     */\r\n    public constructor(pDevice: GpuDevice, pByteCount: number) {\r\n        super(pDevice);\r\n\r\n        // Calculate size. Align to 4 byte. Allways.\r\n        this.mByteSize = ((pByteCount) + 3) & ~3;\r\n\r\n        // Allways add copy source/destination to copy over information on rebuild.\r\n        this.extendUsage(BufferUsage.CopyDestination);\r\n        this.extendUsage(BufferUsage.CopySource);\r\n\r\n        // Read and write buffers.\r\n        this.mWriteBuffer = {\r\n            limitation: Number.MAX_SAFE_INTEGER,\r\n            ready: new Array<GPUBuffer>(),\r\n            buffer: new Set<GPUBuffer>()\r\n        };\r\n        this.mReadBuffer = null;\r\n\r\n        // No intial data.\r\n        this.mInitialData = null;\r\n    }\r\n\r\n    /**\r\n     * Set new initial data before the buffer is created.\r\n     * \r\n     * @param pDataCallback - Data callback. \r\n     */\r\n    public initialData(pInitialData: ArrayBufferLike): this {\r\n        // Initial is inital.\r\n        if (this.mInitialData !== null) {\r\n            throw new Exception('Initial callback can only be set once.', this);\r\n        }\r\n\r\n        // Set new initial data, set on creation.\r\n        this.mInitialData = pInitialData;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Read data raw without layout.\r\n     * \r\n     * @param pOffset - Data read offset in byte.\r\n     * @param pSize - Data read size in byte.\r\n     */\r\n    public async read(pOffset?: number | undefined, pSize?: number | undefined): Promise<ArrayBuffer> {\r\n        // Set buffer as writeable.\r\n        this.extendUsage(BufferUsage.CopySource);\r\n\r\n        const lOffset: number = pOffset ?? 0;\r\n        const lSize: number = pSize ?? this.size - lOffset;\r\n\r\n        // Create a new buffer when it is not already created.\r\n        if (this.mReadBuffer === null) {\r\n            this.mReadBuffer = this.device.gpu.createBuffer({\r\n                label: `ReadWaveBuffer`,\r\n                size: this.size,\r\n                usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\r\n                mappedAtCreation: false,\r\n            });\r\n        }\r\n\r\n        // Copy buffer data from native into staging.\r\n        const lCommandDecoder: GPUCommandEncoder = this.device.gpu.createCommandEncoder();\r\n        lCommandDecoder.copyBufferToBuffer(this.native, lOffset, this.mReadBuffer, lOffset, lSize);\r\n        this.device.gpu.queue.submit([lCommandDecoder.finish()]);\r\n\r\n        // Get buffer and map data.\r\n        await this.mReadBuffer.mapAsync(GPUMapMode.READ, lOffset, lSize);\r\n\r\n        // Read result from mapped range and copy it with slice.\r\n        const lBufferReadResult: ArrayBuffer = this.mReadBuffer.getMappedRange().slice(0);\r\n\r\n        // Map read buffer again.\r\n        this.mReadBuffer.unmap();\r\n\r\n        // Get mapped data and force it into typed array.\r\n        return lBufferReadResult;\r\n    }\r\n\r\n    /**\r\n     * Create view of buffer.\r\n     * \r\n     * @param pLayout - View layout.\r\n     * @param pType - Type of view.\r\n     * @param pDynamicOffsetIndex - Index of dynamic offset.\r\n     * \r\n     * @returns view of buffer. \r\n     */\r\n    public view<T extends TypedArray>(pLayout: BaseBufferMemoryLayout, pType: GpuBufferViewFormat<T>, pDynamicOffsetIndex: number = 0): GpuBufferView<T> {\r\n        return new GpuBufferView(this, pLayout, pType, pDynamicOffsetIndex);\r\n    }\r\n\r\n    /**\r\n     * Write data raw without layout.\r\n     * \r\n     * @param pData - Data.\r\n     * @param pOffset - Data offset.\r\n     */\r\n    public async write(pData: ArrayBuffer, pOffset?: number): Promise<void> {\r\n        // Set buffer as writeable.\r\n        this.extendUsage(BufferUsage.CopyDestination);\r\n\r\n        // Read native before reading staging buffers.\r\n        // On Native read, staging buffers can be destroyed.\r\n        const lNative: GPUBuffer = this.native;\r\n\r\n        // Try to read a mapped buffer from waving list.\r\n        let lStagingBuffer: GPUBuffer | null = null;\r\n        if (this.mWriteBuffer.ready.length === 0) {\r\n            // Create new buffer when limitation is not meet.\r\n            if (this.mWriteBuffer.buffer.size < this.mWriteBuffer.limitation) {\r\n                lStagingBuffer = this.device.gpu.createBuffer({\r\n                    label: `RingBuffer-WriteWaveBuffer-${this.mWriteBuffer.buffer.size}`,\r\n                    size: this.size,\r\n                    usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\r\n                    mappedAtCreation: true,\r\n                });\r\n\r\n                // Add new buffer to complete list.\r\n                this.mWriteBuffer.buffer.add(lStagingBuffer);\r\n            }\r\n        } else {\r\n            // Pop as long as staging buffer is not destroyed or could not be found.\r\n            lStagingBuffer = this.mWriteBuffer.ready.pop()!;\r\n        }\r\n\r\n        // Convert views into array buffers.\r\n        let lDataArrayBuffer: ArrayBuffer = pData;\r\n        if (ArrayBuffer.isView(lDataArrayBuffer)) {\r\n            lDataArrayBuffer = lDataArrayBuffer.buffer;\r\n        }\r\n\r\n        // Get byte length and offset of data to write.\r\n        const lDataByteLength: number = lDataArrayBuffer.byteLength;\r\n        const lOffset: number = pOffset ?? 0;\r\n\r\n        // When no staging buffer is available, use the slow native.\r\n        if (!lStagingBuffer) {\r\n            // Write data into mapped range.\r\n            this.device.gpu.queue.writeBuffer(lNative, lOffset, lDataArrayBuffer, 0, lDataByteLength);\r\n\r\n            return;\r\n        }\r\n\r\n        // Execute write operations on waving buffer.\r\n        const lMappedBuffer: ArrayBuffer = lStagingBuffer.getMappedRange(lOffset, lDataByteLength);\r\n\r\n        // Set data to mapped buffer. Use the smallest available byte view (1 byte).\r\n        new Int8Array(lMappedBuffer).set(new Int8Array(lDataArrayBuffer));\r\n\r\n        // Unmap for copying data.\r\n        lStagingBuffer.unmap();\r\n\r\n        // Copy buffer data from staging into wavig buffer.\r\n        const lCommandDecoder: GPUCommandEncoder = this.device.gpu.createCommandEncoder();\r\n        lCommandDecoder.copyBufferToBuffer(lStagingBuffer, lOffset, lNative, lOffset, lDataByteLength);\r\n        this.device.gpu.queue.submit([lCommandDecoder.finish()]);\r\n\r\n        // Shedule staging buffer remaping.\r\n        lStagingBuffer.mapAsync(GPUMapMode.WRITE).then(() => {\r\n            // Check for destroyed state, it is destroyed when not in write buffer list.\r\n            if (this.mWriteBuffer.buffer.has(lStagingBuffer)) {\r\n                this.mWriteBuffer.ready.push(lStagingBuffer);\r\n            }\r\n        }).catch(() => {\r\n            // Remove buffer when it could not be mapped.\r\n            this.mWriteBuffer.buffer.delete(lStagingBuffer);\r\n            lStagingBuffer.destroy();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Destroy wave and ready buffer.\r\n     */\r\n    protected override destroyNative(pNativeObject: GPUBuffer): void {\r\n        pNativeObject.destroy();\r\n\r\n        // Destroy all wave buffer and clear list.\r\n        for (const lWriteBuffer of this.mWriteBuffer.buffer) {\r\n            lWriteBuffer.destroy();\r\n        }\r\n        this.mWriteBuffer.buffer.clear();\r\n\r\n        // Clear ready buffer list.\r\n        while (this.mWriteBuffer.ready.length > 0) {\r\n            // No need to destroy. All buffers have already destroyed.\r\n            this.mWriteBuffer.ready.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate buffer. Write local gpu object data as initial native buffer data.\r\n     */\r\n    protected override generateNative(pLastNative: GPUBuffer | null): GPUBuffer {\r\n        // Create gpu buffer mapped\r\n        const lBuffer: GPUBuffer = this.device.gpu.createBuffer({\r\n            label: 'Ring-Buffer-Static-Buffer',\r\n            size: this.size,\r\n            usage: this.usage,\r\n            mappedAtCreation: !!this.mInitialData\r\n        });\r\n\r\n        // Write data. Is completly async.\r\n        if (this.mInitialData) {\r\n            // Convert views into array buffers.\r\n            let lDataArrayBuffer: ArrayBuffer = this.mInitialData;\r\n            if (ArrayBuffer.isView(lDataArrayBuffer)) {\r\n                lDataArrayBuffer = lDataArrayBuffer.buffer;\r\n            }\r\n\r\n            // Write initial data.\r\n            const lMappedBuffer: ArrayBuffer = lBuffer.getMappedRange();\r\n\r\n            // Validate buffer and initial data length.\r\n            if (lMappedBuffer.byteLength !== lDataArrayBuffer.byteLength) {\r\n                throw new Exception(`Initial buffer data (byte-length: ${lDataArrayBuffer.byteLength}) does not fit into buffer (length: ${lMappedBuffer.byteLength}). `, this);\r\n            }\r\n\r\n            // Set data to buffer. Use the smallest available byte view (1 byte).\r\n            new Int8Array(lMappedBuffer).set(new Int8Array(lDataArrayBuffer));\r\n\r\n            // Unmap buffer.\r\n            lBuffer.unmap();\r\n\r\n            // Clear inital data.\r\n            this.mInitialData = undefined;\r\n        }\r\n\r\n        // Try to copy last data into new buffer.\r\n        if (pLastNative) {\r\n            const lCommandDecoder: GPUCommandEncoder = this.device.gpu.createCommandEncoder();\r\n            lCommandDecoder.copyBufferToBuffer(pLastNative, 0, lBuffer, 0, Math.min(pLastNative.size, lBuffer.size));\r\n            this.device.gpu.queue.submit([lCommandDecoder.finish()]);\r\n        }\r\n\r\n        return lBuffer;\r\n    }\r\n}\r\n\r\ntype GpuBufferWriteBuffer = {\r\n    buffer: Set<GPUBuffer>;\r\n    ready: Array<GPUBuffer>;\r\n    limitation: number;\r\n};","import { Exception } from '@kartoffelgames/core';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { BaseBufferMemoryLayout, BufferLayoutLocation } from './base-buffer-memory-layout';\r\n\r\n/**\r\n * Memory layout for a array buffer or part of a buffer.\r\n */\r\nexport class ArrayBufferMemoryLayout extends BaseBufferMemoryLayout {\r\n    private readonly mAlignment: number;\r\n    private readonly mArraySize: number;\r\n    private readonly mInnerType: BaseBufferMemoryLayout;\r\n\r\n    /**\r\n     * Type byte alignment.\r\n     */\r\n    public override get alignment(): number {\r\n        return this.mAlignment;\r\n    }\r\n\r\n    /**\r\n     * Array item count.\r\n     */\r\n    public get arraySize(): number {\r\n        return this.mArraySize;\r\n    }\r\n\r\n    /**\r\n     * Type size in byte.\r\n     */\r\n    public get fixedSize(): number {\r\n        if (this.arraySize < 1) {\r\n            return 0;\r\n        }\r\n\r\n        return this.arraySize * Math.ceil(this.innerType.fixedSize / this.innerType.alignment) * this.innerType.alignment;\r\n    }\r\n\r\n    /**\r\n     * Array type.\r\n     * Is negative when array is variable sized.\r\n     */\r\n    public get innerType(): BaseBufferMemoryLayout {\r\n        return this.mInnerType;\r\n    }\r\n\r\n    /**\r\n     * Size of the variable part of layout in bytes.\r\n     */\r\n    public get variableSize(): number {\r\n        if (this.arraySize > 0) {\r\n            return 0;\r\n        }\r\n\r\n        return Math.ceil(this.innerType.fixedSize / this.innerType.alignment) * this.innerType.alignment;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pParameter - Parameter.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pParameter: ArrayBufferMemoryLayoutParameter) {\r\n        super(pDevice, pParameter.innerType.alignmentType);\r\n\r\n        // Static properties.\r\n        this.mArraySize = pParameter.arraySize;\r\n        this.mInnerType = pParameter.innerType;\r\n\r\n        // Change alignment based on alignment type.\r\n        this.mAlignment = (() => {\r\n            switch (pParameter.innerType.alignmentType) {\r\n                case BufferAlignmentType.Packed: {\r\n                    return 1;\r\n                }\r\n                case BufferAlignmentType.Storage: {\r\n                    return pParameter.innerType.alignment;\r\n                }\r\n                case BufferAlignmentType.Uniform: {\r\n                    // For uniforms, arrays buffers are aligned by 16 byte\r\n                    return Math.ceil(pParameter.innerType.alignment / 16) * 16;\r\n                }\r\n            }\r\n        })();\r\n\r\n        if (this.mInnerType.variableSize > 0) {\r\n            throw new Exception(`Array memory layout must be of fixed size.`, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get location of path.\r\n     * @param pPathName - Path name. Divided by dots.\r\n     */\r\n    public override locationOf(pPathName: Array<string>): BufferLayoutLocation {\r\n        const lPathName: Array<string> = [...pPathName];\r\n\r\n        // Complete array.\r\n        const lItemIndexString: string | undefined = lPathName.shift();\r\n        if (!lItemIndexString) {\r\n            // Only valid for static arrays.\r\n            if (this.variableSize > 0) {\r\n                throw new Exception('Getting the offset and size location for dynamic arrays is not supported.', this);\r\n            }\r\n\r\n            return { size: this.fixedSize, offset: 0 };\r\n        }\r\n\r\n        // Validate item index.\r\n        if (isNaN(<any>lItemIndexString)) {\r\n            throw new Exception('Array index must be a number.', this);\r\n        }\r\n\r\n        // Calculate size of single item.\r\n        const lArrayItemSize: number = Math.ceil(this.innerType.fixedSize / this.innerType.alignment) * this.innerType.alignment;\r\n        const lArrayItemOffset: number = parseInt(lItemIndexString) * lArrayItemSize;\r\n\r\n        // Single item.\r\n        if (lPathName.length === 0) {\r\n            return { size: lArrayItemSize, offset: lArrayItemOffset };\r\n        }\r\n\r\n        // Inner property.\r\n        const lInnerLocation = this.innerType.locationOf(lPathName);\r\n        return { size: lInnerLocation.size, offset: lArrayItemOffset + lInnerLocation.offset };\r\n    }\r\n}\r\n\r\nexport interface ArrayBufferMemoryLayoutParameter {\r\n    /**\r\n     * Array size. -1 when array is variable sized.\r\n     */\r\n    arraySize: number;\r\n    innerType: BaseBufferMemoryLayout;\r\n}","import { BaseMemoryLayout } from '../../base-memory-layout';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObjectSetup } from '../../gpu_object/gpu-object-setup';\r\n\r\n/**\r\n * Basic memory layout for gpu buffers. \r\n */\r\nexport abstract class BaseBufferMemoryLayout<TSetupObject extends GpuObjectSetup<any> | null = any> extends BaseMemoryLayout<TSetupObject> {\r\n    private readonly mAlignmentType: BufferAlignmentType;\r\n\r\n    /**\r\n     * Type byte alignment.\r\n     */\r\n    public abstract readonly alignment: number;\r\n\r\n    /**\r\n     * Fixed buffer size in bytes.\r\n     */\r\n    public abstract readonly fixedSize: number;\r\n\r\n    /**\r\n     * Size of the variable part of layout in bytes.\r\n     */\r\n    public abstract readonly variableSize: number;\r\n\r\n    /**\r\n     * Buffer value alignment type.\r\n     */\r\n    public get alignmentType(): BufferAlignmentType {\r\n        return this.mAlignmentType;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pAlignmentType: BufferAlignmentType) {\r\n        super(pDevice);\r\n        this.mAlignmentType = pAlignmentType;\r\n    }\r\n\r\n    /**\r\n     * Get location of path.\r\n     * @param pPathName - Path name. Divided by dots.\r\n     */\r\n    public abstract locationOf(pPathName: Array<string>): BufferLayoutLocation;\r\n}\r\n\r\nexport type BufferLayoutLocation = {\r\n    /**\r\n     * Offset in bytes.\r\n     */\r\n    offset: number;\r\n\r\n    /**\r\n     * Size in byte.\r\n     */\r\n    size: number;\r\n};","import { Exception } from '@kartoffelgames/core';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { BufferItemFormat } from '../../constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../../constant/buffer-item-multiplier.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { BaseBufferMemoryLayout, BufferLayoutLocation } from './base-buffer-memory-layout';\r\n\r\n/**\r\n * Memory layout for a primitive number buffer or part of a buffer.\r\n */\r\nexport class PrimitiveBufferMemoryLayout extends BaseBufferMemoryLayout {\r\n    /**\r\n     * Get item count for multiplier type.\r\n     * \r\n     * @param pMultiplier - Multiplier type.\r\n     * \r\n     * @returns item count of multiplier. \r\n     */\r\n    public static itemCountOfMultiplier(pMultiplier: BufferItemMultiplier): number {\r\n        switch (pMultiplier) {\r\n            case BufferItemMultiplier.Single: { return 1; }\r\n            case BufferItemMultiplier.Vector2: { return 2; }\r\n            case BufferItemMultiplier.Vector3: { return 3; }\r\n            case BufferItemMultiplier.Vector4: { return 4; }\r\n            case BufferItemMultiplier.Matrix22: { return 4; }\r\n            case BufferItemMultiplier.Matrix23: { return 6; }\r\n            case BufferItemMultiplier.Matrix24: { return 8; }\r\n            case BufferItemMultiplier.Matrix32: { return 6; }\r\n            case BufferItemMultiplier.Matrix33: { return 9; }\r\n            case BufferItemMultiplier.Matrix34: { return 12; }\r\n            case BufferItemMultiplier.Matrix42: { return 8; }\r\n            case BufferItemMultiplier.Matrix43: { return 0; }\r\n            case BufferItemMultiplier.Matrix44: { return 16; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get byte count of item format.\r\n     * \r\n     * @param pItemFormat - Item format.\r\n     * \r\n     * @returns byte count of format. \r\n     */\r\n    public static itemFormatByteCount(pItemFormat: BufferItemFormat): number {\r\n        switch (pItemFormat) {\r\n            case BufferItemFormat.Float16: return 2;\r\n            case BufferItemFormat.Float32: return 4;\r\n            case BufferItemFormat.Uint32: return 4;\r\n            case BufferItemFormat.Sint32: return 4;\r\n            case BufferItemFormat.Uint8: return 1;\r\n            case BufferItemFormat.Sint8: return 1;\r\n            case BufferItemFormat.Uint16: return 2;\r\n            case BufferItemFormat.Sint16: return 2;\r\n            case BufferItemFormat.Unorm16: return 2;\r\n            case BufferItemFormat.Snorm16: return 2;\r\n            case BufferItemFormat.Unorm8: return 1;\r\n            case BufferItemFormat.Snorm8: return 1;\r\n        }\r\n    }\r\n\r\n    private readonly mAlignment: number;\r\n    private readonly mFormatByteCount: number;\r\n    private readonly mItemFormat: BufferItemFormat;\r\n    private readonly mItemMultiplier: BufferItemMultiplier;\r\n    private readonly mSize: number;\r\n\r\n    /**\r\n     * Type byte alignment.\r\n     */\r\n    public override get alignment(): number {\r\n        return this.mAlignment;\r\n    }\r\n\r\n    /**\r\n     * Fixed buffer size in bytes.\r\n     */\r\n    public get fixedSize(): number {\r\n        return this.mSize;\r\n    }\r\n\r\n    /**\r\n     * Byte count of underlying format.\r\n     */\r\n    public get formatByteCount(): number {\r\n        return this.mFormatByteCount;\r\n    }\r\n\r\n    /**\r\n     * Format of single value.\r\n     */\r\n    public get itemFormat(): BufferItemFormat {\r\n        return this.mItemFormat;\r\n    }\r\n\r\n    /**\r\n     * Format multiplication.\r\n     */\r\n    public get itemMultiplier(): BufferItemMultiplier {\r\n        return this.mItemMultiplier;\r\n    }\r\n\r\n    /**\r\n     * Buffer size in bytes.\r\n     */\r\n    public get variableSize(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pParameter - Parameter.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pParameter: LinearBufferMemoryLayoutParameter) {\r\n        super(pDevice, pParameter.alignmentType);\r\n\r\n        // Set default size by format.\r\n        this.mFormatByteCount = PrimitiveBufferMemoryLayout.itemFormatByteCount(pParameter.primitiveFormat);\r\n        this.mItemFormat = pParameter.primitiveFormat;\r\n        this.mItemMultiplier = pParameter.primitiveMultiplier;\r\n        this.mSize = this.mFormatByteCount * PrimitiveBufferMemoryLayout.itemCountOfMultiplier(pParameter.primitiveMultiplier);\r\n\r\n        // Calculate alignment and size.\r\n        this.mAlignment = ((): number => {\r\n            switch (pParameter.primitiveMultiplier) {\r\n                case BufferItemMultiplier.Single: return this.mFormatByteCount;\r\n                case BufferItemMultiplier.Vector2: return this.mFormatByteCount * 2;\r\n                case BufferItemMultiplier.Vector3: return this.mFormatByteCount * 4;\r\n                case BufferItemMultiplier.Vector4: return this.mFormatByteCount * 4;\r\n                case BufferItemMultiplier.Matrix22: return this.mFormatByteCount * 2;\r\n                case BufferItemMultiplier.Matrix23: return this.mFormatByteCount * 4;\r\n                case BufferItemMultiplier.Matrix24: return this.mFormatByteCount * 4;\r\n                case BufferItemMultiplier.Matrix32: return this.mFormatByteCount * 2;\r\n                case BufferItemMultiplier.Matrix33: return this.mFormatByteCount * 4;\r\n                case BufferItemMultiplier.Matrix34: return this.mFormatByteCount * 4;\r\n                case BufferItemMultiplier.Matrix42: return this.mFormatByteCount * 2;\r\n                case BufferItemMultiplier.Matrix43: return this.mFormatByteCount * 4;\r\n                case BufferItemMultiplier.Matrix44: return this.mFormatByteCount * 4;\r\n            }\r\n        })();\r\n\r\n        // Override size of primitive.\r\n        if (pParameter.overrideSize) {\r\n            if (this.mSize > pParameter.overrideSize) {\r\n                throw new Exception('Overriden buffer byte size can not be lower than the actual byte size.', this);\r\n            }\r\n\r\n            this.mAlignment = pParameter.overrideSize;\r\n        }\r\n\r\n        // Change alignment based on alignment type.\r\n        this.mAlignment = (() => {\r\n            switch (pParameter.alignmentType) {\r\n                case BufferAlignmentType.Packed: {\r\n                    return 1;\r\n                }\r\n                case BufferAlignmentType.Storage:\r\n                case BufferAlignmentType.Uniform: {\r\n                    return this.mAlignment;\r\n                }\r\n            }\r\n        })();\r\n\r\n        // Override alignment of primitive.\r\n        if (pParameter.overrideAlignment) {\r\n            if (pParameter.overrideAlignment % this.mAlignment !== 0) {\r\n                throw new Exception('Overriden alignment must be dividable by its actual alignment value.', this);\r\n            }\r\n\r\n            this.mAlignment = pParameter.overrideAlignment;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get location of path.\r\n     * @param pPathName - Path name. Divided by dots.\r\n     */\r\n    public locationOf(pPathName: Array<string>): BufferLayoutLocation {\r\n        // Only validate name.\r\n        if (pPathName.length !== 0) {\r\n            throw new Exception(`Simple buffer layout has no properties.`, this);\r\n        }\r\n\r\n        return { size: this.fixedSize, offset: 0 };\r\n    }\r\n}\r\n\r\nexport interface LinearBufferMemoryLayoutParameter {\r\n    alignmentType: BufferAlignmentType;\r\n    overrideAlignment?: number | null;\r\n    overrideSize?: number | null;\r\n    primitiveFormat: BufferItemFormat;\r\n    primitiveMultiplier: BufferItemMultiplier;\r\n}","\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { BufferItemFormat } from '../../constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../../constant/buffer-item-multiplier.enum';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { ArrayBufferMemoryLayout } from './array-buffer-memory-layout';\r\nimport { BaseBufferMemoryLayout } from './base-buffer-memory-layout';\r\nimport { PrimitiveBufferMemoryLayout } from './primitive-buffer-memory-layout';\r\nimport { StructBufferMemoryLayout } from './struct-buffer-memory-layout';\r\nimport { StructBufferMemoryLayoutSetup, StructBufferMemoryLayoutSetupData } from './struct-buffer-memory-layout-setup';\r\n\r\n/**\r\n * Child setup to add types to struct properties.\r\n */\r\nexport class StructBufferMemoryLayoutPropertySetup extends GpuObjectChildSetup<StructBufferMemoryLayoutSetupData, MemoryLayoutCallback> {\r\n    private readonly mAlignmentType: BufferAlignmentType;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pUsage - Buffer usage. \r\n     * @param pSetupReference - Setup references.\r\n     * @param pDataCallback - Data callback.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<StructBufferMemoryLayoutSetupData>, pAlignmentType: BufferAlignmentType, pDataCallback: MemoryLayoutCallback) {\r\n        super(pSetupReference, pDataCallback);\r\n\r\n        this.mAlignmentType = pAlignmentType;\r\n    }\r\n\r\n    /**\r\n     * Buffer as array.\r\n     * \r\n     * @param pSize - Optional. Set size fixed.\r\n     *  \r\n     * @returns array setup. \r\n     */\r\n    public asArray(pSize: number = -1): StructBufferMemoryLayoutPropertySetup {\r\n        return new StructBufferMemoryLayoutPropertySetup(this.setupReferences, this.mAlignmentType, (pMemoryLayout: BaseBufferMemoryLayout) => {\r\n            const lLayout: ArrayBufferMemoryLayout = new ArrayBufferMemoryLayout(this.device, {\r\n                arraySize: pSize,\r\n                innerType: pMemoryLayout\r\n            });\r\n\r\n            this.sendData(lLayout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Memory layout as primitive.\r\n     * \r\n     * @param pPrimitiveFormat - Primitive format.\r\n     * @param pPrimitiveMultiplier - Value multiplier.\r\n     */\r\n    public asPrimitive(pPrimitiveFormat: BufferItemFormat, pPrimitiveMultiplier: BufferItemMultiplier, pAlignment: number | null = null): void {\r\n        const lLayout: PrimitiveBufferMemoryLayout = new PrimitiveBufferMemoryLayout(this.device, {\r\n            alignmentType: this.mAlignmentType,\r\n            primitiveFormat: pPrimitiveFormat,\r\n            primitiveMultiplier: pPrimitiveMultiplier,\r\n            overrideAlignment: pAlignment\r\n        });\r\n\r\n        // Send created data.\r\n        this.sendData(lLayout);\r\n    }\r\n\r\n    /**\r\n     * Memory layout as struct\r\n     * \r\n     * @param pSetupCall - Struct setup call.\r\n     */\r\n    public asStruct(pSetupCall: (pSetup: StructBufferMemoryLayoutSetup) => void): void {\r\n        // Create and setup struct buffer memory layout.\r\n        const lLayout: StructBufferMemoryLayout = new StructBufferMemoryLayout(this.device, this.mAlignmentType);\r\n        lLayout.setup(pSetupCall);\r\n\r\n        // Send created data.\r\n        this.sendData(lLayout);\r\n    }\r\n}\r\n\r\n\r\ntype MemoryLayoutCallback = (pMemoryLayout: BaseBufferMemoryLayout) => void;","import { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectSetup } from '../../gpu_object/gpu-object-setup';\r\nimport { BaseBufferMemoryLayout } from './base-buffer-memory-layout';\r\nimport { StructBufferMemoryLayoutPropertySetup } from './struct-buffer-memory-layout-property-setup';\r\n\r\n/**\r\n * Setup object to add properties to a struct layout.\r\n */\r\nexport class StructBufferMemoryLayoutSetup extends GpuObjectSetup<StructBufferMemoryLayoutSetupData> {\r\n    private readonly mAlignmentType: BufferAlignmentType;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pSetupReference - Setup references.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<StructBufferMemoryLayoutSetupData>, pAlignmentType: BufferAlignmentType) {\r\n        super(pSetupReference);\r\n\r\n        this.mAlignmentType = pAlignmentType;\r\n    }\r\n\r\n    /**\r\n     * Add propery.\r\n     * \r\n     * @param pName - Propery name.\r\n     * \r\n     * @returns property setup. \r\n     */\r\n    public property(pName: string): StructBufferMemoryLayoutPropertySetup {\r\n        // Create empty property.\r\n        const lProperty: StructBufferMemoryLayoutSetupPropertyData = {\r\n            name: pName,\r\n            orderIndex: this.setupData.properties.length,\r\n            layout: null\r\n        };\r\n\r\n        // Add empty property.\r\n        this.setupData.properties.push(lProperty);\r\n\r\n        // Create and return property setup.\r\n        return new StructBufferMemoryLayoutPropertySetup(this.setupReferences, this.mAlignmentType, (pMemoryLayout: BaseBufferMemoryLayout) => {\r\n            lProperty.layout = pMemoryLayout;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill in default data before the setup starts.\r\n     *\r\n     * @param pDataReference - Setup data reference.\r\n     */\r\n    protected override fillDefaultData(pDataReference: StructBufferMemoryLayoutSetupData): void {\r\n        pDataReference.properties = new Array<{ orderIndex: number; name: string; layout: BaseBufferMemoryLayout; }>();\r\n    }\r\n}\r\n\r\ntype StructBufferMemoryLayoutSetupPropertyData = {\r\n    orderIndex: number;\r\n    name: string;\r\n    layout: BaseBufferMemoryLayout | null;\r\n};\r\n\r\nexport type StructBufferMemoryLayoutSetupData = {\r\n    properties: Array<StructBufferMemoryLayoutSetupPropertyData>;\r\n};","import { Exception } from '@kartoffelgames/core';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { IGpuObjectSetup } from '../../gpu_object/interface/i-gpu-object-setup';\r\nimport { BaseBufferMemoryLayout, BufferLayoutLocation } from './base-buffer-memory-layout';\r\nimport { StructBufferMemoryLayoutSetup, StructBufferMemoryLayoutSetupData } from './struct-buffer-memory-layout-setup';\r\n\r\n/**\r\n * Memory layout for a struct buffer or part of a buffer.\r\n */\r\nexport class StructBufferMemoryLayout extends BaseBufferMemoryLayout<StructBufferMemoryLayoutSetup> implements IGpuObjectSetup<StructBufferMemoryLayoutSetup> {\r\n    private mAlignment: number;\r\n    private mFixedSize: number;\r\n    private mInnerProperties: Array<StructBufferMemoryLayoutProperty>;\r\n    private mVariableSize: number;\r\n\r\n    /**\r\n     * Alignment of type.\r\n     */\r\n    public get alignment(): number {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        return this.mAlignment;\r\n    }\r\n\r\n    /**\r\n     * Type size in byte.\r\n     */\r\n    public get fixedSize(): number {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        return this.mFixedSize;\r\n    }\r\n\r\n    /**\r\n     * Ordered inner property names.\r\n     */\r\n    public get properties(): Array<StructBufferMemoryLayoutProperty> {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        return [...this.mInnerProperties];\r\n    }\r\n\r\n    /**\r\n     * Size of variable part of struct.\r\n     */\r\n    public get variableSize(): number {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        return this.mVariableSize;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pParameter - Parameter.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pAlignmentType: BufferAlignmentType) {\r\n        super(pDevice, pAlignmentType);\r\n\r\n        // Calculated properties.\r\n        this.mAlignment = 0;\r\n        this.mFixedSize = 0;\r\n        this.mVariableSize = 0;\r\n\r\n        // Static properties.\r\n        this.mInnerProperties = new Array<StructBufferMemoryLayoutProperty>();\r\n    }\r\n\r\n    /**\r\n     * Get location of path.\r\n     * @param pPathName - Path name. Divided by dots.\r\n     */\r\n    public override locationOf(pPathName: Array<string>): BufferLayoutLocation {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        const lPathName: Array<string> = [...pPathName];\r\n\r\n        // Complete array.\r\n        const lPropertyName: string | undefined = lPathName.shift();\r\n        if (!lPropertyName) {\r\n            if (this.mVariableSize > 0) {\r\n                throw new Exception(`Can't read location of a memory layout with a variable size.`, this);\r\n            }\r\n\r\n            return { size: this.fixedSize, offset: 0 };\r\n        }\r\n\r\n        // Recalculate size.\r\n        let lPropertyOffset: number = 0;\r\n        let lFoundProperty: StructBufferMemoryLayoutProperty | null = null;\r\n        for (const lProperty of this.mInnerProperties) {\r\n            // Increase offset to needed alignment.\r\n            lPropertyOffset = Math.ceil(lPropertyOffset / lProperty.layout.alignment) * lProperty.layout.alignment;\r\n\r\n            // Inner property is found. Skip searching.\r\n            // Alignment just applied so it can be skipped later.\r\n            if (lProperty.name === lPropertyName) {\r\n                lFoundProperty = lProperty;\r\n                break;\r\n            }\r\n\r\n            // Increase offset for complete property. \r\n            // Only last property can have a variable size, so we can only save the fixed size.\r\n            lPropertyOffset += lProperty.layout.fixedSize;\r\n        }\r\n\r\n        // Validate property.\r\n        if (!lFoundProperty) {\r\n            throw new Exception(`Struct buffer layout property \"${lPropertyName}\" not found.`, this);\r\n        }\r\n\r\n        const lPropertyLocation = lFoundProperty.layout.locationOf(lPathName);\r\n        return {\r\n            size: lPropertyLocation.size,\r\n            offset: lPropertyOffset + lPropertyLocation.offset\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Call setup.\r\n     *\r\n     * @param pSetupCallback - Setup callback.\r\n     *\r\n     * @returns this.\r\n     */\r\n    public override setup(pSetupCallback?: ((pSetup: StructBufferMemoryLayoutSetup) => void)): this {\r\n        super.setup(pSetupCallback);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Setup struct layout.\r\n     * \r\n     * @param pReferences - Setup data references.\r\n     */\r\n    protected override onSetup(pReferences: StructBufferMemoryLayoutSetupData): void {\r\n        // Add each property\r\n        for (const lProperty of pReferences.properties) {\r\n            if (!lProperty.layout) {\r\n                throw new Exception(`Struct propery layout was not set.`, this);\r\n            }\r\n\r\n            this.mInnerProperties.push({\r\n                orderIndex: lProperty.orderIndex,\r\n                name: lProperty.name,\r\n                layout: lProperty.layout\r\n            });\r\n        }\r\n\r\n        // Order properties.\r\n        this.mInnerProperties = this.mInnerProperties.sort((pA, pB) => {\r\n            return pA.orderIndex - pB.orderIndex;\r\n        });\r\n\r\n        // Calculate size.\r\n        let lRawDataSize: number = 0;\r\n        for (let lIndex: number = 0; lIndex < this.mInnerProperties.length; lIndex++) {\r\n            const lPropertyLayout = this.mInnerProperties[lIndex].layout;\r\n\r\n            if (lPropertyLayout.variableSize > 0 && lIndex !== (this.mInnerProperties.length - 1)) {\r\n                throw new Exception(`Only the last property of a struct memory layout can have a variable size.`, this);\r\n            }\r\n\r\n            // Increase offset to needed alignment.\r\n            lRawDataSize = Math.ceil(lRawDataSize / lPropertyLayout.alignment) * lPropertyLayout.alignment;\r\n\r\n            // Increase offset for type.\r\n            lRawDataSize += lPropertyLayout.fixedSize;\r\n\r\n            // Alignment is the highest alignment of all properties.\r\n            if (lPropertyLayout.alignment > this.mAlignment) {\r\n                this.mAlignment = lPropertyLayout.alignment;\r\n            }\r\n\r\n            // Set variable size. Can only be the last property.\r\n            if (lPropertyLayout.variableSize > 0) {\r\n                this.mVariableSize = lPropertyLayout.variableSize;\r\n            }\r\n        }\r\n\r\n        // Apply struct alignment to raw data size.\r\n        this.mFixedSize = Math.ceil(lRawDataSize / this.mAlignment) * this.mAlignment;\r\n\r\n        // Change alignment based on alignment type.\r\n        this.mAlignment = (() => {\r\n            switch (this.alignmentType) {\r\n                case BufferAlignmentType.Packed: {\r\n                    return 1;\r\n                }\r\n                case BufferAlignmentType.Storage: {\r\n                    return this.mAlignment;\r\n                }\r\n                case BufferAlignmentType.Uniform: {\r\n                    // For uniforms, struct buffers are aligned by 16 byte\r\n                    return Math.ceil(this.mAlignment / 16) * 16;\r\n                }\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * Create setup object.\r\n     * \r\n     * @param pReferences - Setup references.\r\n     * \r\n     * @returns setup object. \r\n     */\r\n    protected override onSetupObjectCreate(pReferences: GpuObjectSetupReferences<StructBufferMemoryLayoutSetupData>): StructBufferMemoryLayoutSetup {\r\n        return new StructBufferMemoryLayoutSetup(pReferences, this.alignmentType);\r\n    }\r\n}\r\n\r\nexport type StructBufferMemoryLayoutProperty = {\r\n    orderIndex: number,\r\n    name: string,\r\n    layout: BaseBufferMemoryLayout;\r\n};","export enum BufferAlignmentType {\r\n    Packed = 1,\r\n    Uniform = 2,\r\n    Storage = 3\r\n}","export enum BufferItemFormat {\r\n    Float32 = 'float32',\r\n    Uint32 = 'uint32',\r\n    Sint32 = 'sint32',\r\n\r\n    // Extended vertex formats.\r\n    Float16 = 'float16',\r\n    Uint8 = 'uint8',\r\n    Sint8 = 'sint8',\r\n    Uint16 = 'uint16',\r\n    Sint16 = 'sint16',\r\n    Unorm16 = 'unorm16',\r\n    Snorm16 = 'snorm16',\r\n    Unorm8 = 'unorm8',\r\n    Snorm8 = 'snorm8'\r\n}","export enum BufferItemMultiplier {\r\n    // Single\r\n    Single = 'x1',\r\n    \r\n    // Vector\r\n    Vector2 = 'v2',\r\n    Vector3 = 'v3',\r\n    Vector4 = 'v4',\r\n\r\n    // Matrix\r\n    Matrix22 = 'm22',\r\n    Matrix23 = 'm23',\r\n    Matrix24 = 'm24',\r\n    Matrix32 = 'm32',\r\n    Matrix33 = 'm33',\r\n    Matrix34 = 'm34',\r\n    Matrix42 = 'm42',\r\n    Matrix43 = 'm43',\r\n    Matrix44 = 'm44',\r\n}","export enum BufferUsage {\r\n    None = 0,\r\n    Index = GPUBufferUsage.INDEX,\r\n    Vertex = GPUBufferUsage.VERTEX,\r\n    Uniform = GPUBufferUsage.UNIFORM,\r\n    Storage = GPUBufferUsage.STORAGE,\r\n    Indirect = GPUBufferUsage.INDIRECT,\r\n    CopySource = GPUBufferUsage.COPY_SRC,\r\n    CopyDestination = GPUBufferUsage.COPY_DST,\r\n\r\n    // No public available\r\n    // MapWrite = GPUBufferUsage.MAP_WRITE,\r\n    // MapRead = GPUBufferUsage.MAP_READ,\r\n    // QueryResolve = GPUBufferUsage.QUERY_RESOLVE\r\n}","export enum CompareFunction {\r\n    Never = 'never',\r\n    Less = 'less',\r\n    Equal = 'equal',\r\n    LessEqual = 'less-equal',\r\n    Greater = 'greater',\r\n    NotEqual = 'not-equal',\r\n    GreaterEqual = 'greater-equal',\r\n    Allways = 'always'\r\n}","export enum ComputeStage {\r\n    None = 0,\r\n    Fragment = GPUShaderStage.FRAGMENT,\r\n    Vertex = GPUShaderStage.VERTEX,\r\n    Compute = GPUShaderStage.COMPUTE\r\n}\r\n","export enum FilterMode {\r\n    Nearest = 'nearest',\r\n    Linear = 'linear'\r\n}","/**\r\n * Gpu feature names.\r\n */\r\nexport enum GpuFeature {\r\n    DepthClipControl = 'depth-clip-control',\r\n    Depth32floatStencil8 = 'depth32float-stencil8',\r\n    TextureCompressionBc = 'texture-compression-bc',\r\n    TextureCompressionBcSliced3d = 'texture-compression-bc-sliced-3d',\r\n    TextureCompressionEtc2 = 'texture-compression-etc2',\r\n    TextureCompressionAstc = 'texture-compression-astc',\r\n    TimestampQuery = 'timestamp-query',\r\n    IndirectFirstInstance = 'indirect-first-instance',\r\n    ShaderF16 = 'shader-f16',\r\n    Rg11b10ufloatRenderable = 'rg11b10ufloat-renderable',\r\n    Bgra8unormStorage = 'bgra8unorm-storage',\r\n    Float32Filterable = 'float32-filterable',\r\n    ClipDistances = 'clip-distances',\r\n    DualSourceBlendin = 'dual-source-blending'\r\n}","/**\r\n * Gpu limit names.\r\n */\r\nexport enum GpuLimit {\r\n    MaxTextureDimension1D = 'maxTextureDimension1D',\r\n    MaxTextureDimension2D = 'maxTextureDimension2D',\r\n    MaxTextureDimension3D = 'maxTextureDimension3D',\r\n    MaxTextureArrayLayers = 'maxTextureArrayLayers',\r\n    MaxBindGroups = 'maxBindGroups',\r\n    MaxBindGroupsPlusVertexBuffers = 'maxBindGroupsPlusVertexBuffers',\r\n    MaxBindingsPerBindGroup = 'maxBindingsPerBindGroup',\r\n    MaxDynamicUniformBuffersPerPipelineLayout = 'maxDynamicUniformBuffersPerPipelineLayout',\r\n    MaxDynamicStorageBuffersPerPipelineLayout = 'maxDynamicStorageBuffersPerPipelineLayout',\r\n    MaxSampledTexturesPerShaderStage = 'maxSampledTexturesPerShaderStage',\r\n    MaxSamplersPerShaderStage = 'maxSamplersPerShaderStage',\r\n    MaxStorageBuffersPerShaderStage = 'maxStorageBuffersPerShaderStage',\r\n    MaxStorageTexturesPerShaderStage = 'maxStorageTexturesPerShaderStage',\r\n    MaxUniformBuffersPerShaderStage = 'maxUniformBuffersPerShaderStage',\r\n    MaxUniformBufferBindingSize = 'maxUniformBufferBindingSize',\r\n    MaxStorageBufferBindingSize = 'maxStorageBufferBindingSize',\r\n    MinUniformBufferOffsetAlignment = 'minUniformBufferOffsetAlignment',\r\n    MinStorageBufferOffsetAlignment = 'minStorageBufferOffsetAlignment',\r\n    MaxVertexBuffers = 'maxVertexBuffers',\r\n    MaxBufferSize = 'maxBufferSize',\r\n    MaxVertexAttributes = 'maxVertexAttributes',\r\n    MaxVertexBufferArrayStride = 'maxVertexBufferArrayStride',\r\n    MaxInterStageShaderComponents = 'maxInterStageShaderComponents',\r\n    MaxInterStageShaderVariables = 'maxInterStageShaderVariables',\r\n    MaxColorAttachments = 'maxColorAttachments',\r\n    MaxColorAttachmentBytesPerSample = 'maxColorAttachmentBytesPerSample',\r\n    MaxComputeWorkgroupStorageSize = 'maxComputeWorkgroupStorageSize',\r\n    MaxComputeInvocationsPerWorkgroup = 'maxComputeInvocationsPerWorkgroup',\r\n    MaxComputeWorkgroupSizeX = 'maxComputeWorkgroupSizeX',\r\n    MaxComputeWorkgroupSizeY = 'maxComputeWorkgroupSizeY',\r\n    MaxComputeWorkgroupSizeZ = 'maxComputeWorkgroupSizeZ',\r\n    MaxComputeWorkgroupsPerDimension = 'maxComputeWorkgroupsPerDimension',\r\n}","export enum PrimitiveCullMode {\r\n    None = 'none',\r\n    Front = 'front',\r\n    Back = 'back'\r\n}","export enum PrimitiveFrontFace {\r\n    CounterClockWise = 'cw',\r\n    ClockWise = 'ccw'\r\n}","export enum PrimitiveTopology {\r\n    PointList = 'point-list',\r\n    LineList = 'line-list',\r\n    LineStrip = 'line-strip',\r\n    TriangleList = 'triangle-list',\r\n    TriangleStrip = 'triangle-strip'\r\n}","export enum SamplerType {\r\n    Filter = 'filtering',\r\n    NoneFiltering = 'non-filtering',\r\n    Comparison = 'comparison'\r\n}","export enum StencilOperation {\r\n    Keep = 'keep',\r\n    Zero = 'zero',\r\n    Replace = 'replace',\r\n    Invert = 'invert',\r\n    IncrementClamp = 'increment-clamp',\r\n    DecrementClamp = 'decrement-clamp',\r\n    IncrementWrap = 'increment-wrap',\r\n    DecrementWrap = 'decrement-wrap',\r\n}","export enum StorageBindingType {\r\n    None = 0,\r\n    Read = 1,\r\n    Write = 2,\r\n    ReadWrite = 4\r\n}","export enum TextureAspect {\r\n    Red = 'red',\r\n    Green = 'green',\r\n    Blue = 'blue',\r\n    Alpha = 'alpha',\r\n    Stencil = 'stencil',\r\n    Depth = 'depth',\r\n}","export enum TextureBlendFactor {\r\n    Zero = 'zero',\r\n    One = 'one',\r\n    Src = 'src',\r\n    OneMinusSrc = 'one-minus-src',\r\n    SrcAlpha = 'src-alpha',\r\n    OneMinusSrcAlpha = 'one-minus-src-alpha',\r\n    Dst = 'dst',\r\n    OneMinusDst = 'one-minus-dst',\r\n    DstAlpha = 'dst-alpha',\r\n    OneMinusDstAlpha = 'one-minus-dst-alpha',\r\n    SrcAlphaSaturated = 'src-alpha-saturated',\r\n    Constant = 'constant',\r\n    OneMinusConstant = 'one-minus-constant',\r\n    Src1 = 'src1',\r\n    OneMinusSrc1 = 'one-minus-src1',\r\n    Src1Alpha = 'src1-alpha',\r\n    OneMinusSrc1Alpha = 'one-minus-src1-alpha'\r\n}","export enum TextureBlendOperation {\r\n    Add = 'add',\r\n    Subtract = 'subtract',\r\n    ReverseSubtract = 'reverse-subtract',\r\n    Min = 'min',\r\n    Max = 'max'\r\n}\r\n","export enum TextureDimension {\r\n    OneDimension = '1d',\r\n    TwoDimension = '2d',\r\n    ThreeDimension = '3d'\r\n}","export enum TextureFormat {\r\n    // 8-bit formats\r\n    R8unorm = 'r8unorm',\r\n    R8snorm = 'r8snorm',\r\n    R8uint = 'r8uint',\r\n    R8sint = 'r8sint',\r\n\r\n    // 16-bit formats\r\n    R16uint = 'r16uint',\r\n    R16sint = 'r16sint',\r\n    R16float = 'r16float',\r\n    Rg8unorm = 'rg8unorm',\r\n    Rg8snorm = 'rg8snorm',\r\n    Rg8uint = 'rg8uint',\r\n    Rg8sint = 'rg8sint',\r\n\r\n    // 32-bit formats\r\n    R32uint = 'r32uint',\r\n    R32sint = 'r32sint',\r\n    R32float = 'r32float',\r\n    Rg16uint = 'rg16uint',\r\n    Rg16sint = 'rg16sint',\r\n    Rg16float = 'rg16float',\r\n    Rgba8unorm = 'rgba8unorm',\r\n    Rgba8unormSrgb = 'rgba8unorm-srgb',\r\n    Rgba8snorm = 'rgba8snorm',\r\n    Rgba8uint = 'rgba8uint',\r\n    Rgba8sint = 'rgba8sint',\r\n    Bgra8unorm = 'bgra8unorm',\r\n    Bgra8unormSrgb = 'bgra8unorm-srgb',\r\n\r\n    // Packed 32-bit formats\r\n    Rgb9e5ufloat = 'rgb9e5ufloat',\r\n    Rgb10a2uint = 'rgb10a2uint',\r\n    Rgb10a2unorm = 'rgb10a2unorm',\r\n    Rg11b10ufloat = 'rg11b10ufloat',\r\n\r\n    // 64-bit formats\r\n    Rg32uint = 'rg32uint',\r\n    Rg32sint = 'rg32sint',\r\n    Rg32float = 'rg32float',\r\n    Rgba16uint = 'rgba16uint',\r\n    Rgba16sint = 'rgba16sint',\r\n    Rgba16float = 'rgba16float',\r\n\r\n    // 128-bit formats\r\n    Rgba32uint = 'rgba32uint',\r\n    Rgba32sint = 'rgba32sint',\r\n    Rgba32float = 'rgba32float',\r\n\r\n    // Depth/stencil formats\r\n    Stencil8 = 'stencil8',\r\n    Depth16unorm = 'depth16unorm',\r\n    Depth24plus = 'depth24plus',\r\n    Depth24plusStencil8 = 'depth24plusStencil8',\r\n    Depth32float = 'depth32float',\r\n\r\n    // \"depth32float-stencil8\" feature\r\n    Depth32floatStencil8 = 'depth32floatStencil8',\r\n\r\n    // BC compressed formats usable if \"texture-compression-bc\" is both\r\n    // supported by the device/user agent and enabled in requestDevice.\r\n    Bc1RgbaUnorm = 'bc1-rgba-unorm',\r\n    Bc1RgbaUnormSrgb = 'bc1-rgba-unorm-srgb',\r\n    Bc2RgbaUnorm = 'bc2-rgba-unorm',\r\n    Bc2RgbaUnormSrgb = 'bc2-rgba-unorm-srgb',\r\n    Bc3RgbaUnorm = 'bc3-rgba-unorm',\r\n    Bc3RgbaUnormSrgb = 'bc3-rgba-unorm-srgb',\r\n    Bc4Runorm = 'bc4-r-unorm',\r\n    Bc4Rsnorm = 'bc4-r-snorm',\r\n    Bc5RgUnorm = 'bc5-rg-unorm',\r\n    Bc5RgSnorm = 'bc5-rg-snorm',\r\n    Bc6hRgbUfloat = 'bc6h-rgb-ufloat',\r\n    Bc6hRgbFloat = 'bc6h-rgb-float',\r\n    Bc7RgbaUnorm = 'bc7-rgba-unorm',\r\n    Bc7RgbaUnormSrgb = 'bc7-rgba-unorm-srgb',\r\n\r\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\r\n    // supported by the device/user agent and enabled in requestDevice.\r\n    Etc2Rgb8unorm = 'etc2-rgb8unorm',\r\n    Etc2Rgb8unormSrgb = 'etc2-rgb8unorm-srgb',\r\n    Etc2Rgb8a1unorm = 'etc2-rgb8a1unorm',\r\n    Etc2Rgb8a1unormSrgb = 'etc2-rgb8a1unorm-srgb',\r\n    Etc2Rgba8unorm = 'etc2-rgba8unorm',\r\n    Etc2Rgba8unormSrgb = 'etc2-rgba8unorm-srgb',\r\n    EacR11unorm = 'eac-r11unorm',\r\n    EacR11snorm = 'eac-r11snorm',\r\n    EacRg11unorm = 'eac-rg11unorm',\r\n    EacRg11snorm = 'eac-rg11snorm',\r\n\r\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\r\n    // supported by the device/user agent and enabled in requestDevice.\r\n    Astc4x4unorm = 'astc-4x4-unorm',\r\n    Astc4x4unormSrgb = 'astc-4x4-unorm-srgb',\r\n    Astc5x4unorm = 'astc-5x4-unorm',\r\n    Astc5x4unormSrgb = 'astc-5x4-unorm-srgb',\r\n    Astc5x5unorm = 'astc-5x5-unorm',\r\n    Astc5x5unormSrgb = 'astc-5x5-unorm-srgb',\r\n    Astc6x5unorm = 'astc-6x5-unorm',\r\n    Astc6x5unormSrgb = 'astc-6x5-unorm-srgb',\r\n    Astc6x6unorm = 'astc-6x6-unorm',\r\n    Astc6x6unormSrgb = 'astc-6x6-unorm-srgb',\r\n    Astc8x5unorm = 'astc-8x5-unorm',\r\n    Astc8x5unormSrgb = 'astc-8x5-unorm-srgb',\r\n    Astc8x6unorm = 'astc-8x6-unorm',\r\n    Astc8x6unormSrgb = 'astc-8x6-unorm-srgb',\r\n    Astc8x8unorm = 'astc-8x8-unorm',\r\n    Astc8x8unormSrgb = 'astc-8x8-unorm-srgb',\r\n    Astc10x5unorm = 'astc-10x5-unorm',\r\n    Astc10x5unormSrgb = 'astc-10x5-unorm-srgb',\r\n    Astc10x6unorm = 'astc-10x6-unorm',\r\n    Astc10x6unormSrgb = 'astc-10x6-unorm-srgb',\r\n    Astc10x8unorm = 'astc-10x8-unorm',\r\n    Astc10x8unormSrgb = 'astc-10x8-unorm-srgb',\r\n    Astc10x10unorm = 'astc-10x10-unorm',\r\n    Astc10x10unormSrgb = 'astc-10x10-unorm-srgb',\r\n    Astc12x10unorm = 'astc-12x10-unorm',\r\n    Astc12x10unormSrgb = 'astc-12x10-unorm-srgb',\r\n    Astc12x12unorm = 'astc-12x12-unorm',\r\n    Astc12x12unormSrgb = 'astc-12x12-unorm-srgb'\r\n}","export enum TextureOperation {\r\n    Keep = 'keep',\r\n    Clear = 'clear'\r\n}","export enum TextureSampleType {\r\n    Float = 'float',\r\n    SignedInteger = 'sint',\r\n    UnsignedInteger = 'uint',\r\n    UnfilterableFloat = 'unfilterable-float',\r\n    Depth = 'depth'\r\n}","export enum TextureUsage {\r\n    None = 0,\r\n    CopySource = GPUTextureUsage.COPY_SRC,\r\n    CopyDestination = GPUTextureUsage.COPY_DST,\r\n    TextureBinding = GPUTextureUsage.TEXTURE_BINDING,\r\n    Storage = GPUTextureUsage.STORAGE_BINDING,\r\n    RenderAttachment = GPUTextureUsage.RENDER_ATTACHMENT,\r\n}","export enum TextureViewDimension {\r\n    OneDimension = '1d',\r\n    TwoDimension = '2d',\r\n    TwoDimensionArray = '2d-array',\r\n    Cube = 'cube',\r\n    CubeArray = 'cube-array',\r\n    ThreeDimension = '3d'\r\n}","export enum VertexParameterStepMode {\r\n    Vertex = 'vertex-step',\r\n    Index = 'index-step',\r\n    Instance = 'instance-step',\r\n}","export enum WrappingMode {\r\n    ClampToEdge = 'clamp-to-edge',\r\n    Repeat = 'repeat',\r\n    MirrorRepeat = 'mirror-repeat'\r\n}","import { Dictionary, EnumUtil } from '@kartoffelgames/core';\r\nimport { GpuFeature } from '../../constant/gpu-feature.enum';\r\nimport { GpuLimit } from '../../constant/gpu-limit.enum';\r\n\r\n/**\r\n * Gpu limits and features.\r\n */\r\nexport class GpuDeviceCapabilities {\r\n    private readonly mFeatures: Set<GpuFeature>;\r\n    private readonly mLimits: Dictionary<GpuLimit, number>;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Gpu adapter.\r\n     */\r\n    public constructor(pDevice: GPUDevice) {\r\n        // Convert all gpu features.\r\n        this.mFeatures = new Set<GpuFeature>();\r\n        for (const lFeature of pDevice.features) {\r\n            const lGpuFeature: GpuFeature | undefined = EnumUtil.cast<GpuFeature>(GpuFeature, lFeature);\r\n            if (lGpuFeature) {\r\n                this.mFeatures.add(lGpuFeature);\r\n            }\r\n        }\r\n\r\n        // Convert gpu limits.\r\n        this.mLimits = new Dictionary<GpuLimit, number>();\r\n        for (const lLimitName of EnumUtil.valuesOf<GpuLimit>(GpuLimit)) {\r\n            this.mLimits.set(lLimitName, pDevice.limits[lLimitName] ?? null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get limit value.\r\n     * \r\n     * @param pLimit - Limit name.\r\n     * \r\n     * @returns limitation value. \r\n     */\r\n    public getLimit(pLimit: GpuLimit): number {\r\n        return this.mLimits.get(pLimit)!;\r\n    }\r\n\r\n    /**\r\n     * Check if gpu has the specified feature.\r\n     * \r\n     * @param pFeature - Feature name.\r\n     * \r\n     * @returns true when gpu has the feature. \r\n     */\r\n    public hasFeature(pFeature: GpuFeature): boolean {\r\n        return this.mFeatures.has(pFeature);\r\n    }\r\n}\r\n","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { GpuFeature } from '../../constant/gpu-feature.enum';\r\nimport { TextureAspect } from '../../constant/texture-aspect.enum';\r\nimport { TextureDimension } from '../../constant/texture-dimension.enum';\r\nimport { TextureFormat } from '../../constant/texture-format.enum';\r\nimport { TextureSampleType } from '../../constant/texture-sample-type.enum';\r\nimport { TextureUsage } from '../../constant/texture-usage.enum';\r\nimport { GpuDevice } from '../gpu-device';\r\n\r\nexport class GpuTextureFormatCapabilities {\r\n    private readonly mDevice: GpuDevice;\r\n    private readonly mFormatCapabilitys: Dictionary<TextureFormat, TextureFormatCapabilityDefinition>;\r\n\r\n    /**\r\n     * Get prefered canvas format.\r\n     */\r\n    public get preferredCanvasFormat(): TextureFormat {\r\n        return window.navigator.gpu.getPreferredCanvasFormat() as TextureFormat;\r\n    }\r\n\r\n    /**\r\n     * Constructor. Inits capabilities.\r\n     * \r\n     * @param pDevice - Device.\r\n     */\r\n    public constructor(pDevice: GpuDevice) {\r\n        this.mDevice = pDevice;\r\n\r\n        // Construct sample type for float32 texture types.\r\n        const lFloat32Filterable: Array<TextureSampleType> = [TextureSampleType.UnfilterableFloat];\r\n        if (this.mDevice.capabilities.hasFeature(GpuFeature.Float32Filterable)) {\r\n            lFloat32Filterable.push(TextureSampleType.Float);\r\n        }\r\n\r\n        // Setup any format with its capabilities.\r\n        this.mFormatCapabilitys = new Dictionary<TextureFormat, TextureFormatCapabilityDefinition>();\r\n\r\n        // 8-bit formats\r\n        this.mFormatCapabilitys.set(TextureFormat.R8unorm, {\r\n            format: TextureFormat.R8unorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R8unorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false,\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.R8snorm, {\r\n            format: TextureFormat.R8snorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: false,\r\n                copy: {\r\n                    compatible: [TextureFormat.R8snorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.R8uint, {\r\n            format: TextureFormat.R8uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R8uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.R8sint, {\r\n            format: TextureFormat.R8sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R8sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n\r\n        // 16-bit formats\r\n        this.mFormatCapabilitys.set(TextureFormat.R16uint, {\r\n            format: TextureFormat.R16uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R16uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.R16sint, {\r\n            format: TextureFormat.R16sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R16sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.R16float, {\r\n            format: TextureFormat.R16float,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R16float],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg8unorm, {\r\n            format: TextureFormat.Rg8unorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg8unorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg8snorm, {\r\n            format: TextureFormat.Rg8snorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: false,\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg8snorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg8uint, {\r\n            format: TextureFormat.Rg8uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg8uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg8sint, {\r\n            format: TextureFormat.Rg8sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg8sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n\r\n        // 32-bit formats\r\n        this.mFormatCapabilitys.set(TextureFormat.R32uint, {\r\n            format: TextureFormat.R32uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R32uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: true\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.R32sint, {\r\n            format: TextureFormat.R32sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R32sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: true\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.R32float, {\r\n            format: TextureFormat.R32float,\r\n            aspect: {\r\n                types: [TextureAspect.Red],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: lFloat32Filterable,\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.R32float],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: true\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg16uint, {\r\n            format: TextureFormat.Rg16uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg16uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg16sint, {\r\n            format: TextureFormat.Rg16sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg16sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg16float, {\r\n            format: TextureFormat.Rg16float,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg16float],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba8unorm, {\r\n            format: TextureFormat.Rgba8unorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba8unorm, TextureFormat.Rgba8unormSrgb],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba8unormSrgb, {\r\n            format: TextureFormat.Rgba8unormSrgb,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba8unormSrgb, TextureFormat.Rgba8unorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba8snorm, {\r\n            format: TextureFormat.Rgba8snorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: false,\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba8snorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba8uint, {\r\n            format: TextureFormat.Rgba8uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba8uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba8sint, {\r\n            format: TextureFormat.Rgba8sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba8sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Bgra8unorm, {\r\n            format: TextureFormat.Bgra8unorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Bgra8unorm, TextureFormat.Bgra8unormSrgb],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: pDevice.capabilities.hasFeature(GpuFeature.Bgra8unormStorage),\r\n                    writeonly: false,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Bgra8unormSrgb, {\r\n            format: TextureFormat.Bgra8unormSrgb,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Bgra8unormSrgb, TextureFormat.Bgra8unorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n\r\n        // Packed 32-bit formats\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgb9e5ufloat, {\r\n            format: TextureFormat.Rgb9e5ufloat,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: false,\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgb9e5ufloat],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgb10a2uint, {\r\n            format: TextureFormat.Rgb10a2uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgb10a2uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgb10a2unorm, {\r\n            format: TextureFormat.Rgb10a2unorm,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgb10a2unorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg11b10ufloat, {\r\n            format: TextureFormat.Rg11b10ufloat,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: pDevice.capabilities.hasFeature(GpuFeature.Rg11b10ufloatRenderable) ? {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                } : false,\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg11b10ufloat],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n\r\n        // 64-bit formats\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg32uint, {\r\n            format: TextureFormat.Rg32uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg32uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg32sint, {\r\n            format: TextureFormat.Rg32sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg32sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rg32float, {\r\n            format: TextureFormat.Rg32float,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: lFloat32Filterable,\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rg32float],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba16uint, {\r\n            format: TextureFormat.Rgba16uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba16uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba16sint, {\r\n            format: TextureFormat.Rgba16sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba16sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba16float, {\r\n            format: TextureFormat.Rgba16float,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.Float, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: true,\r\n                    blendable: true,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba16float],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n\r\n        // 128-bit formats\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba32uint, {\r\n            format: TextureFormat.Rgba32uint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba32uint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba32sint, {\r\n            format: TextureFormat.Rgba32sint,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: [TextureSampleType.SignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba32sint],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Rgba32float, {\r\n            format: TextureFormat.Rgba32float,\r\n            aspect: {\r\n                types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension, TextureDimension.ThreeDimension],\r\n            type: lFloat32Filterable,\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: false,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Rgba32float],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: {\r\n                    readonly: true,\r\n                    writeonly: true,\r\n                    readwrite: false\r\n                }\r\n            }\r\n        });\r\n\r\n        // Depth/stencil formats\r\n        this.mFormatCapabilitys.set(TextureFormat.Stencil8, {\r\n            format: TextureFormat.Stencil8,\r\n            aspect: {\r\n                types: [TextureAspect.Stencil],\r\n                byteCost: 1\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n            type: [TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Stencil8],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Depth16unorm, {\r\n            format: TextureFormat.Depth16unorm,\r\n            aspect: {\r\n                types: [TextureAspect.Depth],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n            type: [TextureSampleType.Depth, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Depth16unorm],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: true\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Depth24plus, {\r\n            format: TextureFormat.Depth24plus,\r\n            aspect: {\r\n                types: [TextureAspect.Depth],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n            type: [TextureSampleType.Depth, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Depth24plus],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: false,\r\n                    imageDestination: false\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Depth24plusStencil8, {\r\n            format: TextureFormat.Depth24plusStencil8,\r\n            aspect: {\r\n                types: [TextureAspect.Depth, TextureAspect.Stencil],\r\n                byteCost: 2\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n            type: [TextureSampleType.Depth, TextureSampleType.UnfilterableFloat, TextureSampleType.UnsignedInteger],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Depth24plusStencil8],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: false, // Stencil supports image copy but depth does not.\r\n                    imageDestination: false // Stencil supports image copy but depth does not.\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n        this.mFormatCapabilitys.set(TextureFormat.Depth32float, {\r\n            format: TextureFormat.Depth32float,\r\n            aspect: {\r\n                types: [TextureAspect.Depth],\r\n                byteCost: 4\r\n            },\r\n            dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n            type: [TextureSampleType.Depth, TextureSampleType.UnfilterableFloat],\r\n            compressionBlock: { width: 1, height: 1 },\r\n            usage: {\r\n                textureBinding: true,\r\n                renderAttachment: {\r\n                    resolveTarget: false,\r\n                    blendable: false,\r\n                    multisample: true,\r\n                },\r\n                copy: {\r\n                    compatible: [TextureFormat.Depth32float],\r\n                    textureSource: true,\r\n                    textureDestination: true,\r\n                    imageSource: true,\r\n                    imageDestination: false\r\n                },\r\n                storage: false\r\n            }\r\n        });\r\n\r\n        // \"depth32float-stencil8\" feature\r\n        if (pDevice.capabilities.hasFeature(GpuFeature.Depth32floatStencil8)) {\r\n            this.mFormatCapabilitys.set(TextureFormat.Depth32floatStencil8, {\r\n                format: TextureFormat.Depth32floatStencil8,\r\n                aspect: {\r\n                    types: [TextureAspect.Depth, TextureAspect.Stencil],\r\n                    byteCost: 4\r\n                },\r\n                dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n                type: [TextureSampleType.Depth, TextureSampleType.UnfilterableFloat, TextureSampleType.UnsignedInteger],\r\n                compressionBlock: { width: 1, height: 1 },\r\n                usage: {\r\n                    textureBinding: true,\r\n                    renderAttachment: {\r\n                        resolveTarget: false,\r\n                        blendable: false,\r\n                        multisample: true,\r\n                    },\r\n                    copy: {\r\n                        compatible: [TextureFormat.Depth32floatStencil8],\r\n                        textureSource: true,\r\n                        textureDestination: true,\r\n                        imageSource: true,\r\n                        imageDestination: false\r\n                    },\r\n                    storage: false\r\n                }\r\n            });\r\n        }\r\n\r\n        // BC compressed formats\r\n        if (pDevice.capabilities.hasFeature(GpuFeature.TextureCompressionBc)) {\r\n            const lBcTextureFormatCapability = (pFormat: TextureFormat, pAspects: Array<TextureAspect>, pByteOfAspect: number, pCompatible: Array<TextureFormat>) => {\r\n                const lFormat: TextureFormatCapabilityDefinition = {\r\n                    format: pFormat,\r\n                    aspect: {\r\n                        types: pAspects,\r\n                        byteCost: pByteOfAspect\r\n                    },\r\n                    dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n                    type: [TextureSampleType.UnfilterableFloat, TextureSampleType.Float],\r\n                    compressionBlock: { width: 4, height: 4 },\r\n                    usage: {\r\n                        textureBinding: true,\r\n                        renderAttachment: false,\r\n                        copy: {\r\n                            compatible: [pFormat, ...pCompatible],\r\n                            textureSource: true,\r\n                            textureDestination: true,\r\n                            imageSource: true,\r\n                            imageDestination: true\r\n                        },\r\n                        storage: false\r\n                    }\r\n                };\r\n\r\n                if (pDevice.capabilities.hasFeature(GpuFeature.TextureCompressionBcSliced3d)) {\r\n                    lFormat.dimensions.push(TextureDimension.ThreeDimension);\r\n                }\r\n\r\n                return lFormat;\r\n            };\r\n\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc1RgbaUnorm, lBcTextureFormatCapability(TextureFormat.Bc1RgbaUnorm, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 2, [TextureFormat.Bc1RgbaUnormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc1RgbaUnormSrgb, lBcTextureFormatCapability(TextureFormat.Bc1RgbaUnormSrgb, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 2, [TextureFormat.Bc1RgbaUnorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc2RgbaUnorm, lBcTextureFormatCapability(TextureFormat.Bc2RgbaUnorm, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Bc2RgbaUnormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc2RgbaUnormSrgb, lBcTextureFormatCapability(TextureFormat.Bc2RgbaUnormSrgb, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Bc2RgbaUnorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc3RgbaUnorm, lBcTextureFormatCapability(TextureFormat.Bc3RgbaUnorm, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Bc3RgbaUnormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc3RgbaUnormSrgb, lBcTextureFormatCapability(TextureFormat.Bc3RgbaUnormSrgb, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Bc3RgbaUnorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc4Runorm, lBcTextureFormatCapability(TextureFormat.Bc4Runorm, [TextureAspect.Red], 8, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc4Rsnorm, lBcTextureFormatCapability(TextureFormat.Bc4Rsnorm, [TextureAspect.Red], 8, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc5RgUnorm, lBcTextureFormatCapability(TextureFormat.Bc5RgUnorm, [TextureAspect.Red, TextureAspect.Green], 8, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc5RgSnorm, lBcTextureFormatCapability(TextureFormat.Bc5RgSnorm, [TextureAspect.Red, TextureAspect.Green], 8, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc6hRgbUfloat, lBcTextureFormatCapability(TextureFormat.Bc6hRgbUfloat, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue], 4, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc6hRgbFloat, lBcTextureFormatCapability(TextureFormat.Bc6hRgbFloat, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue], 4, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc7RgbaUnorm, lBcTextureFormatCapability(TextureFormat.Bc7RgbaUnorm, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Bc7RgbaUnormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Bc7RgbaUnormSrgb, lBcTextureFormatCapability(TextureFormat.Bc7RgbaUnormSrgb, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Bc7RgbaUnorm]));\r\n        }\r\n\r\n        // ETC2 compressed formats\r\n        if (pDevice.capabilities.hasFeature(GpuFeature.TextureCompressionEtc2)) {\r\n            const lEtc2TextureFormatCapability = (pFormat: TextureFormat, pAspects: Array<TextureAspect>, pByteOfAspect: number, pCompatible: Array<TextureFormat>) => {\r\n                const lFormat: TextureFormatCapabilityDefinition = {\r\n                    format: pFormat,\r\n                    aspect: {\r\n                        types: pAspects,\r\n                        byteCost: pByteOfAspect\r\n                    },\r\n                    dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n                    type: [TextureSampleType.UnfilterableFloat, TextureSampleType.Float],\r\n                    compressionBlock: { width: 4, height: 4 },\r\n                    usage: {\r\n                        textureBinding: true,\r\n                        renderAttachment: false,\r\n                        copy: {\r\n                            compatible: [pFormat, ...pCompatible],\r\n                            textureSource: true,\r\n                            textureDestination: true,\r\n                            imageSource: true,\r\n                            imageDestination: true\r\n                        },\r\n                        storage: false\r\n                    }\r\n                };\r\n\r\n                return lFormat;\r\n            };\r\n\r\n            this.mFormatCapabilitys.set(TextureFormat.Etc2Rgb8unorm, lEtc2TextureFormatCapability(TextureFormat.Etc2Rgb8unorm, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue], 2, [TextureFormat.Etc2Rgb8unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Etc2Rgb8unormSrgb, lEtc2TextureFormatCapability(TextureFormat.Etc2Rgb8unormSrgb, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue], 2, [TextureFormat.Etc2Rgb8unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Etc2Rgb8a1unorm, lEtc2TextureFormatCapability(TextureFormat.Etc2Rgb8a1unorm, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 2, [TextureFormat.Etc2Rgb8a1unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Etc2Rgb8a1unormSrgb, lEtc2TextureFormatCapability(TextureFormat.Etc2Rgb8a1unormSrgb, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 2, [TextureFormat.Etc2Rgb8a1unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Etc2Rgba8unorm, lEtc2TextureFormatCapability(TextureFormat.Etc2Rgba8unorm, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Etc2Rgba8unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Etc2Rgba8unormSrgb, lEtc2TextureFormatCapability(TextureFormat.Etc2Rgba8unormSrgb, [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha], 4, [TextureFormat.Etc2Rgba8unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.EacR11unorm, lEtc2TextureFormatCapability(TextureFormat.EacR11unorm, [TextureAspect.Red], 8, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.EacR11snorm, lEtc2TextureFormatCapability(TextureFormat.EacR11snorm, [TextureAspect.Red], 8, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.EacRg11unorm, lEtc2TextureFormatCapability(TextureFormat.EacRg11unorm, [TextureAspect.Red, TextureAspect.Green], 8, []));\r\n            this.mFormatCapabilitys.set(TextureFormat.EacRg11snorm, lEtc2TextureFormatCapability(TextureFormat.EacRg11snorm, [TextureAspect.Red, TextureAspect.Green], 8, []));\r\n        }\r\n\r\n        // ASTC compressed formats\r\n        if (pDevice.capabilities.hasFeature(GpuFeature.TextureCompressionAstc)) {\r\n            const lAstcTextureFormatCapability = (pFormat: TextureFormat, pCompressionLevel: [number, number], pCompatible: Array<TextureFormat>) => {\r\n                const lFormat: TextureFormatCapabilityDefinition = {\r\n                    format: pFormat,\r\n                    aspect: {\r\n                        types: [TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha],\r\n                        byteCost: 4\r\n                    },\r\n                    dimensions: [TextureDimension.OneDimension, TextureDimension.TwoDimension],\r\n                    type: [TextureSampleType.UnfilterableFloat, TextureSampleType.Float],\r\n                    compressionBlock: {\r\n                        width: pCompressionLevel[0],\r\n                        height: pCompressionLevel[1]\r\n                    },\r\n                    usage: {\r\n                        textureBinding: true,\r\n                        renderAttachment: false,\r\n                        copy: {\r\n                            compatible: [pFormat, ...pCompatible],\r\n                            textureSource: true,\r\n                            textureDestination: true,\r\n                            imageSource: true,\r\n                            imageDestination: true\r\n                        },\r\n                        storage: false\r\n                    }\r\n                };\r\n\r\n                return lFormat;\r\n            };\r\n\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc4x4unorm, lAstcTextureFormatCapability(TextureFormat.Astc4x4unorm, [4, 4], [TextureFormat.Astc4x4unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc4x4unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc4x4unormSrgb, [4, 4], [TextureFormat.Astc4x4unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc5x4unorm, lAstcTextureFormatCapability(TextureFormat.Astc5x4unorm, [5, 4], [TextureFormat.Astc5x4unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc5x4unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc5x4unormSrgb, [5, 4], [TextureFormat.Astc5x4unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc5x5unorm, lAstcTextureFormatCapability(TextureFormat.Astc5x5unorm, [5, 5], [TextureFormat.Astc5x5unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc5x5unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc5x5unormSrgb, [5, 5], [TextureFormat.Astc5x5unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc6x5unorm, lAstcTextureFormatCapability(TextureFormat.Astc6x5unorm, [6, 5], [TextureFormat.Astc6x5unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc6x5unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc6x5unormSrgb, [6, 5], [TextureFormat.Astc6x5unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc6x6unorm, lAstcTextureFormatCapability(TextureFormat.Astc6x6unorm, [6, 6], [TextureFormat.Astc6x6unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc6x6unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc6x6unormSrgb, [6, 6], [TextureFormat.Astc6x6unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc8x5unorm, lAstcTextureFormatCapability(TextureFormat.Astc8x5unorm, [8, 5], [TextureFormat.Astc8x5unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc8x5unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc8x5unormSrgb, [8, 5], [TextureFormat.Astc8x5unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc8x6unorm, lAstcTextureFormatCapability(TextureFormat.Astc8x6unorm, [8, 6], [TextureFormat.Astc8x6unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc8x6unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc8x6unormSrgb, [8, 6], [TextureFormat.Astc8x6unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc8x8unorm, lAstcTextureFormatCapability(TextureFormat.Astc8x8unorm, [8, 8], [TextureFormat.Astc8x8unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc8x8unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc8x8unormSrgb, [8, 8], [TextureFormat.Astc8x8unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x5unorm, lAstcTextureFormatCapability(TextureFormat.Astc10x5unorm, [10, 5], [TextureFormat.Astc10x5unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x5unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc10x5unormSrgb, [10, 5], [TextureFormat.Astc10x5unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x6unorm, lAstcTextureFormatCapability(TextureFormat.Astc10x6unorm, [10, 6], [TextureFormat.Astc10x6unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x6unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc10x6unormSrgb, [10, 6], [TextureFormat.Astc10x6unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x8unorm, lAstcTextureFormatCapability(TextureFormat.Astc10x8unorm, [10, 8], [TextureFormat.Astc10x8unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x8unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc10x8unormSrgb, [10, 8], [TextureFormat.Astc10x8unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x10unorm, lAstcTextureFormatCapability(TextureFormat.Astc10x10unorm, [10, 10], [TextureFormat.Astc10x10unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc10x10unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc10x10unormSrgb, [10, 10], [TextureFormat.Astc10x10unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc12x10unorm, lAstcTextureFormatCapability(TextureFormat.Astc12x10unorm, [12, 10], [TextureFormat.Astc12x10unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc12x10unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc12x10unormSrgb, [12, 10], [TextureFormat.Astc12x10unorm]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc12x12unorm, lAstcTextureFormatCapability(TextureFormat.Astc12x12unorm, [12, 12], [TextureFormat.Astc12x12unormSrgb]));\r\n            this.mFormatCapabilitys.set(TextureFormat.Astc12x12unormSrgb, lAstcTextureFormatCapability(TextureFormat.Astc12x12unormSrgb, [12, 12], [TextureFormat.Astc12x12unorm]));\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Get all texture format capabilities of format.\r\n     * \r\n     * @param pFormat - Format.\r\n     * \r\n     * @returns capabilities of format. \r\n     */\r\n    public capabilityOf(pFormat: TextureFormat): TextureFormatCapability {\r\n        const lCapabilityDefinition: TextureFormatCapabilityDefinition | undefined = this.mFormatCapabilitys.get(pFormat);\r\n        if (!lCapabilityDefinition) {\r\n            throw new Exception(`Format \"${pFormat}\" has no capabilities.`, this);\r\n        }\r\n\r\n        // Gather all texture usages.\r\n        const lTextureUsages: Set<TextureUsage> = new Set<TextureUsage>();\r\n        if (lCapabilityDefinition.usage.copy) {\r\n            // Can be copied.\r\n            if (lCapabilityDefinition.usage.copy.imageSource || lCapabilityDefinition.usage.copy.textureSource) {\r\n                lTextureUsages.add(TextureUsage.CopySource);\r\n            }\r\n            // Can be copied into.\r\n            if (lCapabilityDefinition.usage.copy.imageDestination || lCapabilityDefinition.usage.copy.textureDestination) {\r\n                lTextureUsages.add(TextureUsage.CopyDestination);\r\n            }\r\n        }\r\n        if (lCapabilityDefinition.usage.textureBinding) {\r\n            lTextureUsages.add(TextureUsage.TextureBinding);\r\n        }\r\n        if (lCapabilityDefinition.usage.storage) {\r\n            lTextureUsages.add(TextureUsage.Storage);\r\n        }\r\n        if (lCapabilityDefinition.usage.renderAttachment) {\r\n            lTextureUsages.add(TextureUsage.RenderAttachment);\r\n        }\r\n\r\n        // All sample types and primary filterable.\r\n        const lSampleTypes: [Set<TextureSampleType>, TextureSampleType] = (() => {\r\n            const lAllSampleTypes: Set<TextureSampleType> = new Set<TextureSampleType>(lCapabilityDefinition.type);\r\n            if (lAllSampleTypes.has(TextureSampleType.Float)) {\r\n                return [lAllSampleTypes, TextureSampleType.Float];\r\n            }\r\n            if (lAllSampleTypes.has(TextureSampleType.UnsignedInteger)) {\r\n                return [lAllSampleTypes, TextureSampleType.UnsignedInteger];\r\n            }\r\n            if (lAllSampleTypes.has(TextureSampleType.SignedInteger)) {\r\n                return [lAllSampleTypes, TextureSampleType.SignedInteger];\r\n            }\r\n            if (lAllSampleTypes.has(TextureSampleType.SignedInteger)) {\r\n                return [lAllSampleTypes, TextureSampleType.SignedInteger];\r\n            }\r\n            if (lAllSampleTypes.has(TextureSampleType.Depth)) {\r\n                return [lAllSampleTypes, TextureSampleType.Depth];\r\n            }\r\n\r\n            // Default\r\n            return [lAllSampleTypes, TextureSampleType.UnfilterableFloat];\r\n        })();\r\n\r\n        return {\r\n            format: lCapabilityDefinition.format,\r\n            copyCompatible: new Set<TextureFormat>((lCapabilityDefinition.usage.copy) ? lCapabilityDefinition.usage.copy.compatible : []),\r\n            textureUsages: lTextureUsages,\r\n            dimensions: new Set<TextureDimension>(lCapabilityDefinition.dimensions),\r\n            aspects: new Set<TextureAspect>(lCapabilityDefinition.aspect.types),\r\n            sampleTypes: {\r\n                primary: lSampleTypes[1],\r\n                all: lSampleTypes[0]\r\n            },\r\n            renderAttachment: {\r\n                resolveTarget: (lCapabilityDefinition.usage.renderAttachment) ? lCapabilityDefinition.usage.renderAttachment.resolveTarget : false,\r\n                multisample: (lCapabilityDefinition.usage.renderAttachment) ? lCapabilityDefinition.usage.renderAttachment.multisample : false,\r\n                blendable: (lCapabilityDefinition.usage.renderAttachment) ? lCapabilityDefinition.usage.renderAttachment.blendable : false,\r\n            },\r\n            storage: {\r\n                readonly: (lCapabilityDefinition.usage.storage) ? lCapabilityDefinition.usage.storage.readonly : false,\r\n                writeonly: (lCapabilityDefinition.usage.storage) ? lCapabilityDefinition.usage.storage.writeonly : false,\r\n                readwrite: (lCapabilityDefinition.usage.storage) ? lCapabilityDefinition.usage.storage.readwrite : false,\r\n            },\r\n            copy: {\r\n                textureSource: (lCapabilityDefinition.usage.copy) ? lCapabilityDefinition.usage.copy.textureSource : false,\r\n                textureTarget: (lCapabilityDefinition.usage.copy) ? lCapabilityDefinition.usage.copy.textureDestination : false,\r\n                imageSource: (lCapabilityDefinition.usage.copy) ? lCapabilityDefinition.usage.copy.imageSource : false,\r\n                imageTarget: (lCapabilityDefinition.usage.copy) ? lCapabilityDefinition.usage.copy.imageDestination : false,\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport type TextureFormatCapability = {\r\n    // Format.\r\n    format: TextureFormat;\r\n\r\n    // Copy compatible array: Same format or srgb-Prefix.\r\n    copyCompatible: Set<TextureFormat>;\r\n\r\n    // Usages.\r\n    textureUsages: Set<TextureUsage>;\r\n\r\n    // Usable dimensions. When multisample is used only 2d is allowed. \r\n    dimensions: Set<TextureDimension>;\r\n\r\n    // All aspects for format.\r\n    aspects: Set<TextureAspect>;\r\n\r\n    // Usable sample types.\r\n    sampleTypes: {\r\n        primary: TextureSampleType,\r\n        all: Set<TextureSampleType>;\r\n    },\r\n\r\n    // Usage as render attachment.\r\n    renderAttachment: {\r\n        resolveTarget: boolean;\r\n        multisample: boolean;\r\n        blendable: boolean;\r\n    };\r\n\r\n    // Usages as storage.\r\n    storage: {\r\n        readonly: boolean;\r\n        writeonly: boolean;\r\n        readwrite: boolean;\r\n    };\r\n\r\n    // Usages as copy target or destination.\r\n    copy: {\r\n        textureSource: boolean;\r\n        textureTarget: boolean;\r\n        imageSource: boolean;\r\n        imageTarget: boolean;\r\n    };\r\n};\r\n\r\ntype TextureFormatCapabilityDefinition = {\r\n    // Format.\r\n    format: TextureFormat;\r\n\r\n    // Compression level. Higher level means higher compression.\r\n    compressionBlock: {\r\n        width: number;\r\n        height: number;\r\n    };\r\n\r\n    // Aspects of texture. Only really relevant for depth and stencil textures.\r\n    aspect: {\r\n        types: Array<TextureAspect>;\r\n        byteCost: number;\r\n    };\r\n\r\n    // Usable dimensions. When multisample is used only 2d is allowed. \r\n    dimensions: Array<TextureDimension>;\r\n\r\n    // Primitive type that can be used in shaders.\r\n    type: Array<TextureSampleType>;\r\n\r\n    // Usages\r\n    usage: {\r\n        // Texture can be bound.\r\n        textureBinding: boolean;\r\n\r\n        // Texture can be renderd into\r\n        renderAttachment: {\r\n            resolveTarget: boolean;\r\n            multisample: boolean;\r\n            blendable: boolean;\r\n        } | false;\r\n\r\n        // Can be used to copy textures.\r\n        copy: {\r\n            // Copy compatible array: Same format or srgb-Prefix.\r\n            compatible: Array<TextureFormat>;\r\n\r\n            // Copy capabilities.\r\n            textureSource: boolean;\r\n            textureDestination: boolean;\r\n            imageSource: boolean;\r\n            imageDestination: boolean;\r\n        } | false;\r\n\r\n        // Can be used as a storage.\r\n        storage: {\r\n            readonly: boolean;\r\n            writeonly: boolean;\r\n            readwrite: boolean;\r\n        } | false;\r\n    };\r\n};","import { Exception, List } from '@kartoffelgames/core';\r\nimport { GpuFeature } from '../constant/gpu-feature.enum';\r\nimport { GpuLimit } from '../constant/gpu-limit.enum';\r\nimport { GpuExecution, GpuExecutionFunction } from '../execution/gpu-execution';\r\nimport { ComputePass, ComputePassExecutionFunction } from '../execution/pass/compute-pass';\r\nimport { RenderPass, RenderPassExecutionFunction } from '../execution/pass/render-pass';\r\nimport { RenderTargets } from '../pipeline/render_targets/render-targets';\r\nimport { Shader } from '../shader/shader';\r\nimport { CanvasTexture } from '../texture/canvas-texture';\r\nimport { GpuDeviceCapabilities } from './capabilities/gpu-device-capabilities';\r\nimport { GpuTextureFormatCapabilities } from './capabilities/gpu-texture-format-capabilities';\r\n\r\nexport class GpuDevice {\r\n    /**\r\n     * Request new gpu device.\r\n     * \r\n     * @param pGenerator - Native object generator.\r\n     */\r\n    public static async request(pPerformance: GPUPowerPreference, pOptions?: GpuDeviceLimitConfiguration): Promise<GpuDevice> {\r\n        // Try to load cached adapter. When not cached, request new one.\r\n        const lAdapter: GPUAdapter | null = await window.navigator.gpu.requestAdapter({ powerPreference: pPerformance });\r\n        if (!lAdapter) {\r\n            throw new Exception('Error requesting GPU adapter', GpuDevice);\r\n        }\r\n\r\n        // Fill in required features and limits.\r\n        const lFeatures: Array<GpuFeature> = new Array<GpuFeature>();\r\n        const lLimits: Record<string, number> = {};\r\n        if (pOptions) {\r\n            // Setup gpu features.\r\n            if (pOptions.features) {\r\n                // Fill in required features.\r\n                for (const lFeature of pOptions.features) {\r\n                    // Exit when required feature is not available.\r\n                    if (!lAdapter.features.has(lFeature.name)) {\r\n                        // Exit when feature was not optional.\r\n                        if (lFeature.required) {\r\n                            throw new Exception(`No Gpu found with the required feature \"${lFeature.name}\"`, this);\r\n                        }\r\n\r\n                        // Skip optional features.\r\n                        continue;\r\n                    }\r\n\r\n                    lFeatures.push(lFeature.name);\r\n                }\r\n            }\r\n\r\n            // Setup gpu limits.\r\n            if (pOptions.limits) {\r\n                // Fill in required features.\r\n                for (const lLimit of pOptions.limits) {\r\n                    // Read available limit.\r\n                    const lAdapterLimit: number | undefined = lAdapter.limits[lLimit.name];\r\n                    if (typeof lAdapterLimit === 'undefined') {\r\n                        throw new Exception(`Gpu does not support any \"${lLimit.name}\" limit.`, this);\r\n                    }\r\n\r\n                    // Check for adapter available limit.\r\n                    let lAvailableLimit: number = lLimit.value;\r\n                    if (lAdapterLimit < lLimit.value) {\r\n                        // Exit when required limit is not available.\r\n                        if (lLimit.required) {\r\n                            throw new Exception(`No Gpu found with the required limit \"${lLimit.name}\" (has: ${lAdapterLimit}, required: ${lLimit.value})`, this);\r\n                        }\r\n\r\n                        // When not required, use the highest available limit.\r\n                        lAvailableLimit = lAdapterLimit;\r\n                    }\r\n\r\n                    lLimits[lLimit.name] = lAvailableLimit;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Try to load cached device. When not cached, request new one.\r\n        const lDevice: GPUDevice | null = await lAdapter.requestDevice({\r\n            requiredFeatures: lFeatures as Array<GPUFeatureName>,\r\n            requiredLimits: lLimits\r\n        });\r\n        if (!lDevice) {\r\n            throw new Exception('Error requesting GPU device', GpuDevice);\r\n        }\r\n\r\n        return new GpuDevice(lDevice);\r\n    }\r\n\r\n    private readonly mCapabilities: GpuDeviceCapabilities;\r\n    private readonly mFormatValidator: GpuTextureFormatCapabilities;\r\n    private readonly mFrameChangeListener: List<GpuDeviceFrameChangeListener>;\r\n    private mFrameCounter: number;\r\n    private readonly mGpuDevice: GPUDevice;\r\n\r\n\r\n    /**\r\n     * Gpu capabilities.\r\n     */\r\n    public get capabilities(): GpuDeviceCapabilities {\r\n        return this.mCapabilities;\r\n    }\r\n\r\n    /**\r\n     * Texture format validator.\r\n     */\r\n    public get formatValidator(): GpuTextureFormatCapabilities {\r\n        return this.mFormatValidator;\r\n    }\r\n\r\n    /**\r\n     * Get frame count.\r\n     */\r\n    public get frameCount(): number {\r\n        return this.mFrameCounter;\r\n    }\r\n\r\n    /**\r\n     * Gpu device.\r\n     */\r\n    public get gpu(): GPUDevice {\r\n        return this.mGpuDevice;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pGenerator - Native GPU-Object Generator.\r\n     */\r\n    private constructor(pDevice: GPUDevice) {\r\n        this.mGpuDevice = pDevice;\r\n\r\n        // Setup capabilities.\r\n        this.mCapabilities = new GpuDeviceCapabilities(pDevice);\r\n\r\n        // Set default for frame counter.\r\n        this.mFrameCounter = 0;\r\n\r\n        // Init form validator.\r\n        this.mFormatValidator = new GpuTextureFormatCapabilities(this);\r\n\r\n        // Frame change listener.\r\n        this.mFrameChangeListener = new List<GpuDeviceFrameChangeListener>();\r\n    }\r\n\r\n    /**\r\n     * Add listener called on frame change.\r\n     * \r\n     * @param pListener - Listener.\r\n     */\r\n    public addFrameChangeListener(pListener: GpuDeviceFrameChangeListener): void {\r\n        this.mFrameChangeListener.push(pListener);\r\n    }\r\n\r\n    /**\r\n     * Create or use a html canvas to create a canvas texture.\r\n     * \r\n     * @param pCanvas - Created canvas element.\r\n     * \r\n     * @returns canvas texture. \r\n     */\r\n    public canvas(pCanvas?: HTMLCanvasElement): CanvasTexture {\r\n        // Create or use canvas.\r\n        const lCanvas: HTMLCanvasElement = pCanvas ?? document.createElement('canvas');\r\n\r\n        return new CanvasTexture(this, lCanvas);\r\n    }\r\n\r\n    /**\r\n     * Create new compute pass.\r\n     *\r\n     * @returns new compute pass. \r\n     */\r\n    public computePass(pExecution: ComputePassExecutionFunction): ComputePass {\r\n        return new ComputePass(this, pExecution);\r\n    }\r\n\r\n    /**\r\n     * Create pass executor.\r\n     * \r\n     * @param pOnExecute - On executor execute.\r\n     */\r\n    public executor(pOnExecute: GpuExecutionFunction): GpuExecution {\r\n        return new GpuExecution(this, pOnExecute);\r\n    }\r\n\r\n    /**\r\n     * Remove listener called on frame change.\r\n     * \r\n     * @param pListener - Listener.\r\n     */\r\n    public removeFrameChangeListener(pListener: GpuDeviceFrameChangeListener): void {\r\n        this.mFrameChangeListener.remove(pListener);\r\n    }\r\n\r\n    /**\r\n     * Create new render pass.\r\n     * \r\n     * @param pRenderTargets - Render targets of pass.\r\n     * @param pStaticBundle - Bundle is static and does not update very often.\r\n     * \r\n     * @returns new render pass. \r\n     */\r\n    public renderPass(pRenderTargets: RenderTargets, pExecution: RenderPassExecutionFunction, pStaticBundle: boolean = true): RenderPass {\r\n        return new RenderPass(this, pRenderTargets, pStaticBundle, pExecution);\r\n    }\r\n\r\n    /**\r\n     * Create render target object.\r\n     * \r\n     * @param pMultisampled - Render targets are multisampled.\r\n     * \r\n     * @returns render target object. \r\n     */\r\n    public renderTargets(pMultisampled: boolean = false): RenderTargets {\r\n        return new RenderTargets(this, pMultisampled);\r\n    }\r\n\r\n    /**\r\n     * Create shader.\r\n     * \r\n     * @param pSource - Shader source as wgsl.\r\n     */\r\n    public shader(pSource: string): Shader {\r\n        return new Shader(this, pSource);\r\n    }\r\n\r\n    /**\r\n     * Start new frame.\r\n     */\r\n    public startNewFrame(): void {\r\n        this.mFrameCounter++;\r\n\r\n        // Call all frame change listener.\r\n        for (const lListener of this.mFrameChangeListener) {\r\n            lListener();\r\n        }\r\n    }\r\n}\r\n\r\nexport type GpuDeviceFrameChangeListener = () => void;\r\n\r\ntype GpuDeviceLimitConfiguration = {\r\n    features?: Array<{\r\n        name: GpuFeature,\r\n        required?: boolean;\r\n    }>;\r\n    limits?: Array<{\r\n        name: GpuLimit,\r\n        value: number,\r\n        required?: boolean;\r\n    }>;\r\n};","import { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject } from '../gpu_object/gpu-object';\r\n\r\n/**\r\n * Bundles execute calls to execute them bunched.\r\n */\r\nexport class GpuExecution extends GpuObject {\r\n    private readonly mExecutionFunction: GpuExecutionFunction;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference. \r\n     * @param pExecution - Main execution function.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pExecution: GpuExecutionFunction) {\r\n        super(pDevice);\r\n\r\n        this.mExecutionFunction = pExecution;\r\n    }\r\n\r\n    /**\r\n     * Execute with context.\r\n     */\r\n    public execute(): void {\r\n        // Create command encoder.\r\n        const lCommandEncoder: GPUCommandEncoder = this.device.gpu.createCommandEncoder({\r\n            label: 'Execution'\r\n        });\r\n\r\n        // Call execution with encoder context.\r\n        this.mExecutionFunction({\r\n            commandEncoder: lCommandEncoder\r\n        });\r\n\r\n        // Submit commands to queue and clear command encoder.\r\n        this.device.gpu.queue.submit([lCommandEncoder.finish()]);\r\n    }\r\n}\r\n\r\nexport type GpuExecutionFunction = (pContext: GpuExecutionContext) => void;\r\n\r\nexport type GpuExecutionContext = {\r\n    commandEncoder: GPUCommandEncoder;\r\n};","import { Exception } from '@kartoffelgames/core';\r\nimport { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { BufferUsage } from '../../constant/buffer-usage.enum';\r\nimport { ComputePipeline } from '../../pipeline/compute-pipeline';\r\nimport { PipelineData, PipelineDataGroup } from '../../pipeline/pipeline_data/pipeline-data';\r\n\r\n/**\r\n * Context for a compute pass.\r\n * Used to execute compute calles.\r\n */\r\nexport class ComputePassContext {\r\n    private readonly mComputeResourceBuffer: ComputePassPassContextRenderBuffer;\r\n    private readonly mEncoder: GPUComputePassEncoder;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pEncoder - Encoder.\r\n     */\r\n    public constructor(pEncoder: GPUComputePassEncoder) {\r\n        this.mEncoder = pEncoder;\r\n\r\n        this.mComputeResourceBuffer = {\r\n            pipeline: null,\r\n            pipelineDataGroupList: new Array<PipelineDataGroup>(),\r\n            highestBindGroupListIndex: -1\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Compute direct with set parameter.\r\n     * \r\n     * @param pPipeline - Pipeline.\r\n     * @param pPipelineData - Pipline bind data groups.\r\n     * @param pX - Workgroup x dimension.\r\n     * @param pY - Workgroup y dimension.\r\n     * @param pZ - Workgroup z dimension.\r\n     */\r\n    public computeDirect(pPipeline: ComputePipeline, pPipelineData: PipelineData, pX: number = 1, pY: number = 1, pZ: number = 1): void {\r\n        // Validate pipeline data matches pipeline layout of pipeline.\r\n        if (pPipeline.layout !== pPipelineData.layout) {\r\n            throw new Exception('Pipline data not valid for set pipeline.', this);\r\n        }\r\n\r\n        // Execute compute.\r\n        if (this.setupEncoderData(pPipeline, pPipelineData)) {\r\n            this.mEncoder.dispatchWorkgroups(pX, pY, pZ);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute indirect with parameters set in buffer.\r\n     * \r\n     * @param pPipeline - Pipeline.\r\n     * @param pPipelineData - Pipline bind data groups.\r\n     * @param pIndirectBuffer - Buffer with indirect parameter data.\r\n     */\r\n    public computeIndirect(pPipeline: ComputePipeline, pPipelineData: PipelineData, pIndirectBuffer: GpuBuffer): void {\r\n        // Validate pipeline data matches pipeline layout of pipeline.\r\n        if (pPipeline.layout !== pPipelineData.layout) {\r\n            throw new Exception('Pipline data not valid for set pipeline.', this);\r\n        }\r\n\r\n        // Extend usage.\r\n        pIndirectBuffer.extendUsage(BufferUsage.Indirect);\r\n\r\n        // Execute compute.\r\n        if (this.setupEncoderData(pPipeline, pPipelineData)) {\r\n            // Validate buffer length\r\n            // 4 Byte * 3 => 12 Byte => Indexed draw \r\n            if (pIndirectBuffer.size === 20) {\r\n                // Start indirect call.\r\n                this.mEncoder.dispatchWorkgroupsIndirect(pIndirectBuffer.native, 0);\r\n            } else {\r\n                throw new Exception('Indirect compute calls can only be done with 20 or 16 byte long buffers', this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set pipeline and any bind data.\r\n     * \r\n     * @param pPipeline - Pipeline.\r\n     * @param pPipelineData - Pipeline binding data.\r\n     * \r\n     * @returns true when everything has been successfully set. \r\n     */\r\n    public setupEncoderData(pPipeline: ComputePipeline, pPipelineData: PipelineData): boolean {\r\n        // Skip pipelines that are currently loading.\r\n        const lNativePipeline: GPUComputePipeline | null = pPipeline.native;\r\n        if (lNativePipeline === null) {\r\n            return false;\r\n        }\r\n\r\n        // Cache for bind group length of this instruction.\r\n        let lLocalHighestBindGroupListIndex: number = -1;\r\n\r\n        // Add bind groups.\r\n        const lPipelineDataGroupList: Array<PipelineDataGroup> = pPipelineData.data;\r\n        for (let lBindGroupIndex: number = 0; lBindGroupIndex < lPipelineDataGroupList.length; lBindGroupIndex++) {\r\n            const lPipelineDataGroup: PipelineDataGroup | undefined = lPipelineDataGroupList[lBindGroupIndex];\r\n            const lCurrentPipelineDataGroup: PipelineDataGroup | null = this.mComputeResourceBuffer.pipelineDataGroupList[lBindGroupIndex];\r\n\r\n            // Extend group list length.\r\n            if (lBindGroupIndex > lLocalHighestBindGroupListIndex) {\r\n                lLocalHighestBindGroupListIndex = lBindGroupIndex;\r\n            }\r\n\r\n            // Use cached bind group or use new. Catches null bindings.\r\n            if (!lCurrentPipelineDataGroup || lPipelineDataGroup.bindGroup !== lCurrentPipelineDataGroup.bindGroup || lPipelineDataGroup.offsetId !== lCurrentPipelineDataGroup.offsetId) {\r\n                // Set bind group buffer to cache current set bind groups.\r\n                this.mComputeResourceBuffer.pipelineDataGroupList[lBindGroupIndex] = lPipelineDataGroup;\r\n\r\n                // Set bind group to gpu.\r\n                if (lPipelineDataGroup.bindGroup.layout.hasDynamicOffset) {\r\n                    this.mEncoder.setBindGroup(lBindGroupIndex, lPipelineDataGroup.bindGroup.native, lPipelineDataGroup.offsets);\r\n                } else {\r\n                    this.mEncoder.setBindGroup(lBindGroupIndex, lPipelineDataGroup.bindGroup.native);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Use cached pipeline or use new.\r\n        if (pPipeline !== this.mComputeResourceBuffer.pipeline) {\r\n            this.mComputeResourceBuffer.pipeline = pPipeline;\r\n\r\n            // Generate and set new pipeline.\r\n            this.mEncoder.setPipeline(lNativePipeline);\r\n\r\n            // Only clear bind buffer when a new pipeline is set.\r\n            // Same pipelines must have set the same bind group layouts.\r\n            if (this.mComputeResourceBuffer.highestBindGroupListIndex > lLocalHighestBindGroupListIndex) {\r\n                for (let lBindGroupIndex: number = (lLocalHighestBindGroupListIndex + 1); lBindGroupIndex < (this.mComputeResourceBuffer.highestBindGroupListIndex + 1); lBindGroupIndex++) {\r\n                    this.mEncoder.setBindGroup(lBindGroupIndex, null);\r\n                }\r\n            }\r\n\r\n            // Update global bind group list length.\r\n            this.mComputeResourceBuffer.highestBindGroupListIndex = lLocalHighestBindGroupListIndex;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ntype ComputePassPassContextRenderBuffer = {\r\n    pipeline: ComputePipeline | null;\r\n\r\n    pipelineDataGroupList: Array<PipelineDataGroup>;\r\n    highestBindGroupListIndex: number;\r\n};","import { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { BufferUsage } from '../../constant/buffer-usage.enum';\r\nimport { GpuFeature } from '../../constant/gpu-feature.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject } from '../../gpu_object/gpu-object';\r\nimport { GpuExecutionContext } from '../gpu-execution';\r\nimport { ComputePassContext } from './compute-pass-context';\r\n\r\n/**\r\n * Gpu compute pass.\r\n */\r\nexport class ComputePass extends GpuObject {\r\n    private readonly mExecutionFunction: ComputePassExecutionFunction;\r\n    private readonly mQueries: ComputePassQuery;\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Device reference.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pExecution: ComputePassExecutionFunction) {\r\n        super(pDevice);\r\n\r\n        this.mExecutionFunction = pExecution;\r\n        this.mQueries = {};\r\n    }\r\n\r\n    /**\r\n     * Execute steps in a row.\r\n     * @param pExecutionContext - Executor context.\r\n     */\r\n    public execute(pExecutionContext: GpuExecutionContext): void {\r\n        // Read render pass descriptor and inject timestamp query when it is setup.\r\n        const lComputePassDescriptor: GPUComputePassDescriptor = {};\r\n        if (this.mQueries.timestamp) {\r\n            lComputePassDescriptor.timestampWrites = this.mQueries.timestamp.query;\r\n        }\r\n\r\n        // Pass descriptor is set, when the pipeline ist set.\r\n        const lComputePassEncoder: GPUComputePassEncoder = pExecutionContext.commandEncoder.beginComputePass(lComputePassDescriptor);\r\n\r\n        // Direct execute function.\r\n        this.mExecutionFunction(new ComputePassContext(lComputePassEncoder));\r\n\r\n        // End compute pass.\r\n        lComputePassEncoder.end();\r\n\r\n        // Resolve query.\r\n        if (this.mQueries.timestamp) {\r\n            pExecutionContext.commandEncoder.resolveQuerySet(this.mQueries.timestamp.query.querySet, 0, 2, this.mQueries.timestamp.buffer.native, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Probe timestamp data from render pass.\r\n     * Resolves into two big ints with start and end time in nanoseconds.\r\n     * \r\n     * @returns Promise that resolves with the latest timestamp data.\r\n     */\r\n    public async probeTimestamp(): Promise<[bigint, bigint]> {\r\n        // Skip when not enabled.\r\n        if (!this.device.capabilities.hasFeature(GpuFeature.TimestampQuery)) {\r\n            return [0n, 0n];\r\n        }\r\n\r\n        // Init timestamp query when not already set.\r\n        if (!this.mQueries.timestamp) {\r\n            // Create timestamp query.\r\n            const lTimestampQuerySet: GPUQuerySet = this.device.gpu.createQuerySet({\r\n                type: 'timestamp',\r\n                count: 2\r\n            });\r\n\r\n            // Create timestamp buffer.\r\n            const lTimestampBuffer: GpuBuffer = new GpuBuffer(this.device, 16);\r\n            lTimestampBuffer.extendUsage(GPUBufferUsage.QUERY_RESOLVE);\r\n            lTimestampBuffer.extendUsage(BufferUsage.CopySource);\r\n\r\n            // Create query.\r\n            this.mQueries.timestamp = {\r\n                query: {\r\n                    querySet: lTimestampQuerySet,\r\n                    beginningOfPassWriteIndex: 0,\r\n                    endOfPassWriteIndex: 1\r\n                },\r\n                buffer: lTimestampBuffer,\r\n                resolver: null\r\n            };\r\n        }\r\n\r\n        // Use existing resolver.\r\n        if (this.mQueries.timestamp.resolver) {\r\n            return this.mQueries.timestamp.resolver;\r\n        }\r\n\r\n        this.mQueries.timestamp.resolver = this.mQueries.timestamp.buffer.read(0, 16).then((pData: ArrayBuffer) => {\r\n            // Reset resolver.\r\n            this.mQueries.timestamp!.resolver = null;\r\n\r\n            // Read and resolve timestamp data.\r\n            const lTimedata: BigUint64Array = new BigUint64Array(pData);\r\n            return [lTimedata[0], lTimedata[1]];\r\n        });\r\n\r\n        return this.mQueries.timestamp.resolver;\r\n    }\r\n}\r\n\r\nexport type ComputePassExecutionFunction = (pContext: ComputePassContext) => void;\r\n\r\ntype ComputePassQuery = {\r\n    timestamp?: {\r\n        query: GPURenderPassTimestampWrites;\r\n        buffer: GpuBuffer;\r\n        resolver: null | Promise<[bigint, bigint]>;\r\n    };\r\n};","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { BufferUsage } from '../../constant/buffer-usage.enum';\r\nimport { PipelineData, PipelineDataGroup } from '../../pipeline/pipeline_data/pipeline-data';\r\nimport { RenderTargets } from '../../pipeline/render_targets/render-targets';\r\nimport { VertexFragmentPipeline } from '../../pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline';\r\nimport { VertexParameter } from '../../pipeline/vertex_parameter/vertex-parameter';\r\n\r\n/**\r\n * Context for a render pass.\r\n * Used to execute draw calles.\r\n */\r\nexport class RenderPassContext {\r\n    private readonly mEncoder: GPURenderPassEncoder | GPURenderBundleEncoder;\r\n    private readonly mRecordResources: boolean;\r\n    private readonly mRenderResourceBuffer: RenderPassContextRenderBuffer;\r\n    private readonly mRenderTargets: RenderTargets;\r\n    private readonly mUsedResources: RenderPassContextUsedResource;\r\n\r\n    /**\r\n     * Used resource.\r\n     * Only filled when recording is enabled. \r\n     */\r\n    public get usedResources(): RenderPassContextUsedResource {\r\n        return this.mUsedResources;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pEncoder - Encoder.\r\n     * @param pRenderTargets - Render targets.\r\n     * @param pRecordResources - Records used resources on render. \r\n     */\r\n    public constructor(pEncoder: GPURenderPassEncoder | GPURenderBundleEncoder, pRenderTargets: RenderTargets, pRecordResources: boolean) {\r\n        this.mEncoder = pEncoder;\r\n        this.mRenderTargets = pRenderTargets;\r\n        this.mRecordResources = pRecordResources;\r\n        this.mUsedResources = {\r\n            parameter: new Set<VertexParameter>(),\r\n            indirectBuffer: new Set<GpuBuffer>(),\r\n            pipelines: new Set<VertexFragmentPipeline>(),\r\n            pipelineData: new Set<PipelineData>()\r\n        };\r\n        this.mRenderResourceBuffer = {\r\n            pipeline: null,\r\n            vertexBuffer: new Dictionary<number, GpuBuffer>(),\r\n            highestVertexParameterIndex: -1,\r\n            pipelineDataGroupList: new Array<PipelineDataGroup>(),\r\n            highestBindGroupListIndex: -1\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Draw direct with set parameter.\r\n     * \r\n     * @param pPipeline - Pipeline.\r\n     * @param pParameter - Vertex parameter.\r\n     * @param pPipelineData - Pipline bind data groups.\r\n     * @param pInstanceCount - Instance count.\r\n     * @param pInstanceOffset - Instance offset. \r\n     */\r\n    public drawDirect(pPipeline: VertexFragmentPipeline, pParameter: VertexParameter, pPipelineData: PipelineData, pInstanceCount: number = 1, pInstanceOffset: number = 0): void {\r\n        // Validate same render targets.\r\n        if (this.mRenderTargets !== pPipeline.renderTargets) {\r\n            throw new Exception('Pipelines render targets not valid for this render pass.', this);\r\n        }\r\n\r\n        // Validate parameter.\r\n        if (pParameter.layout !== pPipeline.module.vertexParameter) {\r\n            throw new Exception('Vertex parameter not valid for set pipeline.', this);\r\n        }\r\n\r\n        // Validate pipeline data matches pipeline layout of pipeline.\r\n        if (pPipeline.layout !== pPipelineData.layout) {\r\n            throw new Exception('Pipline data not valid for set pipeline.', this);\r\n        }\r\n\r\n        // Record resource when config is set.\r\n        if (this.mRecordResources) {\r\n            // Pipelines.\r\n            if (!this.mUsedResources.pipelines.has(pPipeline)) {\r\n                this.mUsedResources.pipelines.add(pPipeline);\r\n            }\r\n\r\n            // Parameter\r\n            if (!this.mUsedResources.parameter.has(pParameter)) {\r\n                this.mUsedResources.parameter.add(pParameter);\r\n            }\r\n\r\n            // Pipeline data.\r\n            if (!this.mUsedResources.pipelineData.has(pPipelineData)) {\r\n                this.mUsedResources.pipelineData.add(pPipelineData);\r\n            }\r\n        }\r\n\r\n        // Execute draw.\r\n        if (this.setupEncoderData(pPipeline, pParameter, pPipelineData)) {\r\n            this.executeDirectDraw(pParameter, pInstanceCount, pInstanceOffset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw indirect with parameters set in buffer.\r\n     * \r\n     * @param pPipeline - Pipeline.\r\n     * @param pParameter - Vertex parameter.\r\n     * @param pPipelineData - Pipline bind data groups.\r\n     * @param pIndirectBuffer - Buffer with indirect parameter data.\r\n     */\r\n    public drawIndirect(pPipeline: VertexFragmentPipeline, pParameter: VertexParameter, pPipelineData: PipelineData, pIndirectBuffer: GpuBuffer): void {\r\n        // Extend usage.\r\n        pIndirectBuffer.extendUsage(BufferUsage.Indirect);\r\n\r\n        // Validate same render targets.\r\n        if (this.mRenderTargets !== pPipeline.renderTargets) {\r\n            throw new Exception('Pipelines render targets not valid for this render pass.', this);\r\n        }\r\n\r\n        // Validate parameter.\r\n        if (pParameter.layout !== pPipeline.module.vertexParameter) {\r\n            throw new Exception('Vertex parameter not valid for set pipeline.', this);\r\n        }\r\n\r\n        // Validate pipeline data matches pipeline layout of pipeline.\r\n        if (pPipeline.layout !== pPipelineData.layout) {\r\n            throw new Exception('Pipline data not valid for set pipeline.', this);\r\n        }\r\n\r\n        // Record resource when config is set.\r\n        if (this.mRecordResources) {\r\n            // Pipelines.\r\n            if (!this.mUsedResources.pipelines.has(pPipeline)) {\r\n                this.mUsedResources.pipelines.add(pPipeline);\r\n            }\r\n\r\n            // Parameter\r\n            if (!this.mUsedResources.parameter.has(pParameter)) {\r\n                this.mUsedResources.parameter.add(pParameter);\r\n            }\r\n\r\n            // Pipeline data.\r\n            if (!this.mUsedResources.pipelineData.has(pPipelineData)) {\r\n                this.mUsedResources.pipelineData.add(pPipelineData);\r\n            }\r\n        }\r\n\r\n        // Execute draw.\r\n        if (this.setupEncoderData(pPipeline, pParameter, pPipelineData)) {\r\n            this.executeIndirectDraw(pParameter, pIndirectBuffer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set pipeline and any bind and vertex data.\r\n     * \r\n     * @param pPipeline - Pipeline.\r\n     * @param pParameter  - Pipeline vertex parameter.\r\n     * @param pPipelineData - Pipeline binding data.\r\n     * \r\n     * @returns true when everything has been successfully set. \r\n     */\r\n    public setupEncoderData(pPipeline: VertexFragmentPipeline, pParameter: VertexParameter, pPipelineData: PipelineData): boolean {\r\n        // Skip pipelines that are currently loading.\r\n        const lNativePipeline: GPURenderPipeline | null = pPipeline.native;\r\n        if (lNativePipeline === null) {\r\n            return false;\r\n        }\r\n\r\n        // Cache for bind group length of this instruction.\r\n        let lLocalHighestBindGroupListIndex: number = -1;\r\n\r\n        // Add bind groups.\r\n        const lPipelineDataGroupList: Array<PipelineDataGroup> = pPipelineData.data;\r\n        for (let lBindGroupIndex: number = 0; lBindGroupIndex < lPipelineDataGroupList.length; lBindGroupIndex++) {\r\n            const lPipelineDataGroup: PipelineDataGroup | undefined = lPipelineDataGroupList[lBindGroupIndex];\r\n            const lCurrentPipelineDataGroup: PipelineDataGroup | null = this.mRenderResourceBuffer.pipelineDataGroupList[lBindGroupIndex];\r\n\r\n            // Extend group list length.\r\n            if (lBindGroupIndex > lLocalHighestBindGroupListIndex) {\r\n                lLocalHighestBindGroupListIndex = lBindGroupIndex;\r\n            }\r\n\r\n            // Use cached bind group or use new.\r\n            if (!lCurrentPipelineDataGroup || lPipelineDataGroup.bindGroup !== lCurrentPipelineDataGroup.bindGroup || lPipelineDataGroup.offsetId !== lCurrentPipelineDataGroup.offsetId) {\r\n                // Set bind group buffer to cache current set bind groups.\r\n                this.mRenderResourceBuffer.pipelineDataGroupList[lBindGroupIndex] = lPipelineDataGroup;\r\n\r\n                // Set bind group to gpu.\r\n                if (lPipelineDataGroup.bindGroup.layout.hasDynamicOffset) {\r\n                    this.mEncoder.setBindGroup(lBindGroupIndex, lPipelineDataGroup.bindGroup.native, lPipelineDataGroup.offsets);\r\n                } else {\r\n                    this.mEncoder.setBindGroup(lBindGroupIndex, lPipelineDataGroup.bindGroup.native);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Cache for bind group length of this instruction.\r\n        let lLocalHighestVertexParameterListIndex: number = -1;\r\n\r\n        // Add vertex attribute buffer.\r\n        const lBufferNames: Array<string> = pPipeline.module.vertexParameter.bufferNames;\r\n        for (let lBufferIndex: number = 0; lBufferIndex < lBufferNames.length; lBufferIndex++) {\r\n            // Read buffer information.\r\n            const lAttributeBufferName: string = lBufferNames[lBufferIndex];\r\n            const lNewAttributeBuffer: GpuBuffer = pParameter.get(lAttributeBufferName);\r\n\r\n            // Extend group list length.\r\n            if (lBufferIndex > lLocalHighestVertexParameterListIndex) {\r\n                lLocalHighestVertexParameterListIndex = lBufferIndex;\r\n            }\r\n\r\n            // Use cached vertex buffer or use new.\r\n            if (lNewAttributeBuffer !== this.mRenderResourceBuffer.vertexBuffer.get(lBufferIndex)) {\r\n                this.mRenderResourceBuffer.vertexBuffer.set(lBufferIndex, lNewAttributeBuffer);\r\n                this.mEncoder.setVertexBuffer(lBufferIndex, lNewAttributeBuffer.native);\r\n            }\r\n        }\r\n\r\n        // Use cached pipeline or use new.\r\n        if (pPipeline !== this.mRenderResourceBuffer.pipeline) {\r\n            this.mRenderResourceBuffer.pipeline = pPipeline;\r\n\r\n            // Generate and set new pipeline.\r\n            this.mEncoder.setPipeline(lNativePipeline);\r\n\r\n            // Only clear bind buffer when a new pipeline is set.\r\n            // Same pipelines must have set the same bind group layouts.\r\n            if (this.mRenderResourceBuffer.highestBindGroupListIndex > lLocalHighestBindGroupListIndex) {\r\n                for (let lBindGroupIndex: number = (lLocalHighestBindGroupListIndex + 1); lBindGroupIndex < (this.mRenderResourceBuffer.highestBindGroupListIndex + 1); lBindGroupIndex++) {\r\n                    this.mEncoder.setBindGroup(lBindGroupIndex, null);\r\n                }\r\n            }\r\n\r\n            // Update global bind group list length.\r\n            this.mRenderResourceBuffer.highestBindGroupListIndex = lLocalHighestBindGroupListIndex;\r\n\r\n            // Only clear vertex buffer when a new pipeline is set.\r\n            // Same pipeline must have the same vertex parameter layout.\r\n            if (this.mRenderResourceBuffer.highestVertexParameterIndex > lLocalHighestVertexParameterListIndex) {\r\n                for (let lVertexParameterBufferIndex: number = (lLocalHighestVertexParameterListIndex + 1); lVertexParameterBufferIndex < (this.mRenderResourceBuffer.highestVertexParameterIndex + 1); lVertexParameterBufferIndex++) {\r\n                    this.mEncoder.setVertexBuffer(lVertexParameterBufferIndex, null);\r\n                }\r\n            }\r\n\r\n            // Update global bind group list length.\r\n            this.mRenderResourceBuffer.highestVertexParameterIndex = lLocalHighestVertexParameterListIndex;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Execute direct draw call.\r\n     * \r\n     * @param pParameter - Vertex parameter.\r\n     * @param pInstanceCount - Index count.\r\n     * @param pInstanceOffset - Instance offset. \r\n     */\r\n    private executeDirectDraw(pParameter: VertexParameter, pInstanceCount: number, pInstanceOffset: number): void {\r\n        // Draw indexed when parameters are indexable.\r\n        if (pParameter.layout.indexable) {\r\n            // Set indexbuffer. Dynamicly switch between 32 and 16 bit based on length.\r\n            if (pParameter.indexBuffer!.format === Uint16Array) {\r\n                this.mEncoder.setIndexBuffer(pParameter.indexBuffer!.buffer.native, 'uint16');\r\n            } else {\r\n                this.mEncoder.setIndexBuffer(pParameter.indexBuffer!.buffer.native, 'uint32');\r\n            }\r\n\r\n            // Create draw call.\r\n            this.mEncoder.drawIndexed(pParameter.indexBuffer!.length, pInstanceCount, 0, 0, pInstanceOffset);\r\n        } else {\r\n            // Create draw call.\r\n            this.mEncoder.draw(pParameter.vertexCount, pInstanceCount, 0, pInstanceOffset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a indirect draw call.\r\n     * If indexed or normal indirect calls are used is defined by the buffer length.\r\n     * \r\n     * @param pParameter - Vertex parameter.\r\n     * @param pBuffer - Indirect buffer.\r\n     */\r\n    private executeIndirectDraw(pParameter: VertexParameter, pBuffer: GpuBuffer): void {\r\n        // 4 Byte * 5 => 20 Byte => Indexed draw \r\n        // 4 Byte * 4 => 16 Byte => Normal draw \r\n        if (pBuffer.size === 20) {\r\n            // Buffer does not match when parameters are not indexable.\r\n            if (!pParameter.layout.indexable) {\r\n                throw new Exception('Indirect indexed draw call failed, because parameter are not indexable', this);\r\n            }\r\n\r\n            // Set indexbuffer. Dynamicly switch between 32 and 16 bit based on length.\r\n            if (pParameter.indexBuffer!.format === Uint16Array) {\r\n                this.mEncoder.setIndexBuffer(pParameter.indexBuffer!.buffer.native, 'uint16');\r\n            } else {\r\n                this.mEncoder.setIndexBuffer(pParameter.indexBuffer!.buffer.native, 'uint32');\r\n            }\r\n\r\n            // Start indirect indexed call.\r\n            this.mEncoder.drawIndexedIndirect(pBuffer.native, 0);\r\n        } else if (pBuffer.size === 16) {\r\n            // Start indirect call.\r\n            this.mEncoder.drawIndirect(pBuffer.native, 0);\r\n        } else {\r\n            throw new Exception('Indirect draw calls can only be done with 20 or 16 byte long buffers', this);\r\n        }\r\n    }\r\n}\r\ntype RenderPassContextUsedResource = {\r\n    readonly parameter: Set<VertexParameter>;\r\n    readonly indirectBuffer: Set<GpuBuffer>;\r\n    readonly pipelines: Set<VertexFragmentPipeline>;\r\n    readonly pipelineData: Set<PipelineData>;\r\n};\r\n\r\ntype RenderPassContextRenderBuffer = {\r\n    pipeline: VertexFragmentPipeline | null;\r\n\r\n    // Vertex buffer.\r\n    vertexBuffer: Dictionary<number, GpuBuffer>;\r\n    highestVertexParameterIndex: number;\r\n\r\n    pipelineDataGroupList: Array<PipelineDataGroup>;\r\n    highestBindGroupListIndex: number;\r\n};","import { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { BufferUsage } from '../../constant/buffer-usage.enum';\r\nimport { GpuFeature } from '../../constant/gpu-feature.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject } from '../../gpu_object/gpu-object';\r\nimport { GpuResourceObjectInvalidationType } from '../../gpu_object/gpu-resource-object';\r\nimport { PipelineData, PipelineDataInvalidationType } from '../../pipeline/pipeline_data/pipeline-data';\r\nimport { RenderTargets } from '../../pipeline/render_targets/render-targets';\r\nimport { VertexFragmentPipeline, VertexFragmentPipelineInvalidationType } from '../../pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline';\r\nimport { VertexParameter, VertexParameterInvalidationType } from '../../pipeline/vertex_parameter/vertex-parameter';\r\nimport { GpuExecutionContext } from '../gpu-execution';\r\nimport { RenderPassContext } from './render-pass-context';\r\n\r\n/**\r\n * Gpu render pass. Has the ability to bundle render calls for static lists.\r\n */\r\nexport class RenderPass extends GpuObject {\r\n    private readonly mBundleConfig: RenderBundleConfig;\r\n    private readonly mExecutionFunction: RenderPassExecutionFunction;\r\n    private readonly mQueries: RenderPassQuery;\r\n    private readonly mRenderTargets: RenderTargets;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pRenderTargets - Render targets.\r\n     * @param pStaticBundle - Bundle is static and does not update very often.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pRenderTargets: RenderTargets, pStaticBundle: boolean, pExecution: RenderPassExecutionFunction) {\r\n        super(pDevice);\r\n\r\n        // Set config.\r\n        this.mExecutionFunction = pExecution;\r\n        this.mQueries = {};\r\n        this.mRenderTargets = pRenderTargets;\r\n        this.mBundleConfig = {\r\n            enabled: pStaticBundle,\r\n            bundle: null,\r\n            descriptor: null,\r\n            usedResources: {\r\n                parameter: new Set<VertexParameter>(),\r\n                indirectBuffer: new Set<GpuBuffer>(),\r\n                pipelines: new Set<VertexFragmentPipeline>(),\r\n                pipelineData: new Set<PipelineData>(),\r\n            },\r\n            resourceInvalidator: () => {\r\n                // Only invalidate bundle on resource changes.\r\n                this.mBundleConfig.bundle = null;\r\n            }\r\n        };\r\n\r\n        // RenderTargets cant change texture formats, so the bundle descriptor does not need to be rebuild.\r\n        // When textures are resized, the new render descriptor with updated views gets applied automaticly on execute.\r\n    }\r\n\r\n    /**\r\n     * Execute steps in a row.\r\n     * \r\n     * @param pExecutor - Executor context.\r\n     */\r\n    public execute(pExecutionContext: GpuExecutionContext): void {\r\n        // Read render pass descriptor and inject timestamp query when it is setup.\r\n        const lRenderPassDescriptor: GPURenderPassDescriptor = this.mRenderTargets.native;\r\n        if (this.mQueries.timestamp) {\r\n            lRenderPassDescriptor.timestampWrites = this.mQueries.timestamp.query;\r\n        }\r\n\r\n        // Pass descriptor is set, when the pipeline is set.\r\n        const lRenderPassEncoder: GPURenderPassEncoder = pExecutionContext.commandEncoder.beginRenderPass(lRenderPassDescriptor);\r\n\r\n        // Execute cached or execute direct based on static or variable bundles.\r\n        if (this.mBundleConfig.enabled) {\r\n            this.cachedExecute(lRenderPassEncoder);\r\n        } else {\r\n            // Directly execute nothing gets cached.\r\n            this.mExecutionFunction(new RenderPassContext(lRenderPassEncoder, this.mRenderTargets, false));\r\n        }\r\n\r\n        // End render queue.\r\n        lRenderPassEncoder.end();\r\n\r\n        // Resolve query.\r\n        if (this.mQueries.timestamp) {\r\n            pExecutionContext.commandEncoder.resolveQuerySet(this.mQueries.timestamp.query.querySet, 0, 2, this.mQueries.timestamp.buffer.native, 0);\r\n        }\r\n\r\n        // Execute optional resolve targets.\r\n        this.resolveCanvasTargets(pExecutionContext);\r\n    }\r\n\r\n    /**\r\n     * Probe timestamp data from render pass.\r\n     * Resolves into two big ints with start and end time in nanoseconds.\r\n     * \r\n     * @returns Promise that resolves with the latest timestamp data.\r\n     */\r\n    public async probeTimestamp(): Promise<[bigint, bigint]> {\r\n        // Skip when not enabled.\r\n        if (!this.device.capabilities.hasFeature(GpuFeature.TimestampQuery)) {\r\n            return [0n, 0n];\r\n        }\r\n\r\n        // Init timestamp query when not already set.\r\n        if (!this.mQueries.timestamp) {\r\n            // Create timestamp query.\r\n            const lTimestampQuerySet: GPUQuerySet = this.device.gpu.createQuerySet({\r\n                type: 'timestamp',\r\n                count: 2\r\n            });\r\n\r\n            // Create timestamp buffer.\r\n            const lTimestampBuffer: GpuBuffer = new GpuBuffer(this.device, 16);\r\n            lTimestampBuffer.extendUsage(GPUBufferUsage.QUERY_RESOLVE);\r\n            lTimestampBuffer.extendUsage(BufferUsage.CopySource);\r\n\r\n            // Create query.\r\n            this.mQueries.timestamp = {\r\n                query: {\r\n                    querySet: lTimestampQuerySet,\r\n                    beginningOfPassWriteIndex: 0,\r\n                    endOfPassWriteIndex: 1\r\n                },\r\n                buffer: lTimestampBuffer,\r\n                resolver: null\r\n            };\r\n        }\r\n\r\n        // Use existing resolver.\r\n        if (this.mQueries.timestamp.resolver) {\r\n            return this.mQueries.timestamp.resolver;\r\n        }\r\n\r\n        this.mQueries.timestamp.resolver = this.mQueries.timestamp.buffer.read(0, 16).then((pData: ArrayBuffer) => {\r\n            // Reset resolver.\r\n            this.mQueries.timestamp!.resolver = null;\r\n\r\n            // Read and resolve timestamp data.\r\n            const lTimedata: BigUint64Array = new BigUint64Array(pData);\r\n            return [lTimedata[0], lTimedata[1]];\r\n        });\r\n\r\n        return this.mQueries.timestamp.resolver;\r\n    }\r\n\r\n    /**\r\n     * Execute render pass as cached bundle.\r\n     * \r\n     * @param pExecutor - Executor context.\r\n     */\r\n    private cachedExecute(pRenderPassEncoder: GPURenderPassEncoder): void {\r\n        if (!this.mBundleConfig.descriptor) {\r\n            // Generate GPURenderBundleEncoderDescriptor from GPURenderPassDescriptor.\r\n            const lRenderBundleEncoderDescriptor: GPURenderBundleEncoderDescriptor = {\r\n                colorFormats: this.mRenderTargets.colorTargetNames.map<GPUTextureFormat>((pColorTargetName) => {\r\n                    return this.mRenderTargets.colorTarget(pColorTargetName).layout.format as GPUTextureFormat;\r\n                }),\r\n\r\n                // Render target multisample level.\r\n                sampleCount: this.mRenderTargets.multisampled ? 4 : 1,\r\n\r\n                // Enable depth or stencil write.\r\n                depthReadOnly: false,\r\n                stencilReadOnly: false\r\n            };\r\n\r\n            // Optional depth stencil.\r\n            if (this.mRenderTargets.hasDepth || this.mRenderTargets.hasStencil) {\r\n                lRenderBundleEncoderDescriptor.depthStencilFormat = this.mRenderTargets.depthStencilTarget().layout.format as GPUTextureFormat;\r\n            }\r\n\r\n            // Save descriptor.\r\n            this.mBundleConfig.descriptor = lRenderBundleEncoderDescriptor;\r\n        }\r\n\r\n        // Generate new bundle when not already cached or render target got changed.\r\n        if (!this.mBundleConfig.bundle) {\r\n            // Clear old invalidation listener on old bundles.\r\n            for (const lParameter of this.mBundleConfig.usedResources.parameter) {\r\n                lParameter.removeInvalidationListener(this.mBundleConfig.resourceInvalidator);\r\n            }\r\n            for (const lBuffer of this.mBundleConfig.usedResources.indirectBuffer) {\r\n                lBuffer.removeInvalidationListener(this.mBundleConfig.resourceInvalidator);\r\n            }\r\n            for (const lBindgroup of this.mBundleConfig.usedResources.pipelineData) {\r\n                lBindgroup.removeInvalidationListener(this.mBundleConfig.resourceInvalidator);\r\n            }\r\n            for (const lPipeline of this.mBundleConfig.usedResources.pipelines) {\r\n                lPipeline.removeInvalidationListener(this.mBundleConfig.resourceInvalidator);\r\n            }\r\n\r\n            // Clear used resources.\r\n            this.mBundleConfig.usedResources.indirectBuffer.clear();\r\n            this.mBundleConfig.usedResources.pipelineData.clear();\r\n            this.mBundleConfig.usedResources.pipelines.clear();\r\n\r\n            // Create render bundle.\r\n            const lRenderBundleEncoder: GPURenderBundleEncoder = this.device.gpu.createRenderBundleEncoder(this.mBundleConfig.descriptor);\r\n\r\n            // Create context.\r\n            const lRenderPassContext: RenderPassContext = new RenderPassContext(lRenderBundleEncoder, this.mRenderTargets, true);\r\n\r\n            // Fill render queue.\r\n            this.mExecutionFunction(lRenderPassContext);\r\n\r\n            // Save render bundle.\r\n            this.mBundleConfig.bundle = lRenderBundleEncoder.finish();\r\n\r\n            // Save and track used resources.\r\n            for (const lParameter of this.mBundleConfig.usedResources.parameter) {\r\n                lParameter.addInvalidationListener(this.mBundleConfig.resourceInvalidator, VertexParameterInvalidationType.Data);\r\n            }\r\n            for (const lBuffer of lRenderPassContext.usedResources.indirectBuffer) {\r\n                this.mBundleConfig.usedResources.indirectBuffer.add(lBuffer);\r\n                lBuffer.addInvalidationListener(this.mBundleConfig.resourceInvalidator, GpuResourceObjectInvalidationType.ResourceRebuild);\r\n            }\r\n            for (const lBindgroup of lRenderPassContext.usedResources.pipelineData) {\r\n                this.mBundleConfig.usedResources.pipelineData.add(lBindgroup);\r\n                lBindgroup.addInvalidationListener(this.mBundleConfig.resourceInvalidator, PipelineDataInvalidationType.Data);\r\n            }\r\n            for (const lPipeline of lRenderPassContext.usedResources.pipelines) {\r\n                this.mBundleConfig.usedResources.pipelines.add(lPipeline);\r\n                lPipeline.addInvalidationListener(this.mBundleConfig.resourceInvalidator, VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n            }\r\n        }\r\n\r\n        // Add cached render bundle.\r\n        pRenderPassEncoder.executeBundles([this.mBundleConfig.bundle]);\r\n    }\r\n\r\n    /**\r\n     * Resolve gpu textures into canvas textures.\r\n     * \r\n     * @param pExecutionContext - Executor context.\r\n     */\r\n    private resolveCanvasTargets(pExecutionContext: GpuExecutionContext): void {\r\n        // Skip when nothing to be resolved.\r\n        if (this.mRenderTargets.resolveCanvasList.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.mRenderTargets.multisampled) {\r\n            // Generate resolve target descriptor with operation that does nothing.\r\n            const lColorTargetList: Array<GPURenderPassColorAttachment> = this.mRenderTargets.resolveCanvasList.map((pResolveTexture) => {\r\n                return {\r\n                    view: pResolveTexture.source.native,\r\n                    resolveTarget: pResolveTexture.canvas.native.createView(),\r\n                    loadOp: 'load',\r\n                    storeOp: 'store'\r\n                };\r\n            });\r\n\r\n            // Begin and end render pass. Render pass does only resolve targets.\r\n            pExecutionContext.commandEncoder.beginRenderPass({\r\n                colorAttachments: lColorTargetList\r\n            }).end();\r\n        } else {\r\n            // Copy targets into canvas.\r\n            for (const lResolveTexture of this.mRenderTargets.resolveCanvasList) {\r\n                // Create External source.\r\n                const lSource: GPUImageCopyTexture = {\r\n                    texture: lResolveTexture.source.texture.native,\r\n                    aspect: 'all',\r\n                    mipLevel: lResolveTexture.source.mipLevelStart,\r\n                };\r\n\r\n                // Generate native texture.\r\n                const lDestination: GPUImageCopyTexture = {\r\n                    texture: lResolveTexture.canvas.native,\r\n                    aspect: 'all',\r\n                    mipLevel: 0,\r\n                };\r\n\r\n                // Clamp copy sizes to lowest.\r\n                const lCopySize: GPUExtent3DStrict = {\r\n                    width: this.mRenderTargets.width,\r\n                    height: this.mRenderTargets.height,\r\n                    depthOrArrayLayers: lResolveTexture.source.arrayLayerStart + 1\r\n                };\r\n\r\n                pExecutionContext.commandEncoder.copyTextureToTexture(lSource, lDestination, lCopySize);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type RenderPassExecutionFunction = (pContext: RenderPassContext) => void;\r\n\r\ntype RenderPassQuery = {\r\n    timestamp?: {\r\n        query: GPURenderPassTimestampWrites;\r\n        buffer: GpuBuffer;\r\n        resolver: null | Promise<[bigint, bigint]>;\r\n    };\r\n};\r\n\r\ntype RenderBundleConfig = {\r\n    enabled: boolean;\r\n    bundle: GPURenderBundle | null;\r\n    descriptor: GPURenderBundleEncoderDescriptor | null;\r\n    usedResources: {\r\n        parameter: Set<VertexParameter>;\r\n        indirectBuffer: Set<GpuBuffer>;\r\n        pipelines: Set<VertexFragmentPipeline>;\r\n        pipelineData: Set<PipelineData>;\r\n    };\r\n    resourceInvalidator: () => void;\r\n};","import { Exception } from '@kartoffelgames/core';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObjectSetupReferences } from './gpu-object';\r\n\r\n/**\r\n * Helper object for setup objects. Returns results with a callback.\r\n */\r\nexport abstract class GpuObjectChildSetup<TSetupReferenceData, TCallback extends GpuObjectChildSetupCallback> {\r\n    private readonly mSetupCallback: TCallback;\r\n    private readonly mSetupReference: GpuObjectSetupReferences<TSetupReferenceData>;\r\n\r\n    /**\r\n     * Gpu device reference.\r\n     */\r\n    protected get device(): GpuDevice {\r\n        return this.mSetupReference.device;\r\n    }\r\n\r\n    /**\r\n     * Setup data.\r\n     */\r\n    protected get setupData(): Readonly<TSetupReferenceData> {\r\n        // References should be setup at this point.\r\n        return this.mSetupReference.data as TSetupReferenceData;\r\n    }\r\n\r\n    /**\r\n     * Setup references.\r\n     */\r\n    protected get setupReferences(): GpuObjectSetupReferences<TSetupReferenceData> {\r\n        return this.mSetupReference;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pSetupReference - Setup references.\r\n     * @param pDataCallback - Setup data callback.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<TSetupReferenceData>, pDataCallback: TCallback) {\r\n        this.mSetupReference = pSetupReference;\r\n        this.mSetupCallback = pDataCallback;\r\n    }\r\n\r\n    /**\r\n     * Ensure that current call is used inside a setup call.\r\n     */\r\n    protected ensureThatInSetup(): void {\r\n        // Lock setup to a setup call.\r\n        if (!this.mSetupReference.inSetup) {\r\n            throw new Exception('Can only setup in a setup call.', this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send data back to parent setup.\r\n     * \r\n     * @param pData - Setup complete data.\r\n     */\r\n    protected sendData(...pData: Parameters<TCallback>): void {\r\n        this.mSetupCallback(...pData);\r\n    }\r\n}\r\n\r\ntype GpuObjectChildSetupCallback = (...args: any) => void;","import { Exception } from '@kartoffelgames/core';\r\n\r\n/**\r\n * Reason list why a gpu object was invalidated.\r\n */\r\nexport class GpuObjectInvalidationReasons<TReasons extends string> {\r\n    private mDeconstruct: boolean;\r\n    private readonly mReasons: Set<TReasons>;\r\n\r\n    /**\r\n     * Life time was reached.\r\n     */\r\n    public get deconstruct(): boolean {\r\n        return this.mDeconstruct;\r\n    } set deconstruct(pDeconstruct: boolean) {\r\n        if (!pDeconstruct) {\r\n            throw new Exception(`Deconstruct reason can not be reverted. Sadly.`, this);\r\n        }\r\n\r\n        this.mDeconstruct = pDeconstruct;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    public constructor() {\r\n        this.mReasons = new Set<TReasons>();\r\n        this.mDeconstruct = false;\r\n    }\r\n\r\n    /**\r\n     * Add update reason.\r\n     * @param pReason - Update reason.\r\n     */\r\n    public add(pReason: TReasons): void {\r\n        this.mReasons.add(pReason);\r\n    }\r\n\r\n    /**\r\n     * If update reason has any existing reason.\r\n     */\r\n    public any(): boolean {\r\n        return this.mReasons.size > 0  || this.mDeconstruct;\r\n    }\r\n\r\n    /**\r\n     * Clear all reasons.\r\n     */\r\n    public clear(): void {\r\n        this.mReasons.clear();\r\n    }\r\n\r\n    /**\r\n     * Check for update reason.\r\n     * @param pReason - Update reason.\r\n     */\r\n    public has(pReason: TReasons): boolean {\r\n        return this.mReasons.has(pReason);\r\n    }\r\n}","import { Exception } from '@kartoffelgames/core';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObjectSetupReferences } from './gpu-object';\r\n\r\n/**\r\n * Gpu setup object.\r\n */\r\nexport abstract class GpuObjectSetup<TSetupData> {\r\n    private readonly mSetupReference: GpuObjectSetupReferences<TSetupData>;\r\n\r\n    /**\r\n     * Gpu device reference.\r\n     */\r\n    protected get device(): GpuDevice {\r\n        return this.mSetupReference.device;\r\n    }\r\n\r\n    /**\r\n     * Setup data.\r\n     */\r\n    protected get setupData(): TSetupData {\r\n        // References should be setup at this point.\r\n        return this.mSetupReference.data as TSetupData;\r\n    }\r\n\r\n    /**\r\n     * Setup references.\r\n     */\r\n    protected get setupReferences(): GpuObjectSetupReferences<TSetupData> {\r\n        return this.mSetupReference;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pSetupReference - Setup references.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<TSetupData>) {\r\n        this.mSetupReference = pSetupReference;\r\n\r\n        // Fill default data to setup references.\r\n        this.fillDefaultData(pSetupReference.data);\r\n    }\r\n\r\n    /**\r\n     * Ensure that current call is used inside a setup call.\r\n     */\r\n    protected ensureThatInSetup(): void {\r\n        // Lock setup to a setup call.\r\n        if (!this.mSetupReference.inSetup) {\r\n            throw new Exception('Can only setup in a setup call.', this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fill in default data before the setup starts.\r\n     * \r\n     * @param pDataReference - Setup data reference.\r\n     */\r\n    protected abstract fillDefaultData(pDataReference: Partial<TSetupData>): void;\r\n}","import { Dictionary, Exception, IDeconstructable, List, Writeable } from '@kartoffelgames/core';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObjectInvalidationReasons } from './gpu-object-invalidation-reasons';\r\nimport { GpuObjectSetup } from './gpu-object-setup';\r\n\r\n/**\r\n * Object that handles gpu data, resources or configs.\r\n */\r\nexport abstract class GpuObject<TNativeObject = null, TInvalidationType extends string = '', TSetupObject extends GpuObjectSetup<any> | null = null> implements IDeconstructable {\r\n    private mDeconstructed: boolean;\r\n    private readonly mDevice: GpuDevice;\r\n    private readonly mInvalidationReasons: GpuObjectInvalidationReasons<TInvalidationType>;\r\n    private mIsSetup: boolean;\r\n    private mNativeObject: TNativeObject | null;\r\n    private readonly mUpdateListener: Dictionary<TInvalidationType, List<GpuObjectUpdateListener<TInvalidationType>>>;\r\n    private readonly mUpdateListenerAffectedTyped: WeakMap<GpuObjectUpdateListener<TInvalidationType>, Array<TInvalidationType>>;\r\n\r\n    /**\r\n     * Gpu Device.\r\n     */\r\n    public get device(): GpuDevice {\r\n        return this.mDevice;\r\n    }\r\n\r\n    /**\r\n     * Object was setup.\r\n     */\r\n    protected get isSetup(): boolean {\r\n        return this.mIsSetup;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    protected get native(): TNativeObject {\r\n        return this.readNative();\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Gpu device.\r\n     * @param pNativeLifeTime - Lifetime of native object.\r\n     */\r\n    public constructor(pDevice: GpuDevice) {\r\n        // Save static settings.\r\n        this.mDevice = pDevice;\r\n        this.mIsSetup = false;\r\n\r\n        // Init default settings and config.\r\n        this.mDeconstructed = false;\r\n        this.mNativeObject = null;\r\n\r\n        // Init lists.\r\n        this.mUpdateListener = new Dictionary<TInvalidationType, List<GpuObjectUpdateListener<TInvalidationType>>>();\r\n        this.mUpdateListenerAffectedTyped = new WeakMap<GpuObjectUpdateListener<TInvalidationType>, Array<TInvalidationType>>();\r\n        this.mInvalidationReasons = new GpuObjectInvalidationReasons<TInvalidationType>();\r\n    }\r\n\r\n    /**\r\n     * Add invalidation listener.\r\n     * \r\n     * @param pListener - Listener.\r\n     * @param pAffected - Trigger listener only on those reasons.\r\n     * \r\n     * @returns this.\r\n     */\r\n    public addInvalidationListener(pListener: GpuObjectUpdateListener<TInvalidationType>, pFirstAffected: TInvalidationType, ...pAffected: Array<TInvalidationType>): this {\r\n        if (this.mUpdateListenerAffectedTyped.has(pListener)) {\r\n            throw new Exception(`Invalidation listener can't be applied twice.`, this);\r\n        }\r\n\r\n        // Concat first and optional types.\r\n        const lAffectedList: Array<TInvalidationType> = [pFirstAffected, ...pAffected];\r\n\r\n        // Listener to each affected\r\n        for (const lAffectedType of lAffectedList) {\r\n            // Init new affected bucket.\r\n            if (!this.mUpdateListener.has(lAffectedType)) {\r\n                this.mUpdateListener.set(lAffectedType, new List<GpuObjectUpdateListener<TInvalidationType>>());\r\n            }\r\n\r\n            // Assign listener to affected type.\r\n            this.mUpdateListener.get(lAffectedType)!.push(pListener);\r\n        }\r\n\r\n        // Map listener to affected types.\r\n        this.mUpdateListenerAffectedTyped.set(pListener, lAffectedList);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Deconstruct native object.\r\n     */\r\n    public deconstruct(): void {\r\n        this.mInvalidationReasons.deconstruct = true;\r\n\r\n        // Clear and destroy old native when any update reason exists.\r\n        if (this.mNativeObject !== null) {\r\n            this.destroyNative(this.mNativeObject, this.mInvalidationReasons);\r\n            this.mNativeObject = null;\r\n        }\r\n\r\n        this.mDeconstructed = true;\r\n    }\r\n\r\n    /**\r\n     * Invalidate native gpu object so it will be created again.\r\n     */\r\n    public invalidate(...pReasons: Array<TInvalidationType>): void {\r\n        // Single reason execution function.\r\n        const lExecuteReasonListener = (pReason: TInvalidationType) => {\r\n            // Skip reasons that already occurred or no native was created.\r\n            // This step ensures to execute invalidation listener for all gpu objects that doesn't create natives. \r\n            if (this.mNativeObject !== null && this.mInvalidationReasons.has(pReason)) {\r\n                return;\r\n            }\r\n\r\n            // Add invalidation reason.\r\n            this.mInvalidationReasons.add(pReason);\r\n\r\n            // Read listener list.\r\n            const lListenerList: List<GpuObjectUpdateListener<TInvalidationType>> | undefined = this.mUpdateListener.get(pReason);\r\n            if (!lListenerList || lListenerList.length === 0) {\r\n                return;\r\n            }\r\n\r\n            // Single execution of listener when only one exists.\r\n            if (lListenerList.length === 1) {\r\n                lListenerList[0](pReason);\r\n            } else {\r\n                for (const lListener of lListenerList) {\r\n                    lListener(pReason);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Invalidate for each reason. Single reason execution when only one exists.\r\n        if (pReasons.length === 1) {\r\n            lExecuteReasonListener(pReasons[0]);\r\n        } else {\r\n            for (const lReason of pReasons) {\r\n                lExecuteReasonListener(lReason);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add invalidation listener.\r\n     * @param pListener - Listener.\r\n     */\r\n    public removeInvalidationListener(pListener: GpuObjectUpdateListener<TInvalidationType>): void {\r\n        // Get all affected types of listener.\r\n        const lAffectedList: Array<TInvalidationType> | undefined = this.mUpdateListenerAffectedTyped.get(pListener);\r\n        if (!lAffectedList) {\r\n            return;\r\n        }\r\n\r\n        // Remove all listener from each affected type.\r\n        for (const lAffectedType of lAffectedList) {\r\n            this.mUpdateListener.get(lAffectedType)!.remove(pListener);\r\n        }\r\n\r\n        // Remove listener from affected mapping.\r\n        this.mUpdateListenerAffectedTyped.delete(pListener);\r\n    }\r\n\r\n    /**\r\n     * Destroy native object.\r\n     * \r\n     * @param _pNative - Native object.\r\n     * @param _pReasons - Reason why it should be destroyed. \r\n     */\r\n    protected destroyNative(_pNative: TNativeObject, _pReasons: GpuObjectInvalidationReasons<TInvalidationType>): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Throws when the gpu object not setup.\r\n     */\r\n    protected ensureSetup(): void {\r\n        if (!this.mIsSetup) {\r\n            throw new Exception('Gpu object must be setup to access properties.', this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate new native object.\r\n     * Return null when no native can be generated.\r\n     * \r\n     * @param _pCurrentNative - Current native element.\r\n     * @param _pReasons - Reason why it should be newly generated. \r\n     */\r\n    protected generateNative(_pCurrentNative: TNativeObject | null, _pReasons: GpuObjectInvalidationReasons<TInvalidationType>): TNativeObject | null {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Setup with setup object.\r\n     * \r\n     * @param _pReferences - Used references.\r\n     */\r\n    protected onSetup(_pReferences: GpuObjectSetupData<TSetupObject>): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Create setup object.\r\n     * Return null to skip any setups.\r\n     * \r\n     * @param _pReferences - Unfilled setup references.\r\n     * \r\n     * @returns Setup object.\r\n     */\r\n    protected onSetupObjectCreate(_pReferences: GpuObjectSetupReferences<GpuObjectSetupData<TSetupObject>>): TSetupObject {\r\n        return null as TSetupObject;\r\n    }\r\n\r\n    /**\r\n     * Call setup.\r\n     * \r\n     * @param pSetupCallback - Setup callback. \r\n     * \r\n     * @returns this. \r\n     */\r\n    protected setup(pSetupCallback?: (pSetup: TSetupObject) => void): this {\r\n        // Dont call twice.\r\n        if (this.mIsSetup) {\r\n            throw new Exception(`Render targets setup can't be called twice.`, this);\r\n        }\r\n\r\n        // Create unfilled\r\n        const lSetupReferences: GpuObjectSetupReferences<GpuObjectSetupData<TSetupObject>> = {\r\n            inSetup: true,\r\n            device: this.mDevice,\r\n            data: {}\r\n        };\r\n\r\n        // Creates setup object.\r\n        const lSetupObject: TSetupObject | null = this.onSetupObjectCreate(lSetupReferences);\r\n        if (lSetupObject !== null) {\r\n            // Call optional user setup.\r\n            if (pSetupCallback) {\r\n                pSetupCallback(lSetupObject);\r\n            }\r\n\r\n            // Call gpu object setup. At this point all references should be filled.\r\n            this.onSetup(lSetupReferences.data as GpuObjectSetupData<TSetupObject>);\r\n        }\r\n\r\n        // Defuse setup references.\r\n        (<Writeable<GpuObjectSetupReferences<GpuObjectSetupData<TSetupObject>>>>lSetupReferences).inSetup = false;\r\n\r\n        // Set gpu object as setup.\r\n        this.mIsSetup = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update native object.\r\n     * \r\n     * @param _pNative - Native object.\r\n     * @param _pReasons - Reason why it should be updated. \r\n     * \r\n     * @returns true when native element was updated, false when it should be created anew.\r\n     */\r\n    protected updateNative(_pNative: TNativeObject, _pReasons: GpuObjectInvalidationReasons<TInvalidationType>): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Read up to date native object.\r\n     * Invalidates, destroys and generates the native object.\r\n     * \r\n     * @returns native object.\r\n     */\r\n    private readNative(): TNativeObject {\r\n        // Restrict deconstructed access.\r\n        if (this.mDeconstructed) {\r\n            throw new Exception(`Native GPU object was deconstructed and can't be used again.`, this);\r\n        }\r\n\r\n        // Ensure the setup was called.\r\n        if (!this.isSetup) {\r\n            // Call empty update.\r\n            this.setup();\r\n        }\r\n\r\n        // When native is generated and is invalid, try to update it.\r\n        if (this.mNativeObject !== null && this.mInvalidationReasons.any()) {\r\n            // Try to update native.\r\n            const lUpdateSuccessfull: boolean = this.updateNative(this.mNativeObject, this.mInvalidationReasons);\r\n            if (lUpdateSuccessfull) {\r\n                this.mInvalidationReasons.clear();\r\n            }\r\n        }\r\n\r\n        // When no native is generated or update was not successfull.\r\n        if (this.mNativeObject === null || this.mInvalidationReasons.any()) {\r\n            // Save current native.\r\n            const lCurrentNative: TNativeObject | null = this.mNativeObject;\r\n\r\n            // Generate new native.\r\n            this.mNativeObject = this.generateNative(lCurrentNative, this.mInvalidationReasons);\r\n\r\n            // Destroy old native when existing.\r\n            if (lCurrentNative !== null) {\r\n                this.destroyNative(lCurrentNative, this.mInvalidationReasons);\r\n            }\r\n\r\n            // Reset all update reasons.\r\n            this.mInvalidationReasons.clear();\r\n        }\r\n\r\n        return this.mNativeObject!;\r\n    }\r\n}\r\n\r\ntype GpuObjectSetupData<TGpuObjectSetup> = TGpuObjectSetup extends GpuObjectSetup<infer T> ? T : never;\r\n\r\nexport interface GpuObjectSetupReferences<TSetupReferenceData> {\r\n    readonly device: GpuDevice;\r\n    readonly inSetup: boolean;\r\n    readonly data: Partial<TSetupReferenceData>;\r\n}\r\n\r\nexport type GpuObjectUpdateListener<TInvalidationReason extends string> = (pReason: TInvalidationReason) => void;","import { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject } from './gpu-object';\r\nimport { GpuObjectSetup } from './gpu-object-setup';\r\n\r\n/**\r\n * Gpu resource object.\r\n * Takes actual memory space on gpu hardware.\r\n */\r\nexport class GpuResourceObject<TUsageType extends number = number, TNativeObject = null, TInvalidationType extends string = '', TSetupObject extends GpuObjectSetup<any> | null = null> extends GpuObject<TNativeObject, TInvalidationType | GpuResourceObjectInvalidationType, TSetupObject> {\r\n    private mResourceUsage: TUsageType;\r\n\r\n    /**\r\n     * Texture usage.\r\n     */\r\n    protected get usage(): TUsageType {\r\n        return this.mResourceUsage;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Device.\r\n     */\r\n    public constructor(pDevice: GpuDevice) {\r\n        super(pDevice);\r\n\r\n        // Set static config.\r\n        this.mResourceUsage = 0 as TUsageType;\r\n    }\r\n\r\n    /**\r\n     * Extend usage of resource.\r\n     * Might trigger a resource rebuild.\r\n     * \r\n     * @param pUsage - Usage. \r\n     */\r\n    public extendUsage(pUsage: TUsageType): this {\r\n        // Update onyl when not already set.\r\n        if ((this.mResourceUsage & pUsage) === 0) {\r\n            this.mResourceUsage = (this.mResourceUsage | pUsage) as TUsageType ;\r\n            this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport enum GpuResourceObjectInvalidationType {\r\n    ResourceRebuild = 'ResourceRebuild'\r\n}\r\n","import { Exception, TypedArray } from '@kartoffelgames/core';\r\nimport { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { GpuBufferView, GpuBufferViewFormat } from '../../buffer/gpu-buffer-view';\r\nimport { ArrayBufferMemoryLayout } from '../../buffer/memory_layout/array-buffer-memory-layout';\r\nimport { BaseBufferMemoryLayout } from '../../buffer/memory_layout/base-buffer-memory-layout';\r\nimport { PrimitiveBufferMemoryLayout } from '../../buffer/memory_layout/primitive-buffer-memory-layout';\r\nimport { StructBufferMemoryLayout } from '../../buffer/memory_layout/struct-buffer-memory-layout';\r\nimport { BufferItemFormat } from '../../constant/buffer-item-format.enum';\r\nimport { GpuLimit } from '../../constant/gpu-limit.enum';\r\nimport { StorageBindingType } from '../../constant/storage-binding-type.enum';\r\nimport { TextureDimension } from '../../constant/texture-dimension.enum';\r\nimport { TextureViewDimension } from '../../constant/texture-view-dimension.enum';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { GpuResourceObject } from '../../gpu_object/gpu-resource-object';\r\nimport { GpuTexture } from '../../texture/gpu-texture';\r\nimport { GpuTextureView } from '../../texture/gpu-texture-view';\r\nimport { SamplerMemoryLayout } from '../../texture/memory_layout/sampler-memory-layout';\r\nimport { TextureViewMemoryLayout } from '../../texture/memory_layout/texture-view-memory-layout';\r\nimport { TextureSampler } from '../../texture/texture-sampler';\r\nimport { BindLayout } from '../bind_group_layout/bind-group-layout';\r\n\r\n/**\r\n * Setup child object for setup bind group gpu data resources. \r\n */\r\nexport class BindGroupDataSetup extends GpuObjectChildSetup<null, BindGroupDataCallback> {\r\n    private readonly mBindLayout: Readonly<BindLayout>;\r\n    private readonly mCurrentData: GpuResourceObject | null;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pLayout - Target layout.\r\n     * @param pCurrentData - Current set data.\r\n     * @param pSetupReference - Setup data references.\r\n     * @param pDataCallback - Bind data callback.\r\n     */\r\n    public constructor(pLayout: Readonly<BindLayout>, pCurrentData: GpuResourceObject | null, pSetupReference: GpuObjectSetupReferences<null>, pDataCallback: BindGroupDataCallback) {\r\n        super(pSetupReference, pDataCallback);\r\n\r\n        // Set initial data.\r\n        this.mCurrentData = pCurrentData;\r\n        this.mBindLayout = pLayout;\r\n    }\r\n\r\n    /**\r\n     * Create a view with the attached buffer and binding layout. \r\n     * \r\n     * @param pValueType - Number item type of view.\r\n     * \r\n     * @returns view of buffer from bind group layout.\r\n     */\r\n    public asBufferView<T extends TypedArray>(pValueType: GpuBufferViewFormat<T>, pDynamicOffsetIndex?: number): GpuBufferView<T> {\r\n        const lData: GpuResourceObject = this.getRaw();\r\n        if (!(lData instanceof GpuBuffer)) {\r\n            throw new Exception('Bind data can not be converted into a buffer view.', this);\r\n        }\r\n\r\n        // Read layout buffer.\r\n        const lBufferLayout: BaseBufferMemoryLayout = this.mBindLayout.layout as BaseBufferMemoryLayout;\r\n\r\n        // Create view.\r\n        return lData.view(lBufferLayout, pValueType, pDynamicOffsetIndex);\r\n    }\r\n\r\n    /**\r\n     * Create na new buffer.\r\n     * \r\n     * @param pDataOrVariableLength - Buffer data without applied alignment,\r\n     *                                repeat count of variable parts of a layout or\r\n     *                                Offset count when binding has dynamic offsets. \r\n     * \r\n     * @returns created buffer.\r\n     */\r\n    public createBuffer(pData: Array<number>): GpuBuffer;\r\n    public createBuffer(pVariableSizeCount?: number): GpuBuffer;\r\n    public createBuffer(pDataOrVariableLength?: Array<number> | number): GpuBuffer {\r\n        // Create empty when no data array is set or fill it with the data array.\r\n        let lBuffer: GpuBuffer;\r\n        if (Array.isArray(pDataOrVariableLength)) {\r\n            lBuffer = this.createBufferFromArray(pDataOrVariableLength);\r\n        } else {\r\n            lBuffer = this.createEmptyBuffer(pDataOrVariableLength);\r\n        }\r\n\r\n        // Send created data.\r\n        this.sendData(lBuffer);\r\n\r\n        return lBuffer;\r\n    }\r\n\r\n    /**\r\n     * Create and init buffer with raw array buffer data.\r\n     * Data needs to have the right alignment and size.\r\n     * \r\n     * @param pData - Raw data. \r\n     * \r\n     * @returns - Created buffer.\r\n     */\r\n    public createBufferWithRawData(pData: ArrayBufferLike): GpuBuffer {\r\n        // Layout must be a buffer memory layout.\r\n        if (!(this.mBindLayout.layout instanceof BaseBufferMemoryLayout)) {\r\n            throw new Exception(`Bind data layout is not suitable for buffers.`, this);\r\n        }\r\n\r\n        // Calculate variable item count from initial buffer data.  \r\n        const lVariableItemCount: number = (() => {\r\n            // No need to calculate was it is allways zero.\r\n            if (this.mBindLayout.layout.variableSize === 0) {\r\n                return 0;\r\n            }\r\n\r\n            // Get initial buffer data byte length.\r\n            const lBufferByteLength: number = pData.byteLength;\r\n\r\n            // calculate item count and check if initial data meets requirments.\r\n            const lItemCount: number = (lBufferByteLength - this.mBindLayout.layout.fixedSize) / this.mBindLayout.layout.variableSize;\r\n            if (lItemCount % 1 > 0) {\r\n                throw new Exception(`Raw bind group data buffer data \"${this.mBindLayout.name}\" does not meet alignment.`, this);\r\n            }\r\n\r\n            return lItemCount;\r\n        })();\r\n\r\n        // Calculate buffer size with correct alignment.\r\n        let lByteSize: number = (lVariableItemCount ?? 0) * this.mBindLayout.layout.variableSize + this.mBindLayout.layout.fixedSize;\r\n        if (this.mBindLayout.hasDynamicOffset) {\r\n            // Read correct alignment limitations for storage type.\r\n            const lOffsetAlignment: number = (() => {\r\n                if (this.mBindLayout.storageType === StorageBindingType.None) {\r\n                    return this.device.capabilities.getLimit(GpuLimit.MinUniformBufferOffsetAlignment);\r\n                } else {\r\n                    return this.device.capabilities.getLimit(GpuLimit.MinStorageBufferOffsetAlignment);\r\n                }\r\n            })();\r\n\r\n            // Apply offset alignment to byte size.\r\n            lByteSize = Math.ceil(lByteSize / lOffsetAlignment) * lOffsetAlignment;\r\n            lByteSize *= Math.floor(pData.byteLength / lByteSize);\r\n        }\r\n\r\n        // Validate size.\r\n        if (pData.byteLength !== lByteSize) {\r\n            throw new Exception(`Raw bind group data buffer data \"${this.mBindLayout.name}\" does not meet data size (Should:${lByteSize} => Has:${pData.byteLength}) requirements.`, this);\r\n        }\r\n\r\n        // Create buffer.\r\n        const lBuffer: GpuBuffer = new GpuBuffer(this.device, lByteSize).initialData(pData);\r\n\r\n        // Send created data.\r\n        this.sendData(lBuffer);\r\n\r\n        return lBuffer;\r\n    }\r\n\r\n    /**\r\n     * Create new sampler.\r\n     * \r\n     * @returns created texture sampler.\r\n     */\r\n    public createSampler(): TextureSampler {\r\n        // Layout must be a sampler memory layout.\r\n        if (!(this.mBindLayout.layout instanceof SamplerMemoryLayout)) {\r\n            throw new Exception(`Bind data layout is not suitable for samplers.`, this);\r\n        }\r\n\r\n        // Create texture sampler.\r\n        const lSampler: TextureSampler = new TextureSampler(this.device, this.mBindLayout.layout);\r\n\r\n        // Send created data.\r\n        this.sendData(lSampler);\r\n\r\n        return lSampler;\r\n    }\r\n\r\n    /**\r\n     * Create texture view.\r\n     * Generates a new texture.\r\n     * \r\n      * @returns created texture view.\r\n     */\r\n    public createTexture(): GpuTextureView {\r\n        // Layout must be a texture viw memory layout.\r\n        if (!(this.mBindLayout.layout instanceof TextureViewMemoryLayout)) {\r\n            throw new Exception(`Bind data layout is not suitable for image textures.`, this);\r\n        }\r\n\r\n        // Generate texture dimension from view dimensions.\r\n        const lTextureDimension: TextureDimension = (() => {\r\n            switch (this.mBindLayout.layout.dimension) {\r\n                case TextureViewDimension.OneDimension: {\r\n                    return TextureDimension.OneDimension;\r\n                }\r\n                case TextureViewDimension.TwoDimensionArray:\r\n                case TextureViewDimension.Cube:\r\n                case TextureViewDimension.CubeArray:\r\n                case TextureViewDimension.TwoDimension: {\r\n                    return TextureDimension.TwoDimension;\r\n                }\r\n                case TextureViewDimension.ThreeDimension: {\r\n                    return TextureDimension.ThreeDimension;\r\n                }\r\n            }\r\n        })();\r\n\r\n        // Create texture.\r\n        const lTexture: GpuTexture = new GpuTexture(this.device, {\r\n            dimension: lTextureDimension,\r\n            format: this.mBindLayout.layout.format,\r\n            multisampled: this.mBindLayout.layout.multisampled\r\n        });\r\n\r\n        // Create view from texture.\r\n        const lTextureView: GpuTextureView = lTexture.useAs(this.mBindLayout.layout.dimension);\r\n\r\n        // Send created texture to parent bind group.\r\n        this.sendData(lTextureView);\r\n\r\n        return lTextureView;\r\n    }\r\n\r\n    /**\r\n     * Get current binded data.\r\n     * \r\n     * @returns current set bind data.\r\n     * \r\n     * @throws {@link Exception}\r\n     * When no data was set.\r\n     */\r\n    public getRaw<T extends GpuResourceObject<any, any, any, any>>(): T {\r\n        // Validate existence.\r\n        if (!this.mCurrentData) {\r\n            throw new Exception('No binding data was set.', this);\r\n        }\r\n\r\n        // Return current set data.\r\n        return this.mCurrentData as T;\r\n    }\r\n\r\n    /**\r\n     * Set already created bind data.\r\n     * \r\n     * @param pData - Created data.\r\n     * \r\n     * @returns set data.\r\n     */\r\n    public set<T extends GpuResourceObject<any, any, any, any>>(pData: T): T {\r\n        this.sendData(pData);\r\n\r\n        // Return same data.\r\n        return pData;\r\n    }\r\n\r\n    /**\r\n     * Create na new buffer.\r\n     * \r\n     * @param pData - Buffer data without right alignment.\r\n     * \r\n     * @returns created buffer.\r\n     */\r\n    private createBufferFromArray(pData: Array<number>): GpuBuffer {\r\n        // Layout must be a buffer memory layout.\r\n        if (!(this.mBindLayout.layout instanceof BaseBufferMemoryLayout)) {\r\n            throw new Exception(`Bind data layout is not suitable for buffers.`, this);\r\n        }\r\n\r\n        // Unwrap layout.\r\n        const lUnwrapedLayout: UnwrappedBufferLayout = this.unwrapLayouts(this.mBindLayout.layout);\r\n\r\n        // Validate data length that should be written.\r\n        if (lUnwrapedLayout.fixedItemCount > pData.length) {\r\n            throw new Exception(`Data has not enough numbers (count: ${pData.length}) to fill fixed buffer data (count: ${lUnwrapedLayout.fixedItemCount}).`, this);\r\n        }\r\n\r\n        // Get variable data repetitions.\r\n        let lVariableRepetitionCount: number = 0;\r\n        if (lUnwrapedLayout.variableItemCount > 0) {\r\n            lVariableRepetitionCount = (pData.length - lUnwrapedLayout.fixedItemCount) / lUnwrapedLayout.variableItemCount;\r\n        }\r\n\r\n        // Variable count should be an integer.\r\n        if (lVariableRepetitionCount % 1 !== 0) {\r\n            throw new Exception(`Data has not the right alignment to fill variable spaces without null space.`, this);\r\n        }\r\n\r\n        // Calculate buffer size with correct alignment.\r\n        let lDynamicOffsetAlignment: number = -1;\r\n        let lDynamicOffsetCount: number = 1;\r\n        let lByteSize: number = (lVariableRepetitionCount ?? 0) * this.mBindLayout.layout.variableSize + this.mBindLayout.layout.fixedSize;\r\n        if (this.mBindLayout.hasDynamicOffset) {\r\n            // Read correct alignment limitations for storage type.\r\n            lDynamicOffsetAlignment = (() => {\r\n                if (this.mBindLayout.storageType === StorageBindingType.None) {\r\n                    return this.device.capabilities.getLimit(GpuLimit.MinUniformBufferOffsetAlignment);\r\n                } else {\r\n                    return this.device.capabilities.getLimit(GpuLimit.MinStorageBufferOffsetAlignment);\r\n                }\r\n            })();\r\n\r\n            // Calculate dynamic offset count from data length.\r\n            lDynamicOffsetCount = (pData.length / lUnwrapedLayout.fixedItemCount);\r\n\r\n            // Apply offset alignment to byte size.\r\n            lByteSize = Math.ceil(lByteSize / lDynamicOffsetAlignment) * lDynamicOffsetAlignment;\r\n            lByteSize *= lDynamicOffsetCount;\r\n        }\r\n\r\n        // Create buffer with correct length.\r\n        const lBufferData: ArrayBuffer = new ArrayBuffer(lByteSize);\r\n        const lBufferDataView: DataView = new DataView(lBufferData);\r\n\r\n        // Write data.\r\n        let lDataIndex: number = 0;\r\n        let lByteOffset: number = 0;\r\n        const lWriteLayout = (pUnwrappedLayout: UnwrappedBufferLayout, pOverwrittenAlignment: number = -1) => {\r\n            const lLayoutAlignment: number = pOverwrittenAlignment !== -1 ? pOverwrittenAlignment : pUnwrappedLayout.alignment;\r\n\r\n            // Apply layout alignment to offset.\r\n            lByteOffset = Math.ceil(lByteOffset / lLayoutAlignment) * lLayoutAlignment;\r\n\r\n            // buffer layout is a layered format.\r\n            if (Array.isArray(pUnwrappedLayout.format)) {\r\n                // Set repetition count to variable count when layout repetition count is uncapped.\r\n                const lRepetitionCount: number = (pUnwrappedLayout.count !== -1) ? pUnwrappedLayout.count : lVariableRepetitionCount;\r\n                for (let lLayoutRepetionIndex: number = 0; lLayoutRepetionIndex < lRepetitionCount; lLayoutRepetionIndex++) {\r\n                    // Add each inner format.\r\n                    for (const lInnerFormat of pUnwrappedLayout.format) {\r\n                        lWriteLayout(lInnerFormat);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // write each single number.\r\n            for (let lItemIndex: number = 0; lItemIndex < pUnwrappedLayout.count; lItemIndex++) {\r\n                // Add and iterate data.\r\n                this.setBufferData(lBufferDataView, lByteOffset, pUnwrappedLayout.format.itemFormat, pData[lDataIndex]);\r\n                lDataIndex++;\r\n\r\n                // Increase offset by format byte count.\r\n                lByteOffset += pUnwrappedLayout.format.itemByteCount;\r\n            }\r\n        };\r\n\r\n        // Repeat layout for each dynamic offset.\r\n        for (let lOffsetIndex: number = 0; lOffsetIndex < lDynamicOffsetCount; lOffsetIndex++) {\r\n            lWriteLayout(lUnwrapedLayout, lDynamicOffsetAlignment);\r\n        }\r\n\r\n        // Create buffer with initial data.\r\n        const lBuffer: GpuBuffer = new GpuBuffer(this.device, lBufferData.byteLength).initialData(lBufferData);\r\n\r\n        return lBuffer;\r\n    }\r\n\r\n    /**\r\n     * Create a empty buffer.\r\n     * \r\n     * @param pVariableSizeCount - Variable item count.\r\n     * \r\n     * @returns - Created buffer. \r\n     */\r\n    private createEmptyBuffer(pVariableSizeCount: number | null = null): GpuBuffer {\r\n        // Layout must be a buffer memory layout.\r\n        if (!(this.mBindLayout.layout instanceof BaseBufferMemoryLayout)) {\r\n            throw new Exception(`Bind data layout is not suitable for buffers.`, this);\r\n        }\r\n\r\n        // Calculate variable item count from initial buffer data.  \r\n        const lVariableItemCount: number = (() => {\r\n            // Use set variable count.\r\n            if (pVariableSizeCount !== null) {\r\n                return pVariableSizeCount;\r\n            }\r\n\r\n            // No need to calculate was it is allways zero.\r\n            if (this.mBindLayout.layout.variableSize === 0) {\r\n                return 0;\r\n            }\r\n\r\n            throw new Exception(`For bind group data buffer \"${this.mBindLayout.name}\" a variable item count must be set.`, this);\r\n        })();\r\n\r\n        // Calculate buffer size with correct alignment.\r\n        let lByteSize: number = (lVariableItemCount ?? 0) * this.mBindLayout.layout.variableSize + this.mBindLayout.layout.fixedSize;\r\n        if (this.mBindLayout.hasDynamicOffset) {\r\n            // Read correct alignment limitations for storage type.\r\n            const lOffsetAlignment: number = (() => {\r\n                if (this.mBindLayout.storageType === StorageBindingType.None) {\r\n                    return this.device.capabilities.getLimit(GpuLimit.MinUniformBufferOffsetAlignment);\r\n                } else {\r\n                    return this.device.capabilities.getLimit(GpuLimit.MinStorageBufferOffsetAlignment);\r\n                }\r\n            })();\r\n\r\n            // Apply offset alignment to byte size.\r\n            lByteSize = Math.ceil(lByteSize / lOffsetAlignment) * lOffsetAlignment;\r\n            lByteSize *= pVariableSizeCount ?? 1; \r\n        }\r\n\r\n        // Create buffer.\r\n        const lBuffer: GpuBuffer = new GpuBuffer(this.device, lByteSize);\r\n\r\n        return lBuffer;\r\n    }\r\n\r\n    /**\r\n     * Set data in little endian according to the set item format and offset. \r\n     * \r\n     * @param pBufferDataView - Data view of buffer.\r\n     * @param pByteOffset - Byte offset in buffer.\r\n     * @param pFormat - Format to write.\r\n     * @param pData - Data to write.\r\n     */\r\n    private setBufferData(pBufferDataView: DataView, pByteOffset: number, pFormat: BufferItemFormat, pData: number): void {\r\n        switch (pFormat) {\r\n            case BufferItemFormat.Float32: { pBufferDataView.setFloat32(pByteOffset, pData, true); break; }\r\n            case BufferItemFormat.Uint32: { pBufferDataView.setUint32(pByteOffset, pData, true); break; }\r\n            case BufferItemFormat.Sint32: { pBufferDataView.setInt32(pByteOffset, pData, true); break; }\r\n\r\n            // Unsupported\r\n            case BufferItemFormat.Uint8:\r\n            case BufferItemFormat.Sint8:\r\n            case BufferItemFormat.Uint16:\r\n            case BufferItemFormat.Sint16:\r\n            case BufferItemFormat.Float16:\r\n            case BufferItemFormat.Unorm16:\r\n            case BufferItemFormat.Snorm16:\r\n            case BufferItemFormat.Unorm8:\r\n            case BufferItemFormat.Snorm8:\r\n            default: {\r\n                throw new Exception(`Currently \"${pFormat}\" is not supported for uniform parameter.`, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unwrap layout.\r\n     * \r\n     * @param pLayout - Buffer layout.\r\n     * \r\n     * @returns - unwrapped layout. \r\n     */\r\n    private unwrapLayouts(pLayout: BaseBufferMemoryLayout): UnwrappedBufferLayout {\r\n        // Recursion end condition. Primitives have no inner formats.\r\n        if (pLayout instanceof PrimitiveBufferMemoryLayout) {\r\n            // Read item count and format of parameter.\r\n            const lParameterItemCount: number = PrimitiveBufferMemoryLayout.itemCountOfMultiplier(pLayout.itemMultiplier);\r\n            const lParameterItemFormat: BufferItemFormat = pLayout.itemFormat;\r\n\r\n            // Add formats for each item of parameter.\r\n            return {\r\n                // Global data.\r\n                fixedItemCount: lParameterItemCount,\r\n                variableItemCount: 0,\r\n\r\n                // Local layout data.\r\n                count: lParameterItemCount,\r\n                alignment: pLayout.alignment,\r\n                format: {\r\n                    itemFormat: lParameterItemFormat,\r\n                    itemByteCount: PrimitiveBufferMemoryLayout.itemFormatByteCount(lParameterItemFormat)\r\n                }\r\n            };\r\n        }\r\n\r\n        // Recursive array.\r\n        if (pLayout instanceof ArrayBufferMemoryLayout) {\r\n            // Unwrap inner format.\r\n            const lInnerFormatUnwrapped: UnwrappedBufferLayout = this.unwrapLayouts(pLayout.innerType);\r\n\r\n            // Add formats for each item of parameter.\r\n            return {\r\n                // Global data.\r\n                fixedItemCount: Math.max(pLayout.arraySize, 0) * lInnerFormatUnwrapped.fixedItemCount,\r\n                variableItemCount: (pLayout.variableSize > 0) ? lInnerFormatUnwrapped.fixedItemCount : 0,\r\n\r\n                // Local layout data.\r\n                count: pLayout.fixedSize || -1,\r\n                alignment: pLayout.alignment,\r\n                format: [lInnerFormatUnwrapped]\r\n            };\r\n        }\r\n\r\n        // Recursive struct.\r\n        if (pLayout instanceof StructBufferMemoryLayout) {\r\n            let lFixedItemCount: number = 0;\r\n            let lVariableItemCount: number = 0;\r\n\r\n            // Create new unwrapped layout for each property.\r\n            const lPropertyFormats: Array<UnwrappedBufferLayout> = new Array<UnwrappedBufferLayout>();\r\n            for (const lProperty of pLayout.properties) {\r\n                // Unwrap property format.\r\n                const lPropertyFormatUnwrapped: UnwrappedBufferLayout = this.unwrapLayouts(lProperty.layout);\r\n\r\n                // Count of fixed and variable item size.\r\n                lFixedItemCount += lPropertyFormatUnwrapped.fixedItemCount;\r\n                lVariableItemCount += lPropertyFormatUnwrapped.variableItemCount;\r\n\r\n                lPropertyFormats.push(lPropertyFormatUnwrapped);\r\n            }\r\n\r\n            // Add formats for each item of parameter.\r\n            return {\r\n                // Global data.\r\n                fixedItemCount: lFixedItemCount,\r\n                variableItemCount: lVariableItemCount,\r\n\r\n                // Local layout data.\r\n                count: 1,\r\n                alignment: pLayout.alignment,\r\n                format: lPropertyFormats\r\n            };\r\n        }\r\n\r\n        throw new Exception('Memory layout not suppored for bindings', this);\r\n    }\r\n}\r\n\r\ntype BindGroupDataCallback = (pData: GpuResourceObject<any, any, any, any>) => void;\r\n\r\ntype UnwrappedBufferLayout = {\r\n    // Global data.\r\n    fixedItemCount: number;\r\n    variableItemCount: number;\r\n\r\n    // Local layout data.\r\n    count: number;\r\n    alignment: number;\r\n    format: Array<UnwrappedBufferLayout> | {\r\n        itemFormat: BufferItemFormat,\r\n        itemByteCount: number;\r\n    };\r\n};","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { BufferUsage } from '../../constant/buffer-usage.enum';\r\nimport { StorageBindingType } from '../../constant/storage-binding-type.enum';\r\nimport { TextureUsage } from '../../constant/texture-usage.enum';\r\nimport { TextureSampler } from '../../texture/texture-sampler';\r\nimport { BindGroupDataSetup } from './bind-group-data-setup';\r\nimport { BindGroupLayout, BindLayout } from '../bind_group_layout/bind-group-layout';\r\nimport { BaseBufferMemoryLayout } from '../../buffer/memory_layout/base-buffer-memory-layout';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject, GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuResourceObject, GpuResourceObjectInvalidationType } from '../../gpu_object/gpu-resource-object';\r\nimport { IGpuObjectNative } from '../../gpu_object/interface/i-gpu-object-native';\r\nimport { GpuTextureView } from '../../texture/gpu-texture-view';\r\nimport { SamplerMemoryLayout } from '../../texture/memory_layout/sampler-memory-layout';\r\nimport { TextureViewMemoryLayout } from '../../texture/memory_layout/texture-view-memory-layout';\r\n\r\n/**\r\n * Pipeline bind group unbound from a group binding index.\r\n */\r\nexport class BindGroup extends GpuObject<GPUBindGroup, BindGroupInvalidationType> implements IGpuObjectNative<GPUBindGroup> {\r\n    private readonly mBindData: Dictionary<string, GpuResourceObject<any, any>>;\r\n    private readonly mDataInvalidationListener: WeakMap<GpuResourceObject, BindGroupDataInvalidationListener>;\r\n    private readonly mLayout: BindGroupLayout;\r\n\r\n    /**\r\n     * Layout of bind group.\r\n     */\r\n    public get layout(): BindGroupLayout {\r\n        return this.mLayout;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUBindGroup {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Gpu Device reference.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pBindGroupLayout: BindGroupLayout) {\r\n        super(pDevice);\r\n\r\n        this.mLayout = pBindGroupLayout;\r\n        this.mBindData = new Dictionary<string, GpuResourceObject>();\r\n        this.mDataInvalidationListener = new WeakMap<GpuResourceObject, BindGroupDataInvalidationListener>();\r\n    }\r\n\r\n    /**\r\n     * Read binding data references.\r\n     * \r\n     * @param pBindName - Binding name.\r\n     * \r\n     * @returns Data setup object. \r\n     */\r\n    public data(pBindName: string): BindGroupDataSetup {\r\n        const lBindLayout: Readonly<BindLayout> = this.mLayout.getBind(pBindName);\r\n        const lData: GpuResourceObject | null = this.mBindData.get(pBindName) ?? null;\r\n\r\n        // Construct setup data to data.\r\n        const lDataSetupReferences: GpuObjectSetupReferences<null> = {\r\n            device: this.device,\r\n            inSetup: true, // No need to defuse setup.\r\n            data: null\r\n        };\r\n\r\n        return new BindGroupDataSetup(lBindLayout, lData, lDataSetupReferences, (pData: GpuResourceObject) => {\r\n            // Validate if layout fits bind data and dynamicly extend usage type of bind data.\r\n            switch (true) {\r\n                // Textures must use a buffer memory layout.\r\n                case pData instanceof GpuBuffer: {\r\n                    if (!(lBindLayout.layout instanceof BaseBufferMemoryLayout)) {\r\n                        throw new Exception(`Buffer added to bind data \"${pBindName}\" but binding does not expect a buffer.`, this);\r\n                    }\r\n\r\n                    // Extend buffer usage based on if it is a storage or not.\r\n                    if (lBindLayout.storageType !== StorageBindingType.None) {\r\n                        pData.extendUsage(BufferUsage.Storage);\r\n                    } else {\r\n                        pData.extendUsage(BufferUsage.Uniform);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                // Samplers must use a texture sampler memory layout.\r\n                case pData instanceof TextureSampler: {\r\n                    if (!(lBindLayout.layout instanceof SamplerMemoryLayout)) {\r\n                        throw new Exception(`Texture sampler added to bind data \"${pBindName}\" but binding does not expect a texture sampler.`, this);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                // Textures must use a texture memory layout.\r\n                case pData instanceof GpuTextureView: {\r\n                    if (!(lBindLayout.layout instanceof TextureViewMemoryLayout)) {\r\n                        throw new Exception(`Texture added to bind data \"${pBindName}\" but binding does not expect a texture.`, this);\r\n                    }\r\n\r\n                    // Extend buffer usage based on if it is a storage or not.\r\n                    if (lBindLayout.storageType !== StorageBindingType.None) {\r\n                        pData.texture.extendUsage(TextureUsage.Storage);\r\n                    } else {\r\n                        pData.texture.extendUsage(TextureUsage.TextureBinding);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n\r\n                default: {\r\n                    throw new Exception(`Unsupported resource added to bind data \"${pBindName}\".`, this);\r\n                }\r\n            }\r\n\r\n            // Remove invalidationlistener from old data.\r\n            const lOldData: GpuResourceObject | undefined = this.mBindData.get(pBindName);\r\n            if (lOldData) {\r\n                const lBindDataInvalidationListener: BindGroupDataInvalidationListener | undefined = this.mDataInvalidationListener.get(lOldData);\r\n                if (lBindDataInvalidationListener) {\r\n                    lOldData.removeInvalidationListener(lBindDataInvalidationListener);\r\n                }\r\n            }\r\n\r\n            // Set data.\r\n            this.mBindData.set(pBindName, pData);\r\n\r\n            // Trigger update data is invalid.\r\n            pData.addInvalidationListener(() => {\r\n                this.invalidate(BindGroupInvalidationType.NativeRebuild);\r\n            }, GpuResourceObjectInvalidationType.ResourceRebuild);\r\n\r\n            // Trigger update on data change. \r\n            this.invalidate(BindGroupInvalidationType.NativeRebuild);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate native gpu bind data group.\r\n     */\r\n    protected override generateNative(): GPUBindGroup {\r\n        // Invalidate group.\r\n        this.invalidate(BindGroupInvalidationType.NativeRebuild);\r\n\r\n        const lEntryList: Array<GPUBindGroupEntry> = new Array<GPUBindGroupEntry>();\r\n\r\n        for (const lBindname of this.layout.orderedBindingNames) {\r\n            // Read bind data.\r\n            const lBindData: GpuResourceObject | undefined = this.mBindData.get(lBindname);\r\n            if (!lBindData) {\r\n                throw new Exception(`Data for binding \"${lBindname}\" is not set.`, this);\r\n            }\r\n\r\n            // Read bind layout.\r\n            const lBindLayout: Readonly<BindLayout> = this.layout.getBind(lBindname);\r\n\r\n            // Set resource to group entry for each \r\n            const lGroupEntry: GPUBindGroupEntry = { binding: lBindLayout.index, resource: <any>null };\r\n\r\n            // Buffer bind.\r\n            if (lBindData instanceof GpuBuffer) {\r\n                lGroupEntry.resource = { buffer: lBindData.native };\r\n\r\n                // Fix buffer size when it has dynamic offsets.\r\n                if (lBindLayout.hasDynamicOffset) {\r\n                    lGroupEntry.resource.size = (<BaseBufferMemoryLayout>lBindLayout.layout).fixedSize;\r\n                }\r\n\r\n                lEntryList.push(lGroupEntry);\r\n                continue;\r\n            }\r\n\r\n            // Sampler bind\r\n            if (lBindData instanceof TextureSampler) {\r\n                lGroupEntry.resource = lBindData.native;\r\n                lEntryList.push(lGroupEntry);\r\n                continue;\r\n            }\r\n\r\n            // Texture bind.\r\n            if (lBindData instanceof GpuTextureView) {\r\n                lGroupEntry.resource = lBindData.native;\r\n\r\n                lEntryList.push(lGroupEntry);\r\n                continue;\r\n            }\r\n\r\n            throw new Exception(`Bind type for \"${lBindData}\" not supported`, this);\r\n        }\r\n\r\n        return this.device.gpu.createBindGroup({\r\n            label: 'Bind-Group',\r\n            layout: this.layout.native,\r\n            entries: lEntryList\r\n        });\r\n    }\r\n}\r\n\r\nexport enum BindGroupInvalidationType {\r\n    NativeRebuild = 'NativeRebuild',\r\n}\r\n\r\ntype BindGroupDataInvalidationListener = () => void;","import { Exception } from '@kartoffelgames/core';\r\nimport { ArrayBufferMemoryLayout } from '../../buffer/memory_layout/array-buffer-memory-layout';\r\nimport { BaseBufferMemoryLayout } from '../../buffer/memory_layout/base-buffer-memory-layout';\r\nimport { PrimitiveBufferMemoryLayout } from '../../buffer/memory_layout/primitive-buffer-memory-layout';\r\nimport { StructBufferMemoryLayout } from '../../buffer/memory_layout/struct-buffer-memory-layout';\r\nimport { StructBufferMemoryLayoutSetup } from '../../buffer/memory_layout/struct-buffer-memory-layout-setup';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { BufferItemFormat } from '../../constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../../constant/buffer-item-multiplier.enum';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { BindGroupLayoutSetupData } from './bind-group-layout-setup';\r\n\r\n/**\r\n * Buffer memory layout setup object for bind group layouts.\r\n */\r\nexport class BindGroupLayoutBufferMemoryLayoutSetup extends GpuObjectChildSetup<BindGroupLayoutSetupData, MemoryLayoutCallback> {\r\n    private readonly mAlignmentType: BufferAlignmentType;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pSetupReference - Setup references.\r\n     * @param pAlignmentType - Buffers alignment type.\r\n     * @param pDataCallback - Data callback.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<BindGroupLayoutSetupData>, pAlignmentType: BufferAlignmentType, pDataCallback: MemoryLayoutCallback) {\r\n        super(pSetupReference, pDataCallback);\r\n\r\n        this.mAlignmentType = pAlignmentType;\r\n    }\r\n\r\n    /**\r\n     * Inner type as array.\r\n     * \r\n     * @param pSize - Optional. Set size fixed.\r\n     *  \r\n     * @returns array setup. \r\n     */\r\n    public withArray(pSize: number = -1): BindGroupLayoutBufferMemoryLayoutSetup {\r\n        return new BindGroupLayoutBufferMemoryLayoutSetup(this.setupReferences, this.mAlignmentType, (pMemoryLayout: BaseBufferMemoryLayout) => {\r\n            const lLayout: ArrayBufferMemoryLayout = new ArrayBufferMemoryLayout(this.device, {\r\n                arraySize: pSize,\r\n                innerType: pMemoryLayout\r\n            });\r\n\r\n            this.sendData(lLayout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Inner type as primitive.\r\n     * \r\n     * @param pPrimitiveFormat - Primitive format.\r\n     * @param pPrimitiveMultiplier - Value multiplier.\r\n     */\r\n    public withPrimitive(pPrimitiveFormat: BufferItemFormat, pPrimitiveMultiplier: BufferItemMultiplier): void {\r\n        // Validate for 32bit formats.\r\n        if (pPrimitiveFormat !== BufferItemFormat.Float32 && pPrimitiveFormat !== BufferItemFormat.Uint32 && pPrimitiveFormat !== BufferItemFormat.Sint32) {\r\n            throw new Exception('Uniform layout must be a 32bit format.', this);\r\n        }\r\n\r\n        const lLayout: PrimitiveBufferMemoryLayout = new PrimitiveBufferMemoryLayout(this.device, {\r\n            alignmentType: this.mAlignmentType,\r\n            primitiveFormat: pPrimitiveFormat,\r\n            primitiveMultiplier: pPrimitiveMultiplier,\r\n        });\r\n\r\n        // Send created data.\r\n        this.sendData(lLayout);\r\n    }\r\n\r\n    /**\r\n     * Inner type as struct\r\n     * \r\n     * @param pSetupCall - Struct setup call.\r\n     */\r\n    public withStruct(pSetupCall: (pSetup: StructBufferMemoryLayoutSetup) => void): void {\r\n        // Create and setup struct buffer memory layout.\r\n        const lLayout: StructBufferMemoryLayout = new StructBufferMemoryLayout(this.device, this.mAlignmentType);\r\n        lLayout.setup(pSetupCall);\r\n\r\n        // Send created data.\r\n        this.sendData(lLayout);\r\n    }\r\n}\r\n\r\ntype MemoryLayoutCallback = (pMemoryLayout: BaseBufferMemoryLayout) => void;","import { BaseMemoryLayout } from '../../base-memory-layout';\r\nimport { BaseBufferMemoryLayout } from '../../buffer/memory_layout/base-buffer-memory-layout';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { SamplerType } from '../../constant/sampler-type.enum';\r\nimport { TextureFormat } from '../../constant/texture-format.enum';\r\nimport { TextureViewDimension } from '../../constant/texture-view-dimension.enum';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { SamplerMemoryLayout } from '../../texture/memory_layout/sampler-memory-layout';\r\nimport { TextureViewMemoryLayout } from '../../texture/memory_layout/texture-view-memory-layout';\r\nimport { BindGroupLayoutBufferMemoryLayoutSetup } from './bind-group-layout-buffer-memory-layout-setup';\r\nimport { BindGroupLayoutSetupData } from './bind-group-layout-setup';\r\n\r\n/**\r\n * Child setup object to set types to single bindings.\r\n */\r\nexport class BindGroupLayoutMemoryLayoutSetup extends GpuObjectChildSetup<BindGroupLayoutSetupData, MemoryLayoutCallback> {\r\n    private readonly mAlignmentType: BufferAlignmentType;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pSetupReference - Setup references.\r\n     * @param pAlignmentType - Buffers alignment type.\r\n     * @param pDataCallback - Data callback.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<BindGroupLayoutSetupData>, pAlignmentType: BufferAlignmentType, pDataCallback: MemoryLayoutCallback) {\r\n        super(pSetupReference, pDataCallback);\r\n\r\n        this.mAlignmentType = pAlignmentType;\r\n    }\r\n\r\n    /**\r\n     * Memory layout as buffer with optional dynamic offsets.\r\n     * Dynamic offsets are only available for fixed size layouts.\r\n     * \r\n     * @param pDynamicOffsets - Number of available dynamic offsets.\r\n     * \r\n     * @returns buffer setup.\r\n     */\r\n    public asBuffer(pHasDynamicOffset: boolean = false): BindGroupLayoutBufferMemoryLayoutSetup {\r\n        return new BindGroupLayoutBufferMemoryLayoutSetup(this.setupReferences, this.mAlignmentType, (pMemoryLayout: BaseBufferMemoryLayout) => {\r\n            this.sendData({\r\n                layout: pMemoryLayout,\r\n                hasDynamicOffset: pHasDynamicOffset\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Memory layout as sampler.\r\n     * \r\n     * @param pSamplerType - Sampler type.\r\n     */\r\n    public asSampler(pSamplerType: SamplerType): void {\r\n        const lLayout: SamplerMemoryLayout = new SamplerMemoryLayout(this.device, pSamplerType);\r\n\r\n        // Send created data.\r\n        this.sendData({\r\n            layout: lLayout,\r\n            hasDynamicOffset: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Memory layout as texture.\r\n     * \r\n     * @param pTextureDimension - Texture dimension.\r\n     * @param pTextureFormat - Texture format.\r\n     * @param pTextureBindType - Texture binding.\r\n     */\r\n    public asTexture(pTextureDimension: TextureViewDimension, pTextureFormat: TextureFormat): void {\r\n        const lLayout: TextureViewMemoryLayout = new TextureViewMemoryLayout(this.device, {\r\n            dimension: pTextureDimension,\r\n            format: pTextureFormat,\r\n            multisampled: false\r\n        });\r\n\r\n        // Send created data.\r\n        this.sendData({\r\n            layout: lLayout,\r\n            hasDynamicOffset: false\r\n        });\r\n    }\r\n}\r\n\r\nexport type BindGroupBindingMemoryLayoutSetuData = {\r\n    layout: BaseMemoryLayout;\r\n    hasDynamicOffset: boolean;\r\n};\r\ntype MemoryLayoutCallback = (pMemoryLayout: BindGroupBindingMemoryLayoutSetuData) => void;","import { BaseMemoryLayout } from '../../base-memory-layout';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { ComputeStage } from '../../constant/compute-stage.enum';\r\nimport { StorageBindingType } from '../../constant/storage-binding-type.enum';\r\nimport { GpuObjectSetup } from '../../gpu_object/gpu-object-setup';\r\nimport { BindGroupBindingMemoryLayoutSetuData, BindGroupLayoutMemoryLayoutSetup } from './bind-group-layout-memory-layout-setup';\r\n\r\n/**\r\n * setup object to add bindings to bind group layouts.\r\n */\r\nexport class BindGroupLayoutSetup extends GpuObjectSetup<BindGroupLayoutSetupData> {\r\n    /**\r\n     * Add binding to group.\r\n     * \r\n     * @param pName - Binding name.\r\n     * @param pIndex - - Binding index.\r\n     * @param pUsage - Buffer usage.\r\n     * @param pVisibility - Visibility.\r\n     * @param pAccessMode - Access mode.\r\n     */\r\n    public binding(pIndex: number, pName: string, pVisibility: ComputeStage, pStorageBinding?: StorageBindingType): BindGroupLayoutMemoryLayoutSetup {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Create empty bind layout.\r\n        const lBind: BindLayoutSetupData = {\r\n            name: pName,\r\n            index: pIndex,\r\n            visibility: pVisibility,\r\n            layout: null,\r\n            storageType: pStorageBinding ?? StorageBindingType.None,\r\n            hasDynamicOffset: false,\r\n        };\r\n\r\n        // Set layout.\r\n        this.setupData.bindings.push(lBind);\r\n\r\n        // Aligment type of memory layout. When it is not a storage buffer then is is a uniform buffer.\r\n        const lAlignmentType: BufferAlignmentType = (lBind.storageType === StorageBindingType.None) ? BufferAlignmentType.Uniform : BufferAlignmentType.Storage;\r\n\r\n        // Create layout memory layout.\r\n        return new BindGroupLayoutMemoryLayoutSetup(this.setupReferences, lAlignmentType, (pMemoryLayout: BindGroupBindingMemoryLayoutSetuData) => {\r\n            lBind.layout = pMemoryLayout.layout;\r\n            lBind.hasDynamicOffset = pMemoryLayout.hasDynamicOffset;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill in default data before the setup starts.\r\n     * \r\n     * @param pDataReference - Setup data reference.\r\n     */\r\n    protected override fillDefaultData(pDataReference: BindGroupLayoutSetupData): void {\r\n        pDataReference.bindings = new Array<BindLayoutSetupData>();\r\n    }\r\n}\r\n\r\ntype BindLayoutSetupData = {\r\n    name: string;\r\n    index: number;\r\n    layout: BaseMemoryLayout | null;\r\n    visibility: ComputeStage;\r\n    storageType: StorageBindingType;\r\n    hasDynamicOffset: boolean;\r\n};\r\n\r\nexport type BindGroupLayoutSetupData = {\r\n    bindings: Array<BindLayoutSetupData>;\r\n};","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { BaseMemoryLayout } from '../../base-memory-layout';\r\nimport { BaseBufferMemoryLayout } from '../../buffer/memory_layout/base-buffer-memory-layout';\r\nimport { ComputeStage } from '../../constant/compute-stage.enum';\r\nimport { GpuLimit } from '../../constant/gpu-limit.enum';\r\nimport { StorageBindingType } from '../../constant/storage-binding-type.enum';\r\nimport { TextureFormatCapability } from '../../device/capabilities/gpu-texture-format-capabilities';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject, GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { IGpuObjectNative } from '../../gpu_object/interface/i-gpu-object-native';\r\nimport { IGpuObjectSetup } from '../../gpu_object/interface/i-gpu-object-setup';\r\nimport { SamplerMemoryLayout } from '../../texture/memory_layout/sampler-memory-layout';\r\nimport { TextureViewMemoryLayout } from '../../texture/memory_layout/texture-view-memory-layout';\r\nimport { BindGroup } from '../bind_group/bind-group';\r\nimport { BindGroupLayoutSetup, BindGroupLayoutSetupData } from './bind-group-layout-setup';\r\n\r\n/**\r\n * Bind group layout. Fixed at creation. \r\n */\r\nexport class BindGroupLayout extends GpuObject<GPUBindGroupLayout, '', BindGroupLayoutSetup> implements IGpuObjectNative<GPUBindGroupLayout>, IGpuObjectSetup<BindGroupLayoutSetup> {\r\n    private readonly mBindings: Dictionary<string, BindLayout>;\r\n    private mHasDynamicOffset: boolean;\r\n    private readonly mName: string;\r\n    private readonly mOrderedBindingNames: Array<string>;\r\n    private readonly mResourceCounter: BindGroupLayoutResourceCounter;\r\n\r\n    /**\r\n     * Bindgroup has a dynamic offset binding.\r\n     */\r\n    public get hasDynamicOffset(): boolean {\r\n        return this.mHasDynamicOffset;\r\n    }\r\n\r\n    /**\r\n     * Bind group name.\r\n     */\r\n    public get name(): string {\r\n        return this.mName;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUBindGroupLayout {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Get binding names ordered by index.\r\n     */\r\n    public get orderedBindingNames(): Array<string> {\r\n        // Ensure setup.\r\n        this.ensureSetup();\r\n\r\n        return this.mOrderedBindingNames;\r\n    }\r\n\r\n    /**\r\n     * Resource counter.\r\n     */\r\n    public get resourceCounter(): Readonly<BindGroupLayoutResourceCounter> {\r\n        return this.mResourceCounter;\r\n    }\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Gpu Device reference.\r\n     * @param pName - Name of binding group.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pName: string) {\r\n        super(pDevice);\r\n\r\n        // Set binding group name.\r\n        this.mName = pName;\r\n        this.mHasDynamicOffset = false;\r\n        this.mResourceCounter = {\r\n            storageDynamicOffset: 0,\r\n            uniformDynamicOffset: 0,\r\n            sampler: 0,\r\n            sampledTextures: 0,\r\n            storageTextures: 0,\r\n            storageBuffers: 0,\r\n            uniformBuffers: 0\r\n        };\r\n\r\n        // Init bindings.\r\n        this.mBindings = new Dictionary<string, BindLayout>();\r\n        this.mOrderedBindingNames = new Array<string>();\r\n    }\r\n\r\n    /**\r\n     * Create new bind group from layout.\r\n     * \r\n     * @returns new bind group.\r\n     */\r\n    public create(): BindGroup {\r\n        // Ensure setup.\r\n        this.ensureSetup();\r\n\r\n        return new BindGroup(this.device, this);\r\n    }\r\n\r\n    /**\r\n     * Get full bind information.\r\n     * @param pName - Bind name.\r\n     */\r\n    public getBind(pName: string): Readonly<BindLayout> {\r\n        // Ensure setup.\r\n        this.ensureSetup();\r\n\r\n        if (!this.mBindings.has(pName)) {\r\n            throw new Exception(`Bind ${pName} does not exist.`, this);\r\n        }\r\n\r\n        return this.mBindings.get(pName)!;\r\n    }\r\n\r\n    /**\r\n     * Call setup.\r\n     * \r\n     * @param pSetupCallback - Setup callback.\r\n     *\r\n     * @returns — this. \r\n     */\r\n    public override setup(pSetupCallback?: ((pSetup: BindGroupLayoutSetup) => void) | undefined): this {\r\n        return super.setup(pSetupCallback);\r\n    }\r\n\r\n    /**\r\n     * Generate native bind data group layout object.\r\n     */\r\n    protected override generateNative(): GPUBindGroupLayout {\r\n        const lEntryList: Array<GPUBindGroupLayoutEntry> = new Array<GPUBindGroupLayoutEntry>();\r\n\r\n        // Generate layout entry for each binding.\r\n        for (const lEntry of this.mBindings.values()) {\r\n            // Generate default properties.\r\n            const lLayoutEntry: GPUBindGroupLayoutEntry = {\r\n                visibility: lEntry.visibility,\r\n                binding: lEntry.index\r\n            };\r\n\r\n            // Different binding for different\r\n            switch (true) {\r\n                // Buffer layouts.\r\n                case lEntry.layout instanceof BaseBufferMemoryLayout: {\r\n                    // Convert bind type info bufer binding type.\r\n                    const lBufferBindingType: GPUBufferBindingType = (() => {\r\n                        switch (lEntry.storageType) {\r\n                            case StorageBindingType.None: {\r\n                                return 'uniform';\r\n                            }\r\n                            case StorageBindingType.Read: {\r\n                                return 'read-only-storage';\r\n                            }\r\n                            default: {\r\n                                return 'storage';\r\n                            }\r\n                        }\r\n                    })();\r\n\r\n                    // Create buffer layout with all optional values.\r\n                    lLayoutEntry.buffer = {\r\n                        type: lBufferBindingType,\r\n                        minBindingSize: 0,\r\n                        hasDynamicOffset: lEntry.hasDynamicOffset\r\n                    } satisfies Required<GPUBufferBindingLayout>;\r\n\r\n                    break;\r\n                }\r\n\r\n                // Sampler layouts.\r\n                case lEntry.layout instanceof SamplerMemoryLayout: {\r\n                    // Create sampler layout with all optional values.\r\n                    lLayoutEntry.sampler = {\r\n                        type: lEntry.layout.samplerType\r\n                    } satisfies Required<GPUSamplerBindingLayout>;\r\n\r\n                    break;\r\n                }\r\n\r\n                // Texture layouts.\r\n                case lEntry.layout instanceof TextureViewMemoryLayout: {\r\n                    // Uniform bind when without storage binding.\r\n                    if (lEntry.storageType === StorageBindingType.None) {\r\n                        // Read texture capabilities.\r\n                        const lTextureFormatCapabilities: TextureFormatCapability = this.device.formatValidator.capabilityOf(lEntry.layout.format);\r\n\r\n                        // Create image texture bind information.\r\n                        lLayoutEntry.texture = {\r\n                            sampleType: lTextureFormatCapabilities.sampleTypes.primary,\r\n                            multisampled: lEntry.layout.multisampled,\r\n                            viewDimension: lEntry.layout.dimension\r\n                        } satisfies Required<GPUTextureBindingLayout>;\r\n\r\n                        break;\r\n                    }\r\n\r\n                    // Storage textures need to be write only.\r\n                    let lStorageAccess: GPUStorageTextureAccess;\r\n                    switch (lEntry.storageType) {\r\n                        case StorageBindingType.ReadWrite: {\r\n                            lStorageAccess = 'read-write';\r\n                            break;\r\n                        }\r\n                        case StorageBindingType.Write: {\r\n                            lStorageAccess = 'write-only';\r\n                            break;\r\n                        }\r\n                        case StorageBindingType.Read: {\r\n                            lStorageAccess = 'read-only';\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // Create storage texture bind information.\r\n                    lLayoutEntry.storageTexture = {\r\n                        access: lStorageAccess!,\r\n                        format: lEntry.layout.format as GPUTextureFormat,\r\n                        viewDimension: lEntry.layout.dimension,\r\n                    } satisfies Required<GPUStorageTextureBindingLayout>;\r\n                }\r\n            }\r\n\r\n            // Add binding entry to bindings.\r\n            lEntryList.push(lLayoutEntry);\r\n        }\r\n\r\n        // Create binding group layout.\r\n        return this.device.gpu.createBindGroupLayout({\r\n            label: `BindGroupLayout-${this.mName}`,\r\n            entries: lEntryList\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Setup bind group.\r\n     * \r\n     * @param pReferences - Setup data references. \r\n     */\r\n    protected override onSetup(pReferences: BindGroupLayoutSetupData): void {\r\n        // Check capabilities.\r\n        const lMaxBindGroupCount: number = this.device.capabilities.getLimit(GpuLimit.MaxBindingsPerBindGroup);\r\n        if (pReferences.bindings.length > (lMaxBindGroupCount - 1)) {\r\n            throw new Exception(`Bind group \"${this.mName}\" exceeds max binding count.`, this);\r\n        }\r\n\r\n        // Validation set.\r\n        const lBindingIndices: Set<number> = new Set<number>();\r\n        const lBindingName: Set<string> = new Set<string>();\r\n\r\n        // Add each binding.\r\n        for (const lBinding of pReferences.bindings) {\r\n            // Validate layout.\r\n            if (!lBinding.layout) {\r\n                throw new Exception(`Bind group binding \"${lBinding.name}\" has no setup layout.`, this);\r\n            }\r\n\r\n            // Only buffers can have a dynamic offset.\r\n            if (lBinding.hasDynamicOffset && !(lBinding.layout instanceof BaseBufferMemoryLayout)) {\r\n                throw new Exception(`Bind group binding \"${lBinding.name}\" must be a buffer binding to have dynamic offsets.`, this);\r\n            }\r\n\r\n            // Buffers with dynamic offsets must be fixed in size.\r\n            if (lBinding.hasDynamicOffset && (<BaseBufferMemoryLayout>lBinding.layout).variableSize > 0) {\r\n                throw new Exception(`Bind group binding \"${lBinding.name}\" must have a fixed buffer layout to have dynamic offsets.`, this);\r\n            }\r\n\r\n            // Layout validation for 32bit formats are in setup.\r\n\r\n            // Shallow copy binding.\r\n            this.mBindings.set(lBinding.name, {\r\n                name: lBinding.name,\r\n                index: lBinding.index,\r\n                layout: lBinding.layout,\r\n                visibility: lBinding.visibility,\r\n                storageType: lBinding.storageType,\r\n                hasDynamicOffset: lBinding.hasDynamicOffset\r\n            });\r\n\r\n            // Set dynamic offset flag when any is active.\r\n            if (lBinding.hasDynamicOffset) {\r\n                this.mHasDynamicOffset = true;\r\n\r\n                // Count dynamic resources\r\n                if (lBinding.storageType === StorageBindingType.None) {\r\n                    this.mResourceCounter.uniformDynamicOffset++;\r\n                } else {\r\n                    this.mResourceCounter.storageDynamicOffset++;\r\n                }\r\n            }\r\n\r\n            // Validate dublicate indices.\r\n            if (lBindingIndices.has(lBinding.index) || lBindingName.has(lBinding.name)) {\r\n                throw new Exception(`Binding \"${lBinding.name}\" with index \"${lBinding.index}\" added twice.`, this);\r\n            }\r\n\r\n            // Add binding index to already binded indices. \r\n            lBindingIndices.add(lBinding.index);\r\n            lBindingName.add(lBinding.name);\r\n\r\n            // Add binding ordered by index.\r\n            this.mOrderedBindingNames[lBinding.index] = lBinding.name;\r\n\r\n            // Count resources.\r\n            switch (true) {\r\n                case lBinding.layout instanceof SamplerMemoryLayout: {\r\n                    this.mResourceCounter.sampler++;\r\n                    break;\r\n                }\r\n                case lBinding.layout instanceof TextureViewMemoryLayout: {\r\n                    if (lBinding.storageType === StorageBindingType.None) {\r\n                        this.mResourceCounter.sampledTextures++;\r\n                    } else {\r\n                        this.mResourceCounter.storageTextures++;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n                case lBinding.layout instanceof BaseBufferMemoryLayout: {\r\n                    if (lBinding.storageType === StorageBindingType.None) {\r\n                        this.mResourceCounter.uniformBuffers++;\r\n                    } else {\r\n                        this.mResourceCounter.storageBuffers++;\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create setup object. Return null to skip any setups.\r\n     * \r\n     * @param pReferences - Setup references.\r\n     * \r\n     * @returns setup.\r\n     */\r\n    protected override onSetupObjectCreate(pReferences: GpuObjectSetupReferences<BindGroupLayoutSetupData>): BindGroupLayoutSetup {\r\n        return new BindGroupLayoutSetup(pReferences);\r\n    }\r\n}\r\n\r\nexport type BindLayout = {\r\n    name: string,\r\n    index: number,\r\n    layout: BaseMemoryLayout;\r\n    visibility: ComputeStage;\r\n    storageType: StorageBindingType;\r\n    hasDynamicOffset: boolean;\r\n};\r\n\r\ntype BindGroupLayoutResourceCounter = {\r\n    // Dynamic resources.\r\n    storageDynamicOffset: number;\r\n    uniformDynamicOffset: number;\r\n\r\n    // Texture resource.\r\n    sampler: number;\r\n    sampledTextures: number;\r\n    storageTextures: number;\r\n\r\n    // Buffers.\r\n    storageBuffers: number;\r\n    uniformBuffers: number;\r\n};","import { Dictionary } from '@kartoffelgames/core';\r\nimport { ComputeStage } from '../constant/compute-stage.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject } from '../gpu_object/gpu-object';\r\nimport { GpuObjectInvalidationReasons } from '../gpu_object/gpu-object-invalidation-reasons';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\nimport { ShaderComputeModule } from '../shader/shader-compute-module';\r\nimport { PipelineLayout } from './pipeline-layout';\r\n\r\n/**\r\n * Gpu pipeline resource for computing with a compute shader. \r\n */\r\nexport class ComputePipeline extends GpuObject<GPUComputePipeline | null, ComputePipelineInvalidationType> implements IGpuObjectNative<GPUComputePipeline | null> {\r\n    private mLoadedPipeline: GPUComputePipeline | null;\r\n    private readonly mParameter: Dictionary<ComputeStage, Record<string, number>>;\r\n    private readonly mShaderModule: ShaderComputeModule;\r\n\r\n    /**\r\n     * Pipeline layout.\r\n     */\r\n    public get layout(): PipelineLayout {\r\n        return this.mShaderModule.shader.layout;\r\n    }\r\n\r\n    /**\r\n     * Pipeline shader.\r\n     */\r\n    public get module(): ShaderComputeModule {\r\n        return this.mShaderModule;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUComputePipeline | null {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * Set default data.\r\n     * @param pDevice - Device.\r\n     * @param pShader - Pipeline shader.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pShader: ShaderComputeModule) {\r\n        super(pDevice);\r\n        this.mShaderModule = pShader;\r\n\r\n        // Loaded pipeline for async creation.\r\n        this.mLoadedPipeline = null;\r\n\r\n        // Pipeline constants.\r\n        this.mParameter = new Dictionary<ComputeStage, Record<string, number>>();\r\n    }\r\n\r\n    /**\r\n     * Set optional parameter of pipeline.\r\n     * \r\n     * @param pParameterName - name of parameter.\r\n     * @param pValue - Value.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public setParameter(pParameterName: string, pValue: number): this {\r\n        const lParameterUsage: Set<ComputeStage> | undefined = this.mShaderModule.shader.parameter(pParameterName);\r\n\r\n        // Set parameter for each assigned compute stage.\r\n        for (const lUsage of lParameterUsage) {\r\n            // Init parameters for computestage when not set.\r\n            if (!this.mParameter.has(lUsage)) {\r\n                this.mParameter.set(lUsage, {});\r\n            }\r\n\r\n            // Set value for compute stage.\r\n            this.mParameter.get(lUsage)![pParameterName] = pValue;\r\n        }\r\n\r\n        // Generate pipeline anew.\r\n        this.invalidate(ComputePipelineInvalidationType.NativeRebuild);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Generate native gpu pipeline data layout.\r\n     */\r\n    protected override generateNative(_pLastNative: GPUComputePipeline | null, pInvalidationReason: GpuObjectInvalidationReasons<ComputePipelineInvalidationType>): GPUComputePipeline | null {\r\n        // When a pipeline was loaded, return the loaded instead of creating a new pipeline.\r\n        if (this.mLoadedPipeline !== null && !pInvalidationReason.has(ComputePipelineInvalidationType.NativeRebuild)) {\r\n            const lLoadedPipeline: GPUComputePipeline = this.mLoadedPipeline;\r\n            this.mLoadedPipeline = null;\r\n\r\n            return lLoadedPipeline;\r\n        }\r\n\r\n        // Construct basic GPUComputePipelineDescriptor.\r\n        const lPipelineDescriptor: GPUComputePipelineDescriptor = {\r\n            layout: this.mShaderModule.shader.layout.native,\r\n            compute: {\r\n                module: this.mShaderModule.shader.native,\r\n                entryPoint: this.mShaderModule.entryPoint,\r\n                constants: this.mParameter.get(ComputeStage.Compute) ?? {}\r\n            }\r\n        };\r\n\r\n        // Load pipeline asyncron and update native after promise resolve.\r\n        this.device.gpu.createComputePipelineAsync(lPipelineDescriptor).then((pPipeline: GPUComputePipeline) => {\r\n            this.mLoadedPipeline = pPipeline;\r\n            this.invalidate(ComputePipelineInvalidationType.NativeLoaded);\r\n        });\r\n\r\n        // Null as long as pipeline is loading.\r\n        return null;\r\n    }\r\n}\r\n\r\nexport enum ComputePipelineInvalidationType {\r\n    NativeRebuild = 'NativeRebuild',\r\n    NativeLoaded = 'NativeLoaded',\r\n}","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { GpuLimit } from '../constant/gpu-limit.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject } from '../gpu_object/gpu-object';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\nimport { BindGroupLayout } from './bind_group_layout/bind-group-layout';\r\nimport { PipelineData } from './pipeline_data/pipeline-data';\r\nimport { PipelineDataSetup } from './pipeline_data/pipeline-data-setup';\r\n\r\n/**\r\n * Gpu pipeline layout.\r\n */\r\nexport class PipelineLayout extends GpuObject<GPUPipelineLayout> implements IGpuObjectNative<GPUPipelineLayout> {\r\n    private readonly mBindGroupNames: Dictionary<string, number>;\r\n    private readonly mBindGroups: Dictionary<number, BindGroupLayout>;\r\n\r\n    /**\r\n     * Bind group names.\r\n     */\r\n    public get groups(): Array<string> {\r\n        return [...this.mBindGroupNames.keys()];\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUPipelineLayout {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Gpu Device reference.\r\n     * @param pInitialGroups - Initial groups.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pInitialGroups: Dictionary<number, BindGroupLayout>) {\r\n        super(pDevice);\r\n\r\n        // Init storages.\r\n        this.mBindGroupNames = new Dictionary<string, number>();\r\n        this.mBindGroups = new Dictionary<number, BindGroupLayout>();\r\n\r\n        // Pipeline global resource counter.\r\n        const lMaxCounter = {\r\n            dynamicStorageBuffers: 0,\r\n            dynamicUniformBuffers: 0,\r\n            sampler: 0,\r\n            sampledTextures: 0,\r\n            storageTextures: 0,\r\n            uniformBuffers: 0,\r\n            storageBuffers: 0\r\n        };\r\n\r\n        // Set initial work groups.\r\n        const lMaxBindGroupCount: number = this.device.capabilities.getLimit(GpuLimit.MaxBindGroups);\r\n        for (const [lGroupIndex, lGroup] of pInitialGroups) {\r\n            if (lGroupIndex > (lMaxBindGroupCount - 1)) {\r\n                throw new Exception(`Bind group limit exceeded with index: ${lGroupIndex} and group \"${lGroup.name}\"`, this);\r\n            }\r\n\r\n            // Restrict dublicate names.\r\n            if (this.mBindGroupNames.has(lGroup.name)) {\r\n                throw new Exception(`Can add group name \"${lGroup.name}\" only once.`, this);\r\n            }\r\n\r\n            // Restrict dublicate locations.\r\n            if (this.mBindGroups.has(lGroupIndex)) {\r\n                throw new Exception(`Can add group location index \"${lGroupIndex}\" only once.`, this);\r\n            }\r\n\r\n            // Set name to index mapping.\r\n            this.mBindGroupNames.set(lGroup.name, lGroupIndex);\r\n\r\n            // Set bind groups to bind group.\r\n            this.mBindGroups.set(lGroupIndex, lGroup);\r\n\r\n            // Count counters.\r\n            lMaxCounter.dynamicStorageBuffers += lGroup.resourceCounter.storageDynamicOffset;\r\n            lMaxCounter.dynamicUniformBuffers += lGroup.resourceCounter.uniformDynamicOffset;\r\n            lMaxCounter.sampler += lGroup.resourceCounter.sampler;\r\n            lMaxCounter.sampledTextures += lGroup.resourceCounter.sampledTextures;\r\n            lMaxCounter.storageTextures += lGroup.resourceCounter.storageTextures;\r\n            lMaxCounter.uniformBuffers += lGroup.resourceCounter.uniformBuffers;\r\n            lMaxCounter.storageBuffers += lGroup.resourceCounter.storageBuffers;\r\n        }\r\n\r\n        // Max dynamic storage buffers.\r\n        if (lMaxCounter.dynamicStorageBuffers > this.device.capabilities.getLimit(GpuLimit.MaxDynamicStorageBuffersPerPipelineLayout)) {\r\n            throw new Exception(`Max dynamic storage buffer reached pipeline. Max allowed \"${this.device.capabilities.getLimit(GpuLimit.MaxDynamicStorageBuffersPerPipelineLayout)}\" has \"${lMaxCounter.dynamicStorageBuffers}\"`, this);\r\n        }\r\n\r\n        // Max dynamic unform buffers.\r\n        if (lMaxCounter.dynamicUniformBuffers > this.device.capabilities.getLimit(GpuLimit.MaxDynamicUniformBuffersPerPipelineLayout)) {\r\n            throw new Exception(`Max dynamic uniform buffer reached pipeline. Max allowed \"${this.device.capabilities.getLimit(GpuLimit.MaxDynamicUniformBuffersPerPipelineLayout)}\" has \"${lMaxCounter.dynamicUniformBuffers}\"`, this);\r\n        }\r\n\r\n        // Max sampler. Ignore shader stage limitation. Just apply it to the complete pipeline.\r\n        if (lMaxCounter.sampler > this.device.capabilities.getLimit(GpuLimit.MaxSamplersPerShaderStage)) {\r\n            throw new Exception(`Max sampler reached pipeline. Max allowed \"${this.device.capabilities.getLimit(GpuLimit.MaxSamplersPerShaderStage)}\" has \"${lMaxCounter.sampler}\"`, this);\r\n        }\r\n\r\n        // Max sampled textures. Ignore shader stage limitation. Just apply it to the complete pipeline.\r\n        if (lMaxCounter.sampledTextures > this.device.capabilities.getLimit(GpuLimit.MaxSampledTexturesPerShaderStage)) {\r\n            throw new Exception(`Max sampled textures reached pipeline. Max allowed \"${this.device.capabilities.getLimit(GpuLimit.MaxSampledTexturesPerShaderStage)}\" has \"${lMaxCounter.sampledTextures}\"`, this);\r\n        }\r\n\r\n        // Max storage textures. Ignore shader stage limitation. Just apply it to the complete pipeline.\r\n        if (lMaxCounter.storageTextures > this.device.capabilities.getLimit(GpuLimit.MaxStorageTexturesPerShaderStage)) {\r\n            throw new Exception(`Max storage textures reached pipeline. Max allowed \"${this.device.capabilities.getLimit(GpuLimit.MaxStorageTexturesPerShaderStage)}\" has \"${lMaxCounter.storageTextures}\"`, this);\r\n        }\r\n\r\n        // Max storage buffers. Ignore shader stage limitation. Just apply it to the complete pipeline.\r\n        if (lMaxCounter.storageBuffers > this.device.capabilities.getLimit(GpuLimit.MaxStorageBuffersPerShaderStage)) {\r\n            throw new Exception(`Max storage buffers reached pipeline. Max allowed \"${this.device.capabilities.getLimit(GpuLimit.MaxStorageBuffersPerShaderStage)}\" has \"${lMaxCounter.storageBuffers}\"`, this);\r\n        }\r\n\r\n        // Max uniform buffers. Ignore shader stage limitation. Just apply it to the complete pipeline.\r\n        if (lMaxCounter.uniformBuffers > this.device.capabilities.getLimit(GpuLimit.MaxUniformBuffersPerShaderStage)) {\r\n            throw new Exception(`Max uniform buffers reached pipeline. Max allowed \"${this.device.capabilities.getLimit(GpuLimit.MaxUniformBuffersPerShaderStage)}\" has \"${lMaxCounter.uniformBuffers}\"`, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get bind group layout by name.\r\n     * \r\n     * @param pGroupName - Group name.\r\n     */\r\n    public getGroupLayout(pGroupName: string): BindGroupLayout {\r\n        const lGroupIndex: number | undefined = this.mBindGroupNames.get(pGroupName);\r\n\r\n        // Throw on unaccessable group.\r\n        if (typeof lGroupIndex === 'undefined') {\r\n            throw new Exception(`Bind group layout (${pGroupName}) does not exists.`, this);\r\n        }\r\n\r\n        // Bind group should allways exist.\r\n        return this.mBindGroups.get(lGroupIndex)!;\r\n    }\r\n\r\n    /**\r\n     * Get group binding index by name.\r\n     * \r\n     * @param pGroupName - Group name.\r\n     * \r\n     * @returns group binding index. \r\n     */\r\n    public groupIndex(pGroupName: string): number {\r\n        const lBindGroupIndex: number | undefined = this.mBindGroupNames.get(pGroupName);\r\n        if (typeof lBindGroupIndex === 'undefined') {\r\n            throw new Exception(`Pipeline does not contain a group with name \"${pGroupName}\".`, this);\r\n        }\r\n\r\n        return lBindGroupIndex;\r\n    }\r\n\r\n    /**\r\n     * Create pipeline data.\r\n     * \r\n     * @param pBindData - Any bind group of pipeline layout.\r\n     * \r\n     * @returns validated pipeline data. \r\n     */\r\n    public withData(pSetupCallback: (pSetup: PipelineDataSetup) => void): PipelineData {\r\n        return new PipelineData(this.device, this).setup(pSetupCallback);\r\n    }\r\n\r\n    /**\r\n     * Generate native gpu pipeline data layout.\r\n     */\r\n    protected override generateNative(): GPUPipelineLayout {\r\n        // Generate pipeline layout from bind group layouts.\r\n        const lPipelineLayoutDescriptor = { bindGroupLayouts: new Array<GPUBindGroupLayout>() };\r\n        for (const [lGroupIndex, lBindGroupLayout] of this.mBindGroups) {\r\n            lPipelineLayoutDescriptor.bindGroupLayouts[lGroupIndex] = lBindGroupLayout.native;\r\n        }\r\n\r\n        // Validate continunity.\r\n        if (this.mBindGroups.size !== lPipelineLayoutDescriptor.bindGroupLayouts.length) {\r\n            throw new Exception(`Bind group gap detected. Group not set.`, this);\r\n        }\r\n\r\n        // Generate pipeline layout from descriptor.\r\n        return this.device.gpu.createPipelineLayout(lPipelineLayoutDescriptor);\r\n    }\r\n}","import { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { PipelineDataSetupData } from './pipeline-data-setup';\r\n\r\n/**\r\n * Child setup for a single pipeline data group binding buffer.\r\n */\r\nexport class PipelineDataGroupSetup extends GpuObjectChildSetup<PipelineDataSetupData, PipelineDataGroupSetupDataCallback> {\r\n    /**\r\n     * Apply offset to bind group.\r\n     * \r\n     * @param pBindingName - Name of one of binding sof group. \r\n     * @param pOffsetIndex - Offset index.\r\n     * \r\n     * @returns this.\r\n     */\r\n    public withOffset(pBindingName: string, pOffsetIndex: number): this {\r\n        this.sendData({\r\n            bindingName: pBindingName,\r\n            offsetIndex: pOffsetIndex\r\n        });\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport type PipelineDataGroupSetupData = {\r\n    bindingName: string;\r\n    offsetIndex: number;\r\n};\r\ntype PipelineDataGroupSetupDataCallback = (pBindOffset: PipelineDataGroupSetupData) => void;","import { Dictionary } from '@kartoffelgames/core';\r\nimport { BindGroup } from '../bind_group/bind-group';\r\nimport { PipelineDataGroupSetup, PipelineDataGroupSetupData } from './pipeline-data-group-setup';\r\nimport { GpuObjectSetup } from '../../gpu_object/gpu-object-setup';\r\n\r\n/**\r\n * Setup object for a pipline data.\r\n */\r\nexport class PipelineDataSetup extends GpuObjectSetup<PipelineDataSetupData> {\r\n    /**\r\n     * Add bind group to pipeline data.\r\n     * \r\n     * @param pBindGroup - Bind group.\r\n     * \r\n     * @returns group setup. \r\n     */\r\n    public addGroup(pBindGroup: BindGroup): PipelineDataGroupSetup {\r\n        // Create binding group information.\r\n        const lBindGroup: PipelineDataSetupDataGroup = {\r\n            bindGroup: pBindGroup,\r\n            offsets: new Dictionary<string, number>()\r\n        };\r\n\r\n        this.setupData.groups.push(lBindGroup);\r\n\r\n        // Can be used to add \"optional\" binding offsets to bind group.\r\n        return new PipelineDataGroupSetup(this.setupReferences, (pBindingOffsets: PipelineDataGroupSetupData) => {\r\n            lBindGroup.offsets.set(pBindingOffsets.bindingName, pBindingOffsets.offsetIndex);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill in default data before the setup starts.\r\n     * \r\n     * @param pDataReference - Setup data reference.\r\n     */\r\n    protected override fillDefaultData(pDataReference: PipelineDataSetupData): void {\r\n        pDataReference.groups = new Array<PipelineDataSetupDataGroup>();\r\n    }\r\n}\r\n\r\nexport type PipelineDataSetupDataGroup = {\r\n    offsets: Dictionary<string, number>;\r\n    bindGroup: BindGroup;\r\n};\r\n\r\nexport type PipelineDataSetupData = {\r\n    groups: Array<PipelineDataSetupDataGroup>;\r\n};\r\n","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { BaseBufferMemoryLayout } from '../../buffer/memory_layout/base-buffer-memory-layout';\r\nimport { GpuLimit } from '../../constant/gpu-limit.enum';\r\nimport { StorageBindingType } from '../../constant/storage-binding-type.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject, GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { IGpuObjectSetup } from '../../gpu_object/interface/i-gpu-object-setup';\r\nimport { BindGroup, BindGroupInvalidationType } from '../bind_group/bind-group';\r\nimport { BindLayout } from '../bind_group_layout/bind-group-layout';\r\nimport { PipelineLayout } from '../pipeline-layout';\r\nimport { PipelineDataSetup, PipelineDataSetupData, PipelineDataSetupDataGroup } from './pipeline-data-setup';\r\n\r\n/**\r\n * Bundle of bind groups.\r\n * Handles validation and offset calculations.\r\n */\r\nexport class PipelineData extends GpuObject<null, PipelineDataInvalidationType, PipelineDataSetup> implements IGpuObjectSetup<PipelineDataSetup> {\r\n    private readonly mBindData: Dictionary<string, PipelineDataGroup>;\r\n    private readonly mInvalidationListener: () => void;\r\n    private readonly mLayout: PipelineLayout;\r\n    private readonly mOrderedBindData: Array<PipelineDataGroup>;\r\n\r\n    /**\r\n     * Orderes pipeline data.\r\n     */\r\n    public get data(): Array<PipelineDataGroup> {\r\n        // Setup needed.\r\n        this.ensureSetup();\r\n\r\n        return this.mOrderedBindData;\r\n    }\r\n\r\n    /**\r\n     * Pipline layout of data.\r\n     */\r\n    public get layout(): PipelineLayout {\r\n        return this.mLayout;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pPipelineLayout - Pipeline data. \r\n     * @param pBindData - Every bind data of pipeline layout.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pPipelineLayout: PipelineLayout) {\r\n        super(pDevice);\r\n\r\n        // Set pipeline layout.\r\n        this.mLayout = pPipelineLayout;\r\n\r\n        // Easy access dictionary.\r\n        this.mBindData = new Dictionary<string, PipelineDataGroup>();\r\n\r\n        // Invalidate pipeline data when any data has changed.\r\n        this.mInvalidationListener = () => {\r\n            this.invalidate(PipelineDataInvalidationType.Data);\r\n        };\r\n\r\n        this.mOrderedBindData = new Array<PipelineDataGroup>();\r\n    }\r\n\r\n    /**\r\n     * Deconstruct native object.\r\n     */\r\n    public override deconstruct(): void {\r\n        super.deconstruct();\r\n\r\n        // Remove all invalidation listener from bind groups.\r\n        for (const lBindGroup of this.mOrderedBindData) {\r\n            lBindGroup.bindGroup.removeInvalidationListener(this.mInvalidationListener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get bind group by name.\r\n     * \r\n     * @param pBindGroupName  - Bind group name.\r\n     * \r\n     * @returns bind group. \r\n     */\r\n    public group(pBindGroupName: string): PipelineDataGroup {\r\n        if (!this.mBindData.has(pBindGroupName)) {\r\n            throw new Exception(`Bind group \"${pBindGroupName}\" does not exists in pipeline data.`, this);\r\n        }\r\n\r\n        return this.mBindData.get(pBindGroupName)!;\r\n    }\r\n\r\n    /**\r\n     * Call setup.\r\n     * \r\n     * @param pSetupCallback - Setup callback.\r\n     *\r\n     * @returns — this. \r\n     */\r\n    public override setup(pSetupCallback?: ((pSetup: PipelineDataSetup) => void) | undefined): this {\r\n        return super.setup(pSetupCallback);\r\n    }\r\n\r\n    /**\r\n     * Setup pipeline data.\r\n     * \r\n     * @param pReferences - Setup data references. \r\n     */\r\n    protected override onSetup(pReferences: PipelineDataSetupData): void {\r\n        // All bind groups must be set.\r\n        if (this.mLayout.groups.length !== pReferences.groups.length) {\r\n            // Generate a better error message.\r\n            for (const lGroupName of this.mLayout.groups) {\r\n                // Get and validate existence of set bind group.\r\n                const lBindGroupSetupData: PipelineDataSetupDataGroup | undefined = pReferences.groups.find((pBindGroup) => { return pBindGroup.bindGroup.layout.name === lGroupName; });\r\n                if (!lBindGroupSetupData) {\r\n                    throw new Exception(`Required bind group \"${lGroupName}\" not set.`, this);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Validate and order bind data.\r\n        for (const lBindGroupSetupData of pReferences.groups) {\r\n            const lBindGroupName: string = lBindGroupSetupData.bindGroup.layout.name;\r\n            const lBindGroupIndex: number = this.mLayout.groupIndex(lBindGroupName);\r\n            const lBindGroup: BindGroup = lBindGroupSetupData.bindGroup;\r\n\r\n            // Only distinct bind group names.\r\n            if (this.mOrderedBindData[lBindGroupIndex]) {\r\n                throw new Exception(`Bind group \"${lBindGroupName}\" was added multiple times to render pass step.`, this);\r\n            }\r\n\r\n            // Validate same layout bind layout.\r\n            const lBindGroupLayout = this.mLayout.getGroupLayout(lBindGroupName);\r\n            if (lBindGroup.layout !== lBindGroupLayout) {\r\n                throw new Exception(`Source bind group layout for \"${lBindGroupName}\" does not match target layout.`, this);\r\n            }\r\n\r\n            // Restrict double names.\r\n            if (this.mBindData.has(lBindGroupName)) {\r\n                throw new Exception(`Bind group \"${lBindGroupName}\" name already exists in pipeline data.`, this);\r\n            }\r\n\r\n            // When the bind group has dynamic offsets, build a array of it.\r\n            const lPipelineDataGroup: PipelineDataGroup = {\r\n                offsetId: '',\r\n                bindGroup: lBindGroup,\r\n                offsets: new Array<number>()\r\n            };\r\n            if (lBindGroupLayout.hasDynamicOffset) {\r\n                for (const lBindingName of lBindGroupLayout.orderedBindingNames) {\r\n                    // Skip any binding not having a dynamic offset.\r\n                    const lBindingLayout: Readonly<BindLayout> = lBindGroupLayout.getBind(lBindingName);\r\n                    if (!lBindingLayout.hasDynamicOffset) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Dynamic bindings need a offset.\r\n                    if (!lBindGroupSetupData.offsets.has(lBindingName)) {\r\n                        throw new Exception(`Binding \"${lBindingName}\" of group \"${lBindGroupName} requires a offset.\"`, this);\r\n                    }\r\n\r\n                    // Read correct alignment limitations for storage type.\r\n                    const lOffsetAlignment: number = (() => {\r\n                        if (lBindingLayout.storageType === StorageBindingType.None) {\r\n                            return this.device.capabilities.getLimit(GpuLimit.MinUniformBufferOffsetAlignment);\r\n                        } else {\r\n                            return this.device.capabilities.getLimit(GpuLimit.MinStorageBufferOffsetAlignment);\r\n                        }\r\n                    })();\r\n\r\n                    // Read and validate assigned offset index of binding.\r\n                    const lBindingDynamicOffsetIndex: number = lBindGroupSetupData.offsets.get(lBindingName)!;\r\n\r\n                    // Get offset byte count.\r\n                    const lBufferMemoryLayout: BaseBufferMemoryLayout = lBindingLayout.layout as BaseBufferMemoryLayout;\r\n                    const lSingleLayoutLength: number = Math.ceil(lBufferMemoryLayout.fixedSize / lOffsetAlignment) * lOffsetAlignment;\r\n\r\n                    // Read buffer size and validate if it meets offset bound.\r\n                    const lBufferSize: number = lBindGroup.data(lBindingName).getRaw<GpuBuffer>().size;\r\n                    if (Math.floor(lBufferSize / lSingleLayoutLength) <= lBindingDynamicOffsetIndex) {\r\n                        throw new Exception(`Binding \"${lBindingName}\" of group \"${lBindGroupName} exceedes dynamic offset limits.\"`, this);\r\n                    }\r\n\r\n                    // Save offset byte count in order.\r\n                    lPipelineDataGroup.offsets.push(lSingleLayoutLength * lBindingDynamicOffsetIndex);\r\n                }\r\n\r\n                // Rebuild offset \"id\".\r\n                lPipelineDataGroup.offsetId = lPipelineDataGroup.offsets.join('-');\r\n            }\r\n\r\n            // Set name to bind group mapping.\r\n            this.mBindData.set(lBindGroupName, lPipelineDataGroup);\r\n\r\n            // Set bind group.\r\n            this.mOrderedBindData[lBindGroupIndex] = lPipelineDataGroup;\r\n\r\n            // Invalidate native data when bind group has changed.\r\n            lBindGroup.addInvalidationListener(this.mInvalidationListener, BindGroupInvalidationType.NativeRebuild);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create setup object. Return null to skip any setups.\r\n     * \r\n     * @param pReferences - Setup references.\r\n     * \r\n     * @returns setup.\r\n     */\r\n    protected override onSetupObjectCreate(pReferences: GpuObjectSetupReferences<PipelineDataSetupData>): PipelineDataSetup {\r\n        return new PipelineDataSetup(pReferences);\r\n    }\r\n}\r\n\r\nexport type PipelineDataGroup = {\r\n    offsetId: string;\r\n    bindGroup: BindGroup;\r\n    offsets: Array<number>;\r\n};\r\n\r\nexport enum PipelineDataInvalidationType {\r\n    Data = 'DataChange',\r\n}","import { Exception } from '@kartoffelgames/core';\r\nimport { TextureOperation } from '../../constant/texture-operation.enum';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectSetup } from '../../gpu_object/gpu-object-setup';\r\nimport { CanvasTexture } from '../../texture/canvas-texture';\r\nimport { GpuTextureView } from '../../texture/gpu-texture-view';\r\nimport { RenderTargetSetupTextures, RenderTargetTextureSetup } from './render-targets-texture-setup';\r\n\r\n/**\r\n * Render target setup.\r\n */\r\nexport class RenderTargetsSetup extends GpuObjectSetup<RenderTargetSetupData> {\r\n    private readonly mMultisampled: boolean;\r\n\r\n    /**\r\n     * Constructor\r\n     * \r\n     * @param pSetupReference -Setup references.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<RenderTargetSetupData>, pMultisampled: boolean) {\r\n        super(pSetupReference);\r\n\r\n        // Set static multisampled state.\r\n        this.mMultisampled = pMultisampled;\r\n    }\r\n\r\n    /**\r\n     * Add color target.\r\n     * \r\n     * @param pName - Color target name.\r\n     * @param pLocationIndex - Target location index. \r\n     * @param pKeepOnEnd - Keep information after render pass end.\r\n     * @param pClearValue - Clear value on render pass start. Omit to never clear.\r\n     */\r\n    public addColor(pName: string, pLocationIndex: number, pKeepOnEnd: boolean = true, pClearValue?: { r: number; g: number; b: number; a: number; }): RenderTargetTextureSetup {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Convert render attachment to a location mapping. \r\n        const lTarget: RenderTargetsColorTargetSetupData = {\r\n            name: pName,\r\n            index: pLocationIndex,\r\n            clearValue: pClearValue ?? null,\r\n            storeOperation: (pKeepOnEnd) ? TextureOperation.Keep : TextureOperation.Clear,\r\n            textureView: null,\r\n            resolveCanvas: null\r\n        };\r\n\r\n        // Add to color attachment list.\r\n        this.setupData.colorTargets.push(lTarget);\r\n\r\n        // Return texture setup. Set texture on texture resolve.\r\n        return new RenderTargetTextureSetup(this.setupReferences, this.mMultisampled, (pTexture: RenderTargetSetupTextures) => {\r\n            lTarget.textureView = pTexture.view;\r\n            lTarget.resolveCanvas = pTexture.resolveCanvas;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add depth and stencil target. Actual usage of depth and stencil is the used texture format.\r\n     * \r\n     * @param pDepthKeepOnEnd - Keep information after render pass end.\r\n     * @param pDepthClearValue - Clear value on render pass start. Omit to never clear.\r\n     * @param pStencilKeepOnEnd - Keep information after render pass end.\r\n     * @param pStencilClearValue - Clear value on render pass start. Omit to never clear.\r\n     */\r\n    public addDepthStencil(pDepthKeepOnEnd: boolean | null = null, pDepthClearValue: number | null = null, pStencilKeepOnEnd: boolean | null = null, pStencilClearValue: number | null = null): RenderTargetTextureSetup {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        this.setupData.depthStencil = {\r\n            textureView: null\r\n        };\r\n\r\n        // Setup depth when values where set.\r\n        if (pDepthKeepOnEnd !== null || pDepthClearValue !== null) {\r\n            this.setupData.depthStencil.depth = {\r\n                clearValue: pDepthClearValue ?? null,\r\n                storeOperation: (pDepthKeepOnEnd) ? TextureOperation.Keep : TextureOperation.Clear,\r\n            };\r\n        }\r\n\r\n        // Setup stencil when values where set.\r\n        if (pStencilKeepOnEnd !== null || pStencilClearValue !== null) {\r\n            this.setupData.depthStencil.stencil = {\r\n                clearValue: pStencilClearValue ?? null,\r\n                storeOperation: (pStencilKeepOnEnd) ? TextureOperation.Keep : TextureOperation.Clear,\r\n            };\r\n        }\r\n\r\n        // Return texture setup. Set texture on texture resolve.\r\n        return new RenderTargetTextureSetup(this.setupReferences, this.mMultisampled, (pTexture: RenderTargetSetupTextures) => {\r\n            // Restrict used texture type to a frame buffer.\r\n            if (pTexture.resolveCanvas) {\r\n                throw new Exception(`Can't use a canvas texture as depth or stencil texture.`, this);\r\n            }\r\n\r\n            this.setupData.depthStencil!.textureView = pTexture.view;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill in default data before the setup starts.\r\n     * \r\n     * @param pDataReference - Setup data reference.\r\n     */\r\n    protected override fillDefaultData(pDataReference: RenderTargetSetupData): void {\r\n        pDataReference.colorTargets = new Array<RenderTargetsColorTargetSetupData>();\r\n    }\r\n}\r\n\r\ntype RenderTargetsDepthStencilTextureSetupData = {\r\n    textureView: GpuTextureView | null;\r\n    depth?: {\r\n        clearValue: number | null;\r\n        storeOperation: TextureOperation;\r\n    };\r\n    stencil?: {\r\n        clearValue: number | null;\r\n        storeOperation: TextureOperation;\r\n    };\r\n};\r\n\r\ntype RenderTargetsColorTargetSetupData = {\r\n    name: string;\r\n    index: number;\r\n    clearValue: { r: number; g: number; b: number; a: number; } | null;\r\n    storeOperation: TextureOperation;\r\n    textureView: GpuTextureView | null;\r\n    resolveCanvas: CanvasTexture | null;\r\n};\r\n\r\nexport interface RenderTargetSetupData {\r\n    colorTargets: Array<RenderTargetsColorTargetSetupData>;\r\n    depthStencil?: RenderTargetsDepthStencilTextureSetupData;\r\n}\r\n","import { TextureDimension } from '../../constant/texture-dimension.enum';\r\nimport { TextureFormat } from '../../constant/texture-format.enum';\r\nimport { TextureViewDimension } from '../../constant/texture-view-dimension.enum';\r\nimport { GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { CanvasTexture } from '../../texture/canvas-texture';\r\nimport { GpuTexture } from '../../texture/gpu-texture';\r\nimport { GpuTextureView } from '../../texture/gpu-texture-view';\r\nimport { RenderTargetSetupData } from './render-targets-setup';\r\n\r\n/**\r\n * Child setup to add or create textures to render target bundles.\r\n */\r\nexport class RenderTargetTextureSetup extends GpuObjectChildSetup<RenderTargetSetupData, RenderTargetTextureCallback> {\r\n    private readonly mMultisampled: boolean;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pSetupReference - Setup references.\r\n     * @param pMultisampled - Multisample state.\r\n     * @param pDataCallback - Setup data callback.\r\n     */\r\n    public constructor(pSetupReference: GpuObjectSetupReferences<RenderTargetSetupData>, pMultisampled: boolean, pDataCallback: RenderTargetTextureCallback) {\r\n        super(pSetupReference, pDataCallback);\r\n\r\n        // Set static multisampled state.\r\n        this.mMultisampled = pMultisampled;\r\n    }\r\n\r\n    /**\r\n     * Create new color render target.\r\n     * \r\n     * @param pFormat - Texture format.\r\n     * @param pResolve - Optional resolve target.\r\n     * \r\n     * @returns created texture view.\r\n     */\r\n    public new(pFormat: TextureFormat, pResolve: CanvasTexture | null = null): GpuTextureView {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Create new texture.\r\n        const lTexture: GpuTexture = new GpuTexture(this.device, {\r\n            format: pFormat,\r\n            dimension: TextureDimension.TwoDimension,\r\n            multisampled: this.mMultisampled\r\n        });\r\n\r\n        // Create view from texture.\r\n        const lTextureView: GpuTextureView = lTexture.useAs(TextureViewDimension.TwoDimension);\r\n\r\n        // Callback texture.\r\n        this.sendData({\r\n            view: lTextureView,\r\n            resolveCanvas: pResolve\r\n        });\r\n\r\n        return lTextureView;\r\n    }\r\n\r\n    /**\r\n     * Use a existing texture.\r\n     * \r\n     * @param pTexture - Existing texture.\r\n     */\r\n    public use(pTextureView: GpuTextureView, pResolve: CanvasTexture | null = null): GpuTextureView {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Callback texture.\r\n        this.sendData({\r\n            view: pTextureView,\r\n            resolveCanvas: pResolve\r\n        });\r\n\r\n        // Return same data.\r\n        return pTextureView;\r\n    }\r\n}\r\n\r\nexport type RenderTargetSetupTextures = {\r\n    view: GpuTextureView,\r\n    resolveCanvas: CanvasTexture | null;\r\n};\r\n\r\ntype RenderTargetTextureCallback = (pTexture: RenderTargetSetupTextures) => void;","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { GpuLimit } from '../../constant/gpu-limit.enum';\r\nimport { TextureAspect } from '../../constant/texture-aspect.enum';\r\nimport { TextureOperation } from '../../constant/texture-operation.enum';\r\nimport { TextureUsage } from '../../constant/texture-usage.enum';\r\nimport { TextureViewDimension } from '../../constant/texture-view-dimension.enum';\r\nimport { TextureFormatCapability } from '../../device/capabilities/gpu-texture-format-capabilities';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject, GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { GpuResourceObjectInvalidationType } from '../../gpu_object/gpu-resource-object';\r\nimport { IGpuObjectNative } from '../../gpu_object/interface/i-gpu-object-native';\r\nimport { IGpuObjectSetup } from '../../gpu_object/interface/i-gpu-object-setup';\r\nimport { CanvasTexture } from '../../texture/canvas-texture';\r\nimport { GpuTextureView } from '../../texture/gpu-texture-view';\r\nimport { RenderTargetSetupData, RenderTargetsSetup } from './render-targets-setup';\r\n\r\n/**\r\n * Group of textures with the same size and multisample level.\r\n * Bundled for attaching it to render passes.\r\n */\r\nexport class RenderTargets extends GpuObject<GPURenderPassDescriptor, RenderTargetsInvalidationType, RenderTargetsSetup> implements IGpuObjectSetup<RenderTargetsSetup>, IGpuObjectNative<GPURenderPassDescriptor> {\r\n    private readonly mColorTargetNames: Dictionary<string, number>;\r\n    private readonly mColorTargets: Array<RenderTargetsColorTarget>;\r\n    private mDepthStencilTarget: RenderTargetsDepthStencilTexture | null;\r\n    private readonly mMultisampled: boolean;\r\n    private readonly mResolveCanvasList: Array<RenderTargetResolveCanvas>;\r\n    private readonly mSize: TextureSize;\r\n    private readonly mTargetViewUpdateQueue: Set<number>;\r\n\r\n    /**\r\n     * Color attachment names ordered by index.\r\n     */\r\n    public get colorTargetNames(): Array<string> {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        // Create color attachment list in order.\r\n        const lColorAttachmentNameList: Array<string> = new Array<string>();\r\n        for (const lColorAttachment of this.mColorTargets.values()) {\r\n            lColorAttachmentNameList[lColorAttachment.index] = lColorAttachment.name;\r\n        }\r\n\r\n        return lColorAttachmentNameList;\r\n    }\r\n\r\n    /**\r\n     * Stencil attachment texture.\r\n     */\r\n    public get hasDepth(): boolean {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        return !!this.mDepthStencilTarget?.depth;\r\n    }\r\n\r\n    /**\r\n     * Stencil attachment texture.\r\n     */\r\n    public get hasStencil(): boolean {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        return !!this.mDepthStencilTarget?.stencil;\r\n    }\r\n\r\n    /**\r\n     * Render target height.\r\n     */\r\n    public get height(): number {\r\n        return this.mSize.height;\r\n    }\r\n\r\n    /**\r\n     * Render target multisample level.\r\n     */\r\n    public get multisampled(): boolean {\r\n        return this.mMultisampled;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPURenderPassDescriptor {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * List of all resolve canvases.\r\n     */\r\n    public get resolveCanvasList(): Array<RenderTargetResolveCanvas> {\r\n        return this.mResolveCanvasList;\r\n    }\r\n\r\n    /**\r\n     * Render target height.\r\n     */\r\n    public get width(): number {\r\n        return this.mSize.width;\r\n    }\r\n\r\n    /**\r\n     * Constuctor.\r\n     * @param pDevice - Gpu device reference.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pMultisampled: boolean) {\r\n        super(pDevice);\r\n\r\n        // Set statics.\r\n        this.mMultisampled = pMultisampled;\r\n\r\n        // Set default size. \r\n        this.mSize = { width: 1, height: 1 };\r\n\r\n        // Setup initial data.\r\n        this.mDepthStencilTarget = null;\r\n        this.mColorTargets = new Array<RenderTargetsColorTarget>();\r\n        this.mColorTargetNames = new Dictionary<string, number>();\r\n        this.mTargetViewUpdateQueue = new Set<number>();\r\n        this.mResolveCanvasList = new Array<RenderTargetResolveCanvas>();\r\n    }\r\n\r\n    /**\r\n     * Get color target by name.\r\n     * \r\n     * @param pTargetName - Target name.\r\n     *  \r\n     * @returns target texture. \r\n     */\r\n    public colorTarget(pTargetName: string): GpuTextureView {\r\n        // Read index of color target.\r\n        const lColorTargetIndex: number | null = this.mColorTargetNames.get(pTargetName) ?? null;\r\n        if (lColorTargetIndex === null) {\r\n            throw new Exception(`Color target \"${pTargetName}\" does not exists.`, this);\r\n        }\r\n\r\n        return this.mColorTargets[lColorTargetIndex].texture.target;\r\n    }\r\n\r\n    /**\r\n     * Get depth attachment texture.\r\n     */\r\n    public depthStencilTarget(): GpuTextureView {\r\n        // Ensure setup was called.\r\n        this.ensureSetup();\r\n\r\n        // No depth texture setup.\r\n        if (!this.mDepthStencilTarget || !this.mDepthStencilTarget.depth) {\r\n            throw new Exception(`Depth or stencil target does not exists.`, this);\r\n        }\r\n\r\n        return this.mDepthStencilTarget.target;\r\n    }\r\n\r\n    /**\r\n     * Check for color target existence.\r\n     * \r\n     * @param pTargetName - Color target name.\r\n     * \r\n     * @returns true when color target exists. \r\n     */\r\n    public hasColorTarget(pTargetName: string): boolean {\r\n        return this.mColorTargetNames.has(pTargetName);\r\n    }\r\n\r\n    /**\r\n     * Resize all render targets.\r\n     * \r\n     * @param pWidth - New texture width.\r\n     * @param pHeight - New texture height.\r\n     * @param pMultisampleLevel - New texture multisample level.\r\n     *  \r\n     * @returns this. \r\n     */\r\n    public resize(pHeight: number, pWidth: number): this {\r\n        // Set 2D size dimensions\r\n        this.mSize.width = pWidth;\r\n        this.mSize.height = pHeight;\r\n\r\n        // Apply resize for all textures.\r\n        // This trigger RenderTargetsInvalidationType.NativeUpdate for textures set in setTextureInvalidationListener.\r\n        this.applyResize();\r\n\r\n        // Trigger resize invalidation. Does not automaticly trigger rebuild.\r\n        this.invalidate(RenderTargetsInvalidationType.Resize);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Call setup.\r\n     * Exposes internal setup.\r\n     * \r\n     * @param pSetupCallback - Setup callback. \r\n     * \r\n     * @returns this. \r\n     */\r\n    public override setup(pSetupCallback?: ((pSetup: RenderTargetsSetup) => void) | undefined): this {\r\n        return super.setup(pSetupCallback);\r\n    }\r\n\r\n    /**\r\n     * Generate native gpu bind data group.\r\n     */\r\n    protected override generateNative(): GPURenderPassDescriptor {\r\n        // Create color attachments.\r\n        const lColorAttachments: Array<GPURenderPassColorAttachment> = new Array<GPURenderPassColorAttachment>();\r\n        for (const lColorAttachment of this.mColorTargets) {\r\n            // Convert Texture operation to load operations.\r\n            const lStoreOperation: GPUStoreOp = lColorAttachment.storeOperation === TextureOperation.Keep ? 'store' : 'discard';\r\n\r\n            // Create basic color attachment.\r\n            const lPassColorAttachment: GPURenderPassColorAttachment = {\r\n                view: lColorAttachment.texture!.target.native,\r\n                storeOp: lStoreOperation,\r\n                loadOp: 'clear' // Placeholder\r\n            };\r\n\r\n            // Set clear value \r\n            if (lColorAttachment.clearValue !== null) {\r\n                lPassColorAttachment.clearValue = lColorAttachment.clearValue;\r\n                lPassColorAttachment.loadOp = 'clear';\r\n            } else {\r\n                lPassColorAttachment.loadOp = 'load';\r\n            }\r\n\r\n            lColorAttachments.push(lPassColorAttachment satisfies GPURenderPassColorAttachment);\r\n        }\r\n\r\n        // Create descriptor with color attachments.\r\n        const lDescriptor: GPURenderPassDescriptor = {\r\n            colorAttachments: lColorAttachments\r\n        };\r\n\r\n        // Set optional depth attachment.\r\n        if (this.mDepthStencilTarget) {\r\n            const lDepthStencilTexture: GpuTextureView = this.mDepthStencilTarget.target;\r\n\r\n            // Add texture view for depth.\r\n            lDescriptor.depthStencilAttachment = {\r\n                view: lDepthStencilTexture.native,\r\n            };\r\n\r\n            // Add depth values when depth formats are used.\r\n            if (this.mDepthStencilTarget.depth) {\r\n                // Set clear value of depth texture.\r\n                if (this.mDepthStencilTarget.depth.clearValue !== null) {\r\n                    lDescriptor.depthStencilAttachment.depthClearValue = this.mDepthStencilTarget.depth.clearValue;\r\n                    lDescriptor.depthStencilAttachment.depthLoadOp = 'clear';\r\n                } else {\r\n                    lDescriptor.depthStencilAttachment.depthLoadOp = 'load';\r\n                }\r\n\r\n                // Convert Texture operation to load operations.\r\n                lDescriptor.depthStencilAttachment.depthStoreOp = this.mDepthStencilTarget.depth.storeOperation === TextureOperation.Keep ? 'store' : 'discard';\r\n            }\r\n\r\n            // Add stencil values when stencil formats are used.\r\n            if (this.mDepthStencilTarget.stencil) {\r\n                // Set clear value of stencil texture.\r\n                if (this.mDepthStencilTarget.stencil.clearValue !== null) {\r\n                    lDescriptor.depthStencilAttachment.stencilClearValue = this.mDepthStencilTarget.stencil.clearValue;\r\n                    lDescriptor.depthStencilAttachment.stencilLoadOp = 'clear';\r\n                } else {\r\n                    lDescriptor.depthStencilAttachment.stencilLoadOp = 'load';\r\n                }\r\n\r\n                // Convert Texture operation to load operations.\r\n                lDescriptor.depthStencilAttachment.stencilStoreOp = this.mDepthStencilTarget.stencil.storeOperation === TextureOperation.Keep ? 'store' : 'discard';\r\n            }\r\n        }\r\n\r\n        return lDescriptor;\r\n    }\r\n\r\n    /**\r\n     * Setup object based on setup data.\r\n     * \r\n     * @param pReferenceData - Referenced setup data.\r\n     */\r\n    protected override onSetup(pReferenceData: RenderTargetSetupData): void {\r\n        // Enforce gpu color attachment limits.\r\n        const lMaxRenderTargets: number = this.device.capabilities.getLimit(GpuLimit.MaxColorAttachments);\r\n        if (pReferenceData.colorTargets.length > (lMaxRenderTargets - 1)) {\r\n            throw new Exception(`Max color targets count exeeced.`, this);\r\n        }\r\n\r\n        // Setup depth stencil targets.\r\n        if (pReferenceData.depthStencil) {\r\n            // Validate existence of depth stencil texture.\r\n            if (!pReferenceData.depthStencil.textureView) {\r\n                throw new Exception(`Depth/ stencil attachment defined but no texture was assigned.`, this);\r\n            }\r\n\r\n            // Only two dimensional textures.\r\n            if (pReferenceData.depthStencil.textureView.layout.dimension !== TextureViewDimension.TwoDimension) {\r\n                throw new Exception(`Color attachment can only two dimensional.`, this);\r\n            }\r\n\r\n            // Save setup texture.\r\n            this.mDepthStencilTarget = {\r\n                target: pReferenceData.depthStencil.textureView\r\n            };\r\n\r\n            // Add render attachment texture usage to depth stencil texture.\r\n            pReferenceData.depthStencil.textureView.texture.extendUsage(TextureUsage.RenderAttachment);\r\n\r\n            // Passthrough depth stencil texture changes.\r\n            this.setTextureInvalidationListener(pReferenceData.depthStencil.textureView, -1);\r\n\r\n            // Read capability of used depth stencil texture format.\r\n            const lFormatCapability: TextureFormatCapability = this.device.formatValidator.capabilityOf(pReferenceData.depthStencil.textureView.layout.format);\r\n\r\n            // Setup depth texture.\r\n            if (pReferenceData.depthStencil.depth) {\r\n                // Validate if depth texture\r\n                if (!lFormatCapability.aspects.has(TextureAspect.Depth)) {\r\n                    throw new Exception('Used texture for the depth texture attachment must have a depth aspect. ', this);\r\n                }\r\n\r\n                this.mDepthStencilTarget.depth = {\r\n                    clearValue: pReferenceData.depthStencil.depth.clearValue,\r\n                    storeOperation: pReferenceData.depthStencil.depth.storeOperation\r\n                };\r\n            }\r\n\r\n            // Setup stencil texture.\r\n            if (pReferenceData.depthStencil.stencil) {\r\n                // Validate if depth texture\r\n                if (!lFormatCapability.aspects.has(TextureAspect.Stencil)) {\r\n                    throw new Exception('Used texture for the stencil texture attachment must have a depth aspect. ', this);\r\n                }\r\n\r\n                this.mDepthStencilTarget.stencil = {\r\n                    clearValue: pReferenceData.depthStencil.stencil.clearValue,\r\n                    storeOperation: pReferenceData.depthStencil.stencil.storeOperation\r\n                };\r\n            }\r\n        }\r\n\r\n        // Setup color targets.\r\n        for (const lAttachment of pReferenceData.colorTargets.values()) {\r\n            // Validate existence of color texture.\r\n            if (!lAttachment.textureView) {\r\n                throw new Exception(`Color attachment \"${lAttachment.name}\" defined but no texture was assigned.`, this);\r\n            }\r\n\r\n            // No double names.\r\n            if (this.mColorTargetNames.has(lAttachment.name)) {\r\n                throw new Exception(`Color attachment name \"${lAttachment.name}\" can only be defined once.`, this);\r\n            }\r\n\r\n            // No double location indices.\r\n            if (this.mColorTargets[lAttachment.index]) {\r\n                throw new Exception(`Color attachment location index \"${lAttachment.index}\" can only be defined once.`, this);\r\n            }\r\n\r\n            // When a resolve canvas is specified, the texture must have the same texture format.\r\n            if (lAttachment.resolveCanvas && lAttachment.resolveCanvas.format !== lAttachment.textureView.layout.format) {\r\n                throw new Exception(`Color attachment can only be resolved into a canvas with the same texture format.`, this);\r\n            }\r\n\r\n            // Only two dimensional textures.\r\n            if (lAttachment.textureView.layout.dimension !== TextureViewDimension.TwoDimension) {\r\n                throw new Exception(`Color attachment can only two dimensional.`, this);\r\n            }\r\n\r\n            // Only two dimensional textures.\r\n            if (lAttachment.textureView.mipLevelStart !== 0) {\r\n                throw new Exception(`Color attachment can only rendered into mip level 0.`, this);\r\n            }\r\n\r\n            // Passthrough color texture changes. Any change.\r\n            this.setTextureInvalidationListener(lAttachment.textureView, lAttachment.index);\r\n\r\n            // Add render attachment texture usage to color texture.\r\n            lAttachment.textureView.texture.extendUsage(TextureUsage.RenderAttachment);\r\n\r\n            // Save color target name and index mapping.\r\n            this.mColorTargetNames.set(lAttachment.name, lAttachment.index);\r\n\r\n            // Set resolve canvas.\r\n            if (lAttachment.resolveCanvas) {\r\n                // Add copy source to texture usage to be copied into canvas.\r\n                lAttachment.textureView.texture.extendUsage(TextureUsage.CopySource);\r\n\r\n                this.mResolveCanvasList.push({\r\n                    source: lAttachment.textureView,\r\n                    canvas: lAttachment.resolveCanvas\r\n                });\r\n            }\r\n\r\n            // Convert setup into storage data.\r\n            this.mColorTargets[lAttachment.index] = {\r\n                name: lAttachment.name,\r\n                index: lAttachment.index,\r\n                clearValue: lAttachment.clearValue,\r\n                storeOperation: lAttachment.storeOperation,\r\n                texture: {\r\n                    target: lAttachment.textureView,\r\n                    resolveCanvas: lAttachment.resolveCanvas\r\n                }\r\n            };\r\n        }\r\n\r\n        // Validate attachment list.\r\n        if (this.mColorTargetNames.size !== this.mColorTargets.length) {\r\n            throw new Exception(`Color attachment locations must be in order.`, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On setup object creation. Create setup object.\r\n     * \r\n     * @param pReferences - Setup references.\r\n     * \r\n     * @returns build setup object. \r\n     */\r\n    protected override onSetupObjectCreate(pReferences: GpuObjectSetupReferences<RenderTargetSetupData>): RenderTargetsSetup {\r\n        return new RenderTargetsSetup(pReferences, this.mMultisampled);\r\n    }\r\n\r\n    /**\r\n     * Try to update views of pass descriptor.\r\n     * \r\n     * @param pNative - Native pass descriptor.\r\n     * @param pReasons - Update reason.\r\n     * \r\n     * @returns true when native was updated.\r\n     */\r\n    protected override updateNative(pNative: GPURenderPassDescriptor): boolean {\r\n        // Update depth stencil view. -1 Marks depth stencil texture updates. \r\n        if (this.mTargetViewUpdateQueue.has(-1) && pNative.depthStencilAttachment) {\r\n            pNative.depthStencilAttachment.view = this.mDepthStencilTarget!.target.native;\r\n\r\n            // Remove depth stencil from update queue.\r\n            this.mTargetViewUpdateQueue.delete(-1);\r\n        }\r\n\r\n        // Update color attachments.\r\n        for (const lTargetIndex of this.mTargetViewUpdateQueue) {\r\n            // Read current attachment.\r\n            const lCurrentAttachment: GPURenderPassColorAttachment = (<Array<GPURenderPassColorAttachment>>pNative.colorAttachments)[lTargetIndex];\r\n\r\n            // Read setup attachments.\r\n            const lColorAttachment = this.mColorTargets[lTargetIndex];\r\n\r\n            // Update view.\r\n            lCurrentAttachment.view = lColorAttachment.texture.target.native;\r\n        }\r\n\r\n        // Reset updateable views.\r\n        this.mTargetViewUpdateQueue.clear();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resize all textures.\r\n     */\r\n    private applyResize(): void {\r\n        // Update buffer texture sizes.\r\n        for (const lAttachment of this.mColorTargets) {\r\n            lAttachment.texture.target.texture.height = this.mSize.height;\r\n            lAttachment.texture.target.texture.width = this.mSize.width;\r\n\r\n            if (lAttachment.texture.resolveCanvas) {\r\n                lAttachment.texture.resolveCanvas.height = this.mSize.height;\r\n                lAttachment.texture.resolveCanvas.width = this.mSize.width;\r\n            }\r\n        }\r\n\r\n        // Update target texture sizes.\r\n        if (this.mDepthStencilTarget) {\r\n            this.mDepthStencilTarget.target.texture.height = this.mSize.height;\r\n            this.mDepthStencilTarget.target.texture.width = this.mSize.width;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add all needed texture invalidation listener for passthrow and descriptor invalidation. \r\n     * \r\n     * @param pTexture - Texture. \r\n     */\r\n    private setTextureInvalidationListener(pTexture: GpuTextureView, pTextureIndex: number): void {\r\n        // Update descriptor only on view changes.\r\n        pTexture.addInvalidationListener(() => {\r\n            // Invalidate.\r\n            this.invalidate(RenderTargetsInvalidationType.NativeUpdate);\r\n\r\n            // Set texture as updateable.\r\n            this.mTargetViewUpdateQueue.add(pTextureIndex);\r\n        }, GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n}\r\n\r\ntype TextureSize = {\r\n    width: number;\r\n    height: number;\r\n};\r\n\r\nexport type RenderTargetsDepthStencilTexture = {\r\n    target: GpuTextureView;\r\n    depth?: {\r\n        clearValue: number | null;\r\n        storeOperation: TextureOperation;\r\n    };\r\n    stencil?: {\r\n        clearValue: number | null;\r\n        storeOperation: TextureOperation;\r\n    };\r\n};\r\n\r\ntype RenderTargetsColorTexture = {\r\n    resolveCanvas: CanvasTexture | null;\r\n    target: GpuTextureView;\r\n};\r\n\r\nexport type RenderTargetResolveCanvas = {\r\n    canvas: CanvasTexture;\r\n    source: GpuTextureView;\r\n};\r\n\r\nexport type RenderTargetsColorTarget = {\r\n    name: string;\r\n    index: number;\r\n    clearValue: { r: number; g: number; b: number; a: number; } | null;\r\n    storeOperation: TextureOperation;\r\n    texture: RenderTargetsColorTexture;\r\n};\r\n\r\nexport enum RenderTargetsInvalidationType {\r\n    NativeUpdate = 'NativeUpdate',\r\n    Resize = 'Resize'\r\n}","import { CompareFunction } from '../../constant/compare-function.enum';\r\nimport { VertexFragmentPipelineDepthConfigurationData } from './vertex-fragment-pipeline';\r\n\r\n/**\r\n * Configuration object for pipeline depth target. \r\n */\r\nexport class VertexFragmentPipelineDepthConfiguration {\r\n    private readonly mCallback: VertexFragmentPipelineDepthConfigurationCallback;\r\n    private readonly mDataReference: VertexFragmentPipelineDepthConfigurationData;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pCallback - Data callback.\r\n     */\r\n    public constructor(pDataReference: VertexFragmentPipelineDepthConfigurationData, pCallback: VertexFragmentPipelineDepthConfigurationCallback) {\r\n        this.mCallback = pCallback;\r\n        this.mDataReference = pDataReference;\r\n    }\r\n\r\n    /**\r\n     * Set constant depth bias added to each fragment\r\n     * \r\n     * @param pFunction - Constant depth bias added to each fragment\r\n     * \r\n     * @returns this. \r\n     */\r\n    public bias(pBias: number): this {\r\n        // Set data.\r\n        this.mDataReference.depthBias = pBias;\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the maximum depth bias of a fragment. \r\n     * \r\n     * @param pFunction - The maximum depth bias of a fragment.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public biasClamp(pBias: number): this {\r\n        // Set data.\r\n        this.mDataReference.depthBiasClamp = pBias;\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set depth bias that scales with the fragment’s slope\r\n     * \r\n     * @param pFunction - Depth bias that scales with the fragment’s slope\r\n     * \r\n     * @returns this. \r\n     */\r\n    public biasSlopeScale(pBias: number): this {\r\n        // Set data.\r\n        this.mDataReference.depthBiasSlopeScale = pBias;\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the depth compare function.\r\n     * \r\n     * @param pFunction - Compare function\r\n     * \r\n     * @returns this. \r\n     */\r\n    public compareWith(pFunction: CompareFunction): this {\r\n        // Set data.\r\n        this.mDataReference.depthCompare = pFunction;\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Enable depth write.\r\n     * \r\n     * @param pEnable - Enable state of depth write.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public enableWrite(pEnable: boolean): this {\r\n        // Set data.\r\n        this.mDataReference.depthWriteEnabled = pEnable;\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport type VertexFragmentPipelineDepthConfigurationCallback = () => void;\r\n\r\n","import { CompareFunction } from '../../constant/compare-function.enum';\r\nimport { StencilOperation } from '../../constant/stencil-operation.enum';\r\nimport { VertexFragmentPipelineStencilConfigurationData } from './vertex-fragment-pipeline';\r\n\r\n/**\r\n * Configuration object for pipeline stencil target. \r\n */\r\nexport class VertexFragmentPipelineStencilConfiguration {\r\n    private readonly mCallback: VertexFragmentPipelineStencilConfigurationCallback;\r\n    private readonly mDataReference: VertexFragmentPipelineStencilConfigurationData;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pCallback - Data callback.\r\n     */\r\n    public constructor(pDataReference: VertexFragmentPipelineStencilConfigurationData, pCallback: VertexFragmentPipelineStencilConfigurationCallback) {\r\n        this.mCallback = pCallback;\r\n        this.mDataReference = pDataReference;\r\n    }\r\n\r\n    /**\r\n     * Back operations.\r\n     * \r\n     * @param pCompare - Compare function.\r\n     * @param pFailOperation - Operation on compare fail.\r\n     * @param pPassOperation  - Operation on compare pass.\r\n     * @param pDepthFailOperation  - Operation on depth compare fail.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public back(pCompare: CompareFunction, pFailOperation?: StencilOperation, pPassOperation?: StencilOperation, pDepthFailOperation?: StencilOperation): this {\r\n        // Set data.\r\n        this.mDataReference.stencilBack.compare = pCompare;\r\n\r\n        // Optionals.\r\n        if (pFailOperation) {\r\n            this.mDataReference.stencilBack.failOperation = pFailOperation;\r\n        }\r\n        if (pPassOperation) {\r\n            this.mDataReference.stencilBack.passOperation = pPassOperation;\r\n        }\r\n        if (pDepthFailOperation) {\r\n            this.mDataReference.stencilBack.depthFailOperation = pDepthFailOperation;\r\n        }\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Front operations.\r\n     * \r\n     * @param pCompare - Compare function.\r\n     * @param pFailOperation - Operation on compare fail.\r\n     * @param pPassOperation  - Operation on compare pass.\r\n     * @param pDepthFailOperation  - Operation on depth compare fail.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public front(pCompare: CompareFunction, pFailOperation?: StencilOperation, pPassOperation?: StencilOperation, pDepthFailOperation?: StencilOperation): this {\r\n        // Set data.\r\n        this.mDataReference.stencilFront.compare = pCompare;\r\n\r\n        // Optionals.\r\n        if (pFailOperation) {\r\n            this.mDataReference.stencilFront.failOperation = pFailOperation;\r\n        }\r\n        if (pPassOperation) {\r\n            this.mDataReference.stencilFront.passOperation = pPassOperation;\r\n        }\r\n        if (pDepthFailOperation) {\r\n            this.mDataReference.stencilFront.depthFailOperation = pDepthFailOperation;\r\n        }\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set writemask witch bit will be read for comparison tests.\r\n     * \r\n     * @param pBitMask - Bitmask.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public readMask(pBitMask: number): this {\r\n        // Set data.\r\n        this.mDataReference.stencilReadMask = pBitMask;\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set writemask witch bit will be written for comparison tests.\r\n     * \r\n     * @param pBitMask - Bitmask.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public writeMask(pBitMask: number): this {\r\n        // Set data.\r\n        this.mDataReference.stencilWriteMask = pBitMask;\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport type VertexFragmentPipelineStencilConfigurationCallback = () => void;\r\n\r\n","import { TextureAspect } from '../../constant/texture-aspect.enum';\r\nimport { TextureBlendFactor } from '../../constant/texture-blend-factor.enum';\r\nimport { TextureBlendOperation } from '../../constant/texture-blend-operation.enum';\r\nimport { VertexFragmentPipelineTargetConfigData } from './vertex-fragment-pipeline';\r\n\r\n/**\r\n * Configuration object for piplines target.\r\n */\r\nexport class VertexFragmentPipelineTargetConfiguration {\r\n    private readonly mCallback: VertexFragmentPipelineTargetConfigCallback;\r\n    private readonly mDataReference: VertexFragmentPipelineTargetConfigData;\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pCallback - Data callback.\r\n     */\r\n    public constructor(pDataReference: VertexFragmentPipelineTargetConfigData, pCallback: VertexFragmentPipelineTargetConfigCallback) {\r\n        this.mCallback = pCallback;\r\n        this.mDataReference = pDataReference;\r\n    }\r\n\r\n    /**\r\n     * Set alpha blends.\r\n     * \r\n     * @param pOperation - Blend operation.\r\n     * @param pSourceFactor - Factor of source value.\r\n     * @param pDestinationFactor - Factor of destination value.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public alphaBlend(pOperation: TextureBlendOperation, pSourceFactor: TextureBlendFactor, pDestinationFactor: TextureBlendFactor): this {\r\n        // Set data.\r\n        this.mDataReference.alphaBlend = {\r\n            operation: pOperation,\r\n            sourceFactor: pSourceFactor,\r\n            destinationFactor: pDestinationFactor\r\n        };\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set color blends.\r\n     * \r\n     * @param pOperation - Blend operation.\r\n     * @param pSourceFactor - Factor of source value.\r\n     * @param pDestinationFactor - Factor of destination value.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public colorBlend(pOperation: TextureBlendOperation, pSourceFactor: TextureBlendFactor, pDestinationFactor: TextureBlendFactor): this {\r\n        // Set data.\r\n        this.mDataReference.colorBlend = {\r\n            operation: pOperation,\r\n            sourceFactor: pSourceFactor,\r\n            destinationFactor: pDestinationFactor\r\n        };\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set texture aspect writemask.\r\n     * \r\n     * @param pAspects - Aspect to write into.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public writeMask(...pAspects: Array<TextureAspect>): this {\r\n        // Set data.\r\n        this.mDataReference.aspectWriteMask = new Set<TextureAspect>(pAspects);\r\n\r\n        // Callback change.\r\n        this.mCallback();\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport type VertexFragmentPipelineTargetConfigCallback = () => void;\r\n\r\n","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { CompareFunction } from '../../constant/compare-function.enum';\r\nimport { ComputeStage } from '../../constant/compute-stage.enum';\r\nimport { PrimitiveCullMode } from '../../constant/primitive-cullmode.enum';\r\nimport { PrimitiveFrontFace } from '../../constant/primitive-front-face.enum';\r\nimport { PrimitiveTopology } from '../../constant/primitive-topology.enum';\r\nimport { StencilOperation } from '../../constant/stencil-operation.enum';\r\nimport { TextureAspect } from '../../constant/texture-aspect.enum';\r\nimport { TextureBlendFactor } from '../../constant/texture-blend-factor.enum';\r\nimport { TextureBlendOperation } from '../../constant/texture-blend-operation.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject } from '../../gpu_object/gpu-object';\r\nimport { GpuObjectInvalidationReasons } from '../../gpu_object/gpu-object-invalidation-reasons';\r\nimport { IGpuObjectNative } from '../../gpu_object/interface/i-gpu-object-native';\r\nimport { ShaderRenderModule } from '../../shader/shader-render-module';\r\nimport { GpuTextureView } from '../../texture/gpu-texture-view';\r\nimport { PipelineLayout } from '../pipeline-layout';\r\nimport { RenderTargets } from '../render_targets/render-targets';\r\nimport { VertexFragmentPipelineDepthConfiguration } from './vertex-fragment-pipeline-depth-configuration';\r\nimport { VertexFragmentPipelineStencilConfiguration } from './vertex-fragment-pipeline-stencil-configuration';\r\nimport { VertexFragmentPipelineTargetConfiguration } from './vertex-fragment-pipeline-target-configuration';\r\n\r\n/**\r\n * Gpu pipeline resource for rendering with a vertex and fragment shader. \r\n */\r\nexport class VertexFragmentPipeline extends GpuObject<GPURenderPipeline | null, VertexFragmentPipelineInvalidationType> implements IGpuObjectNative<GPURenderPipeline | null> {\r\n    private readonly mDepthConfiguration: VertexFragmentPipelineDepthConfigurationData;\r\n    private mLoadedPipeline: GPURenderPipeline | null;\r\n    private readonly mParameter: Dictionary<ComputeStage, Record<string, number>>;\r\n    private mPrimitiveCullMode: PrimitiveCullMode;\r\n    private mPrimitiveFrontFace: PrimitiveFrontFace;\r\n    private mPrimitiveTopology: PrimitiveTopology;\r\n    private readonly mRenderTargetConfig: Dictionary<string, VertexFragmentPipelineTargetConfigData>;\r\n    private readonly mRenderTargets: RenderTargets;\r\n    private readonly mShaderModule: ShaderRenderModule;\r\n    private readonly mStencilConfiguration: VertexFragmentPipelineStencilConfigurationData;\r\n\r\n    /**\r\n     * Pipeline layout.\r\n     */\r\n    public get layout(): PipelineLayout {\r\n        return this.mShaderModule.shader.layout;\r\n    }\r\n\r\n    /**\r\n     * Pipeline shader.\r\n     */\r\n    public get module(): ShaderRenderModule {\r\n        return this.mShaderModule;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPURenderPipeline | null {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Defines which polygon orientation will be culled.\r\n     */\r\n    public get primitiveCullMode(): PrimitiveCullMode {\r\n        return this.mPrimitiveCullMode;\r\n    } set primitiveCullMode(pValue: PrimitiveCullMode) {\r\n        this.mPrimitiveCullMode = pValue;\r\n\r\n        // Invalidate pipeline on setting change.\r\n        this.invalidate(VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n    }\r\n\r\n    /**\r\n     * Defines which polygons are considered front-facing.\r\n     */\r\n    public get primitiveFrontFace(): PrimitiveFrontFace {\r\n        return this.mPrimitiveFrontFace;\r\n    } set primitiveFrontFace(pValue: PrimitiveFrontFace) {\r\n        this.mPrimitiveFrontFace = pValue;\r\n\r\n        // Invalidate pipeline on setting change.\r\n        this.invalidate(VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n    }\r\n\r\n    /**\r\n     * The type of primitive to be constructed from the vertex inputs.\r\n     */\r\n    public get primitiveTopology(): PrimitiveTopology {\r\n        return this.mPrimitiveTopology;\r\n    } set primitiveTopology(pValue: PrimitiveTopology) {\r\n        this.mPrimitiveTopology = pValue;\r\n\r\n        // Invalidate pipeline on setting change.\r\n        this.invalidate(VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n    }\r\n\r\n    /**\r\n     * Render targets.\r\n     */\r\n    public get renderTargets(): RenderTargets {\r\n        return this.mRenderTargets;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * Set default data.\r\n     * \r\n     * @param pDevice - Device.\r\n     * @param pShaderRenderModule - Pipeline shader.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pShaderRenderModule: ShaderRenderModule, pRenderTargets: RenderTargets) {\r\n        super(pDevice);\r\n\r\n        // Loaded pipeline for async creation.\r\n        this.mLoadedPipeline = null;\r\n\r\n        // Set config objects.\r\n        this.mShaderModule = pShaderRenderModule;\r\n        this.mRenderTargets = pRenderTargets;\r\n        this.mRenderTargetConfig = new Dictionary<string, VertexFragmentPipelineTargetConfigData>();\r\n\r\n        // Pipeline constants.\r\n        this.mParameter = new Dictionary<ComputeStage, Record<string, number>>();\r\n\r\n        // Depth default settings.\r\n        this.mDepthConfiguration = {\r\n            depthWriteEnabled: this.mRenderTargets.hasDepth,\r\n            depthCompare: CompareFunction.Less,\r\n            depthBias: 0,\r\n            depthBiasSlopeScale: 0,\r\n            depthBiasClamp: 0\r\n        };\r\n\r\n        // Default stencil settings.\r\n        this.mStencilConfiguration = {\r\n            stencilReadMask: 0,\r\n            stencilWriteMask: 0,\r\n            stencilBack: {\r\n                compare: CompareFunction.Allways,\r\n                failOperation: StencilOperation.Keep,\r\n                depthFailOperation: StencilOperation.Keep,\r\n                passOperation: StencilOperation.Keep,\r\n            },\r\n            stencilFront: {\r\n                compare: CompareFunction.Allways,\r\n                failOperation: StencilOperation.Keep,\r\n                depthFailOperation: StencilOperation.Keep,\r\n                passOperation: StencilOperation.Keep,\r\n            }\r\n        };\r\n\r\n        // Primitive default settings.\r\n        this.mPrimitiveTopology = PrimitiveTopology.TriangleList;\r\n        this.mPrimitiveCullMode = PrimitiveCullMode.Back;\r\n        this.mPrimitiveFrontFace = PrimitiveFrontFace.ClockWise;\r\n    }\r\n\r\n    /**\r\n     * Set depth process configuration.\r\n     */\r\n    public depthConfig(): VertexFragmentPipelineDepthConfiguration {\r\n        return new VertexFragmentPipelineDepthConfiguration(this.mDepthConfiguration, () => {\r\n            // Generate pipeline anew.\r\n            this.invalidate(VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set optional parameter of pipeline.\r\n     * \r\n     * @param pParameterName - name of parameter.\r\n     * @param pValue - Value.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public setParameter(pParameterName: string, pValue: number): this {\r\n        const lParameterUsage: Set<ComputeStage> | undefined = this.mShaderModule.shader.parameter(pParameterName);\r\n\r\n        // Set parameter for each assigned compute stage.\r\n        for (const lUsage of lParameterUsage) {\r\n            // Init parameters for computestage when not set.\r\n            if (!this.mParameter.has(lUsage)) {\r\n                this.mParameter.set(lUsage, {});\r\n            }\r\n\r\n            // Set value for compute stage.\r\n            this.mParameter.get(lUsage)![pParameterName] = pValue;\r\n        }\r\n\r\n        // Generate pipeline anew.\r\n        this.invalidate(VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set stencil process configuration.\r\n     */\r\n    public stencilConfig(): VertexFragmentPipelineStencilConfiguration {\r\n        return new VertexFragmentPipelineStencilConfiguration(this.mStencilConfiguration, () => {\r\n            // Generate pipeline anew.\r\n            this.invalidate(VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create or update target config.\r\n     * \r\n     * @param pTargetName - Target name.\r\n     * \r\n     * @returns config object. \r\n     */\r\n    public targetConfig(pTargetName: string): VertexFragmentPipelineTargetConfiguration {\r\n        if (!this.mRenderTargets.hasColorTarget(pTargetName)) {\r\n            throw new Exception(`Color target \"${pTargetName}\" does not exists.`, this);\r\n        }\r\n\r\n        // Create default config when not already set.\r\n        if (!this.mRenderTargetConfig.has(pTargetName)) {\r\n            this.mRenderTargetConfig.set(pTargetName, {\r\n                colorBlend: {\r\n                    operation: TextureBlendOperation.Add,\r\n                    sourceFactor: TextureBlendFactor.One,\r\n                    destinationFactor: TextureBlendFactor.Zero\r\n                },\r\n                alphaBlend: {\r\n                    operation: TextureBlendOperation.Add,\r\n                    sourceFactor: TextureBlendFactor.One,\r\n                    destinationFactor: TextureBlendFactor.Zero\r\n                },\r\n                aspectWriteMask: new Set<TextureAspect>([TextureAspect.Red, TextureAspect.Green, TextureAspect.Blue, TextureAspect.Alpha])\r\n            });\r\n        }\r\n\r\n        return new VertexFragmentPipelineTargetConfiguration(this.mRenderTargetConfig.get(pTargetName)!, () => {\r\n            // Generate pipeline anew.\r\n            this.invalidate(VertexFragmentPipelineInvalidationType.NativeRebuild);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate native gpu pipeline data layout.\r\n     */\r\n    protected override generateNative(_pLastNative: GPURenderPipeline | null, pInvalidationReason: GpuObjectInvalidationReasons<VertexFragmentPipelineInvalidationType>): GPURenderPipeline | null {\r\n        // When a pipeline was loaded, return the loaded instead of creating a new pipeline.\r\n        if (this.mLoadedPipeline !== null && !pInvalidationReason.has(VertexFragmentPipelineInvalidationType.NativeRebuild)) {\r\n            const lLoadedPipeline: GPURenderPipeline = this.mLoadedPipeline;\r\n            this.mLoadedPipeline = null;\r\n\r\n            return lLoadedPipeline;\r\n        }\r\n\r\n        // Generate pipeline layout from bind group layouts.\r\n        const lPipelineLayout: GPUPipelineLayout = this.mShaderModule.shader.layout.native;\r\n\r\n        // Construct basic GPURenderPipelineDescriptor.\r\n        const lPipelineDescriptor: GPURenderPipelineDescriptor = {\r\n            layout: lPipelineLayout,\r\n            vertex: {\r\n                module: this.mShaderModule.shader.native,\r\n                entryPoint: this.mShaderModule.vertexEntryPoint,\r\n                buffers: this.mShaderModule.vertexParameter.native,\r\n                constants: this.mParameter.get(ComputeStage.Vertex) ?? {}\r\n            },\r\n            primitive: this.generatePrimitive()\r\n        };\r\n\r\n        // Optional fragment state.\r\n        if (this.module.fragmentEntryPoint) {\r\n            // Generate fragment targets only when fragment state is needed.\r\n            const lFragmentTargetList: Array<GPUColorTargetState> = new Array<GPUColorTargetState>();\r\n            for (const lRenderTargetName of this.mRenderTargets.colorTargetNames) {\r\n                const lRenderTarget: GpuTextureView = this.mRenderTargets.colorTarget(lRenderTargetName);\r\n\r\n                lFragmentTargetList.push({\r\n                    format: lRenderTarget.layout.format as GPUTextureFormat,\r\n                    blend: this.generateRenderTargetBlendState(lRenderTargetName),\r\n                    writeMask: this.generateRenderTargetWriteMask(lRenderTargetName)\r\n                });\r\n            }\r\n\r\n            lPipelineDescriptor.fragment = {\r\n                module: this.mShaderModule.shader.native,\r\n                entryPoint: this.module.fragmentEntryPoint,\r\n                targets: lFragmentTargetList,\r\n                constants: this.mParameter.get(ComputeStage.Fragment) ?? {}\r\n            };\r\n        }\r\n\r\n        // Setup optional depth or and stencil attachment.\r\n        if (this.mRenderTargets.hasDepth || this.mRenderTargets.hasStencil) {\r\n            lPipelineDescriptor.depthStencil = {\r\n                format: this.mRenderTargets.depthStencilTarget().layout.format as GPUTextureFormat\r\n            };\r\n\r\n            // Setup depth options.\r\n            if (this.mRenderTargets.hasDepth) {\r\n                lPipelineDescriptor.depthStencil.depthWriteEnabled = this.mDepthConfiguration.depthWriteEnabled;\r\n                lPipelineDescriptor.depthStencil.depthCompare = this.mDepthConfiguration.depthCompare;\r\n                lPipelineDescriptor.depthStencil.depthBias = this.mDepthConfiguration.depthBias;\r\n                lPipelineDescriptor.depthStencil.depthBiasSlopeScale = this.mDepthConfiguration.depthBiasSlopeScale;\r\n                lPipelineDescriptor.depthStencil.depthBiasClamp = this.mDepthConfiguration.depthBiasClamp;\r\n\r\n                // Bias settings must be zero for list topologies.\r\n                if (this.mPrimitiveTopology === PrimitiveTopology.LineList || this.mPrimitiveTopology === PrimitiveTopology.LineStrip || this.mPrimitiveTopology === PrimitiveTopology.PointList) {\r\n                    if (lPipelineDescriptor.depthStencil.depthBias !== 0 || lPipelineDescriptor.depthStencil.depthBiasSlopeScale !== 0 || lPipelineDescriptor.depthStencil.depthBiasClamp !== 0) {\r\n                        throw new Exception(`Pipelines depth bias settings must be zero for \"${this.mPrimitiveTopology}\"-Topology`, this);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Setup stencil options.\r\n            if (this.mRenderTargets.hasStencil) {\r\n                lPipelineDescriptor.depthStencil.stencilReadMask = this.mStencilConfiguration.stencilReadMask;\r\n                lPipelineDescriptor.depthStencil.stencilWriteMask = this.mStencilConfiguration.stencilWriteMask;\r\n                lPipelineDescriptor.depthStencil.stencilBack = {\r\n                    compare: this.mStencilConfiguration.stencilBack.compare,\r\n                    failOp: this.mStencilConfiguration.stencilBack.failOperation,\r\n                    depthFailOp: this.mStencilConfiguration.stencilBack.depthFailOperation,\r\n                    passOp: this.mStencilConfiguration.stencilBack.passOperation\r\n                };\r\n                lPipelineDescriptor.depthStencil.stencilFront = {\r\n                    compare: this.mStencilConfiguration.stencilFront.compare,\r\n                    failOp: this.mStencilConfiguration.stencilFront.failOperation,\r\n                    depthFailOp: this.mStencilConfiguration.stencilFront.depthFailOperation,\r\n                    passOp: this.mStencilConfiguration.stencilFront.passOperation\r\n                };\r\n            }\r\n        }\r\n\r\n        // Set multisample count.\r\n        if (this.mRenderTargets.multisampled) {\r\n            lPipelineDescriptor.multisample = {\r\n                count: 4\r\n            };\r\n        }\r\n\r\n        // Load pipeline asyncron and update native after promise resolve.\r\n        this.device.gpu.createRenderPipelineAsync(lPipelineDescriptor).then((pPipeline: GPURenderPipeline) => {\r\n            this.mLoadedPipeline = pPipeline;\r\n            this.invalidate(VertexFragmentPipelineInvalidationType.NativeLoaded);\r\n        });\r\n\r\n        // Null as long as pipeline is loading.\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Primitive settings.\r\n     */\r\n    private generatePrimitive(): GPUPrimitiveState {\r\n        // Convert topology to native. Set strip format for strip topology.\r\n        let lStripIndexFormat: GPUIndexFormat | undefined = undefined;\r\n\r\n        switch (this.primitiveTopology) {\r\n            case PrimitiveTopology.LineStrip:\r\n            case PrimitiveTopology.TriangleStrip: {\r\n                lStripIndexFormat = 'uint32';\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Create primitive state.\r\n        const lPrimitiveState: GPUPrimitiveState = {\r\n            topology: this.primitiveTopology,\r\n            frontFace: this.primitiveFrontFace,\r\n            cullMode: this.primitiveCullMode,\r\n            unclippedDepth: false\r\n        };\r\n\r\n        // Set optional strip format.\r\n        if (lStripIndexFormat) {\r\n            lPrimitiveState.stripIndexFormat = lStripIndexFormat;\r\n        }\r\n\r\n        return lPrimitiveState;\r\n    }\r\n\r\n    /**\r\n     * Generate blend state for render target.\r\n     * \r\n     * @param pTargetName - Render target name.\r\n     * \r\n     * @returns generated blend state. \r\n     */\r\n    private generateRenderTargetBlendState(pTargetName: string): GPUBlendState {\r\n        const lConfig: VertexFragmentPipelineTargetConfigData | undefined = this.mRenderTargetConfig.get(pTargetName);\r\n\r\n        // Set defaults for blend state.\r\n        const lBlendState: GPUBlendState = {\r\n            color: {\r\n                operation: 'add',\r\n                srcFactor: 'one',\r\n                dstFactor: 'zero'\r\n            },\r\n            alpha: {\r\n                operation: 'add',\r\n                srcFactor: 'one',\r\n                dstFactor: 'zero'\r\n            }\r\n        };\r\n\r\n        // Set alpha and alpha blend when set.\r\n        if (lConfig) {\r\n            lBlendState.alpha = {\r\n                operation: lConfig.alphaBlend.operation,\r\n                srcFactor: lConfig.alphaBlend.sourceFactor,\r\n                dstFactor: lConfig.alphaBlend.destinationFactor\r\n            };\r\n            lBlendState.color = {\r\n                operation: lConfig.colorBlend.operation,\r\n                srcFactor: lConfig.colorBlend.sourceFactor,\r\n                dstFactor: lConfig.colorBlend.destinationFactor\r\n            };\r\n        }\r\n\r\n        return lBlendState;\r\n    }\r\n\r\n    /**\r\n     * Generate gpu color write mask for the set render target.\r\n     * \r\n     * @param pTargetName - Target name.\r\n     * \r\n     * @returns color write flags.\r\n     */\r\n    private generateRenderTargetWriteMask(pTargetName: string): GPUColorWriteFlags {\r\n        const lConfig: VertexFragmentPipelineTargetConfigData | undefined = this.mRenderTargetConfig.get(pTargetName);\r\n\r\n        // Convert color aspects config to write mask.\r\n        let lWriteMask: GPUColorWriteFlags = 0xf;\r\n        if (lConfig) {\r\n            lWriteMask = 0x0;\r\n            if (lConfig.aspectWriteMask.has(TextureAspect.Red)) {\r\n                lWriteMask += 0x1;\r\n            }\r\n            if (lConfig.aspectWriteMask.has(TextureAspect.Green)) {\r\n                lWriteMask += 0x2;\r\n            }\r\n            if (lConfig.aspectWriteMask.has(TextureAspect.Red)) {\r\n                lWriteMask += 0x4;\r\n            }\r\n            if (lConfig.aspectWriteMask.has(TextureAspect.Alpha)) {\r\n                lWriteMask += 0x8;\r\n            }\r\n        }\r\n\r\n        return lWriteMask;\r\n    }\r\n}\r\n\r\nexport type VertexFragmentPipelineDepthConfigurationData = {\r\n    depthCompare: CompareFunction;\r\n    depthWriteEnabled: boolean;\r\n    depthBias: number;\r\n    depthBiasSlopeScale: number;\r\n    depthBiasClamp: number;\r\n};\r\n\r\n\r\ntype VertexFragmentPipelineStencilConfigurationFaceData = {\r\n    compare: CompareFunction;\r\n    failOperation: StencilOperation;\r\n    depthFailOperation: StencilOperation;\r\n    passOperation: StencilOperation;\r\n};\r\n\r\nexport type VertexFragmentPipelineStencilConfigurationData = {\r\n    stencilBack: VertexFragmentPipelineStencilConfigurationFaceData;\r\n    stencilFront: VertexFragmentPipelineStencilConfigurationFaceData;\r\n    stencilReadMask: number;\r\n    stencilWriteMask: number;\r\n};\r\n\r\nexport enum VertexFragmentPipelineInvalidationType {\r\n    NativeRebuild = 'NativeRebuild',\r\n    NativeLoaded = 'NativeLoaded',\r\n}\r\n\r\ntype VertexFragmentPipelineTargetConfigBlendData = {\r\n    operation: TextureBlendOperation;\r\n    sourceFactor: TextureBlendFactor;\r\n    destinationFactor: TextureBlendFactor;\r\n};\r\n\r\nexport type VertexFragmentPipelineTargetConfigData = {\r\n    colorBlend: VertexFragmentPipelineTargetConfigBlendData;\r\n    alphaBlend: VertexFragmentPipelineTargetConfigBlendData;\r\n    aspectWriteMask: Set<TextureAspect>;\r\n};","import { BufferItemFormat } from '../../constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../../constant/buffer-item-multiplier.enum';\r\nimport { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { VertexParameterLayoutSetupData } from './vertex-parameter-layout-setup';\r\n\r\n/**\r\n * Child setup object to divide and add new names parameters to a vertex parameter buffer layout.\r\n */\r\nexport class VertexParameterBufferLayoutSetup extends GpuObjectChildSetup<VertexParameterLayoutSetupData, VertexParameterBufferLayoutCallback> {\r\n    /**\r\n     * Add new parameter to vertex layout.\r\n     * \r\n     * @param pName - Parameter name.\r\n     * @param pLocation - Parameter location.\r\n     * @param pFormat - Parameter data format.\r\n     * @param pMultiplier - Data multiplication.\r\n     * @param pAdditionalOffset - Additional offset. Offset 0 aligns right after the last parameter.\r\n     * @returns \r\n     */\r\n    public withParameter(pName: string, pLocation: number, pFormat: BufferItemFormat, pMultiplier: BufferItemMultiplier, pAlignment: number | null = null): this {\r\n        // Send layout data.\r\n        this.sendData({\r\n            name: pName,\r\n            location: pLocation,\r\n            format: pFormat,\r\n            multiplier: pMultiplier,\r\n            alignment: pAlignment\r\n        });\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\ntype VertexParameterBufferLayoutCallback = (pLayout: VertexParameterBufferLayoutData) => void;\r\n\r\nexport type VertexParameterBufferLayoutData = {\r\n    name: string;\r\n    location: number;\r\n    format: BufferItemFormat;\r\n    multiplier: BufferItemMultiplier;\r\n    alignment: number | null;\r\n};","import { VertexParameterStepMode } from '../../constant/vertex-parameter-step-mode.enum';\r\nimport { GpuObjectSetup } from '../../gpu_object/gpu-object-setup';\r\nimport { VertexParameterBufferLayoutData, VertexParameterBufferLayoutSetup } from './vertex-parameter-buffer-layout-setup';\r\n\r\n/**\r\n * setup object for vertex layouts.\r\n */\r\nexport class VertexParameterLayoutSetup extends GpuObjectSetup<VertexParameterLayoutSetupData> {\r\n    /**\r\n     * Add a new buffer layout to vertex parameter layout.\r\n     * \r\n     * @param pStepMode - Buffer step mode.\r\n     * \r\n     * @returns vertex buffer layout setup \r\n     */\r\n    public buffer(pBufferName: string, pStepMode: VertexParameterStepMode): VertexParameterBufferLayoutSetup {\r\n        // Create buffer.\r\n        const lBuffer: VertexParameterLayoutSetupBufferData = {\r\n            name: pBufferName,\r\n            stepMode: pStepMode,\r\n            parameter: new Array<VertexParameterBufferLayoutData>()\r\n        };\r\n\r\n        // Add buffer to result.\r\n        this.setupData.buffer.push(lBuffer);\r\n\r\n        // Create and return buffer setup.\r\n        return new VertexParameterBufferLayoutSetup(this.setupReferences, (pLayout: VertexParameterBufferLayoutData) => {\r\n            lBuffer.parameter.push(pLayout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill in default data before the setup starts.\r\n     * \r\n     * @param pDataReference - Setup data.\r\n     */\r\n    protected override fillDefaultData(pDataReference: Partial<VertexParameterLayoutSetupData>): void {\r\n        pDataReference.buffer = new Array<VertexParameterLayoutSetupBufferData>();\r\n    }\r\n}\r\n\r\ntype VertexParameterLayoutSetupBufferData = {\r\n    name: string;\r\n    stepMode: VertexParameterStepMode;\r\n    parameter: Array<VertexParameterBufferLayoutData>;\r\n};\r\n\r\nexport type VertexParameterLayoutSetupData = {\r\n    buffer: Array<VertexParameterLayoutSetupBufferData>;\r\n};","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { PrimitiveBufferMemoryLayout } from '../../buffer/memory_layout/primitive-buffer-memory-layout';\r\nimport { StructBufferMemoryLayout } from '../../buffer/memory_layout/struct-buffer-memory-layout';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { BufferItemMultiplier } from '../../constant/buffer-item-multiplier.enum';\r\nimport { VertexParameterStepMode } from '../../constant/vertex-parameter-step-mode.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject, GpuObjectSetupReferences } from '../../gpu_object/gpu-object';\r\nimport { IGpuObjectNative } from '../../gpu_object/interface/i-gpu-object-native';\r\nimport { IGpuObjectSetup } from '../../gpu_object/interface/i-gpu-object-setup';\r\nimport { VertexParameter } from './vertex-parameter';\r\nimport { VertexParameterLayoutSetup, VertexParameterLayoutSetupData } from './vertex-parameter-layout-setup';\r\n\r\n/**\r\n * Vertex parameter layout.\r\n */\r\nexport class VertexParameterLayout extends GpuObject<Array<GPUVertexBufferLayout>, '', VertexParameterLayoutSetup> implements IGpuObjectNative<Array<GPUVertexBufferLayout>>, IGpuObjectSetup<VertexParameterLayoutSetup> {\r\n    private readonly mBuffer: Dictionary<string, VertexParameterLayoutBuffer>;\r\n    private mIndexable: boolean;\r\n    private readonly mParameter: Dictionary<string, VertexParameterLayoutBufferParameter>;\r\n\r\n    /**\r\n     * Get all parameter buffer names.\r\n     */\r\n    public get bufferNames(): Array<string> {\r\n        // Setup must be called.\r\n        this.ensureSetup();\r\n\r\n        return [...this.mBuffer.keys()];\r\n    }\r\n\r\n    /**\r\n     * If parameters are indexable.\r\n     * Meanins every parameter is eighter stepmode index or instance.\r\n     * When even one parameter has a stepmode of vertex, any index parameters must be converted. \r\n     */\r\n    public get indexable(): boolean {\r\n        // Setup must be called.\r\n        this.ensureSetup();\r\n\r\n        return this.mIndexable;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): Array<GPUVertexBufferLayout> {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Get all parameter names.\r\n     */\r\n    public get parameterNames(): Array<string> {\r\n        // Setup must be called.\r\n        this.ensureSetup();\r\n\r\n        return [...this.mParameter.keys()];\r\n    }\r\n\r\n    /**\r\n     * Construct.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pLayout - Simple layout of parameter.\r\n     */\r\n    public constructor(pDevice: GpuDevice) {\r\n        super(pDevice);\r\n\r\n        this.mIndexable = false;\r\n        this.mBuffer = new Dictionary<string, VertexParameterLayoutBuffer>();\r\n        this.mParameter = new Dictionary<string, VertexParameterLayoutBufferParameter>();\r\n    }\r\n\r\n    /**\r\n     * Create vertex parameters from layout.\r\n     * @param pIndexData - Index data.\r\n     */\r\n    public create(pIndexData: Array<number>): VertexParameter {\r\n        return new VertexParameter(this.device, this, pIndexData);\r\n    }\r\n\r\n    /**\r\n     * Get vertex parameter layout definition by name.\r\n     * \r\n     * @param pName - Parameter name.\r\n     */\r\n    public parameter(pName: string): Readonly<VertexParameterLayoutBufferParameter> {\r\n        const lLayout: VertexParameterLayoutBufferParameter | undefined = this.mParameter.get(pName);\r\n        if (!lLayout) {\r\n            throw new Exception(`Vertex parameter \"${pName}\" is not defined.`, this);\r\n        }\r\n\r\n        return lLayout;\r\n    }\r\n\r\n    /**\r\n     * Get vertex parameter layout definition by name.\r\n     * \r\n     * @param pBufferName - Parameter name.\r\n     */\r\n    public parameterBuffer(pBufferName: string): Readonly<VertexParameterLayoutBuffer> {\r\n        const lLayout: VertexParameterLayoutBuffer | undefined = this.mBuffer.get(pBufferName);\r\n        if (!lLayout) {\r\n            throw new Exception(`Vertex parameter buffer \"${pBufferName}\" is not defined.`, this);\r\n        }\r\n\r\n        return lLayout;\r\n    }\r\n\r\n    /**\r\n     * Call setup.\r\n     * \r\n     * @param pSetupCallback - Setup callback.\r\n     *\r\n     * @returns — this.\r\n     */\r\n    public override setup(pSetupCallback?: ((pSetup: VertexParameterLayoutSetup) => void)): this {\r\n        return super.setup(pSetupCallback);\r\n    }\r\n\r\n    /**\r\n     * Generate new native object.\r\n     */\r\n    protected override generateNative(): Array<GPUVertexBufferLayout> {\r\n        // Create vertex buffer layout for each parameter.\r\n        const lLayoutList: Array<GPUVertexBufferLayout> = new Array<GPUVertexBufferLayout>();\r\n        for (const lBuffer of this.mBuffer.values()) {\r\n            let lCurrentBufferByteLength: number = 0;\r\n            // Create parameter layouts.\r\n            const lVertexAttributes: Array<GPUVertexAttribute> = new Array<GPUVertexAttribute>();\r\n            for (const lParameter of lBuffer.layout.properties) {\r\n                // Convert parameter layout to primitive buffer layout.\r\n                const lPrimitiveParameterLayout: PrimitiveBufferMemoryLayout = lParameter.layout as PrimitiveBufferMemoryLayout;\r\n\r\n                // Convert multiplier to value.\r\n                const lItemMultiplier = PrimitiveBufferMemoryLayout.itemCountOfMultiplier(lPrimitiveParameterLayout.itemMultiplier);\r\n\r\n                // Convert multiplier to float32 format.\r\n                let lFormat: GPUVertexFormat = `${lPrimitiveParameterLayout.itemFormat}x${lItemMultiplier}` as GPUVertexFormat;\r\n                if (lPrimitiveParameterLayout.itemMultiplier === BufferItemMultiplier.Single) {\r\n                    lFormat = lPrimitiveParameterLayout.itemFormat as GPUVertexFormat;\r\n                }\r\n\r\n                // Read location of parameter.\r\n                const lParameterLocation: number = this.mParameter.get(lParameter.name)!.location;\r\n\r\n                // Create buffer layout.\r\n                lVertexAttributes.push({\r\n                    format: lFormat,\r\n                    offset: lCurrentBufferByteLength,\r\n                    shaderLocation: lParameterLocation\r\n                });\r\n\r\n                // Apply alignment and extend buffer size by parameter length.\r\n                lCurrentBufferByteLength = Math.ceil(lCurrentBufferByteLength / lPrimitiveParameterLayout.alignment) * lPrimitiveParameterLayout.alignment;\r\n                lCurrentBufferByteLength += lPrimitiveParameterLayout.fixedSize;\r\n            }\r\n\r\n            // Convert stepmode.\r\n            let lStepmode: GPUVertexStepMode = 'vertex';\r\n            if (lBuffer.stepMode === VertexParameterStepMode.Instance) {\r\n                lStepmode = 'instance';\r\n            }\r\n\r\n            lLayoutList.push({\r\n                stepMode: lStepmode,\r\n                arrayStride: lBuffer.layout.fixedSize,\r\n                attributes: lVertexAttributes\r\n            });\r\n        }\r\n\r\n        return lLayoutList;\r\n    }\r\n\r\n    /**\r\n     * Setup with setup object.\r\n     * \r\n     * @param pReferences - Used references.\r\n     */\r\n    protected override onSetup(pReferences: VertexParameterLayoutSetupData): void {\r\n        let lCanBeIndexed: boolean = true;\r\n\r\n        // Build allowed multiplier list.\r\n        const lAllowedMultiplier: Set<BufferItemMultiplier> = new Set<BufferItemMultiplier>([\r\n            BufferItemMultiplier.Single,\r\n            BufferItemMultiplier.Vector2,\r\n            BufferItemMultiplier.Vector3,\r\n            BufferItemMultiplier.Vector4\r\n        ]);\r\n\r\n        // Create each buffer.\r\n        const lParameterIndicies: Array<true> = new Array<true>();\r\n        for (const lBufferSetupData of pReferences.buffer) {\r\n            // Create struct layout with packed alignment.\r\n            const lBufferLayout: StructBufferMemoryLayout = new StructBufferMemoryLayout(this.device, BufferAlignmentType.Packed);\r\n            lBufferLayout.setup((pSetup) => {\r\n                for (const lParameterSetupData of lBufferSetupData.parameter) {\r\n                    // No double locations.\r\n                    if (lParameterIndicies[lParameterSetupData.location]) {\r\n                        throw new Exception(`Vertex parameter location \"${lParameterSetupData.location}\" can't be defined twice.`, this);\r\n                    }\r\n\r\n                    // Validate multiplier.\r\n                    if (!lAllowedMultiplier.has(lParameterSetupData.multiplier)) {\r\n                        throw new Exception(`Vertex parameter item multiplier \"${lParameterSetupData.multiplier}\" not supported.`, this);\r\n                    }\r\n\r\n                    // Add parameter as struct property.\r\n                    pSetup.property(lParameterSetupData.name)\r\n                        .asPrimitive(lParameterSetupData.format, lParameterSetupData.multiplier, lParameterSetupData.alignment);\r\n\r\n                    // Add to parameter list.\r\n                    this.mParameter.set(lParameterSetupData.name, {\r\n                        name: lParameterSetupData.name,\r\n                        location: lParameterSetupData.location,\r\n                    });\r\n\r\n                    // Save location index for checkind double\r\n                    lParameterIndicies[lParameterSetupData.location] = true;\r\n                }\r\n            });\r\n\r\n            // Create buffer description.\r\n            this.mBuffer.set(lBufferSetupData.name, {\r\n                name: lBufferSetupData.name,\r\n                stepMode: lBufferSetupData.stepMode,\r\n                layout: lBufferLayout\r\n            });\r\n\r\n            // When one buffer is not indexable than no buffer is it.\r\n            if (lBufferSetupData.stepMode === VertexParameterStepMode.Vertex) {\r\n                lCanBeIndexed = false;\r\n            }\r\n        }\r\n\r\n        // Validate continuity of parameter locations.\r\n        if (lParameterIndicies.length !== this.mParameter.size) {\r\n            throw new Exception(`Vertex parameter locations need to be in continious order.`, this);\r\n        }\r\n\r\n        this.mIndexable = lCanBeIndexed;\r\n    }\r\n\r\n    /**\r\n     * Create setup object. Return null to skip any setups.\r\n     * \r\n     * @param pReferences - Setup references.\r\n     * \r\n     * @returns created setup. \r\n     */\r\n    protected override onSetupObjectCreate(pReferences: GpuObjectSetupReferences<VertexParameterLayoutSetupData>): VertexParameterLayoutSetup {\r\n        return new VertexParameterLayoutSetup(pReferences);\r\n    }\r\n}\r\n\r\nexport type VertexParameterLayoutBuffer = {\r\n    name: string;\r\n    stepMode: VertexParameterStepMode;\r\n    layout: StructBufferMemoryLayout;\r\n};\r\n\r\nexport type VertexParameterLayoutBufferParameter = {\r\n    name: string;\r\n    location: number;\r\n};","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { GpuBuffer } from '../../buffer/gpu-buffer';\r\nimport { GpuBufferView } from '../../buffer/gpu-buffer-view';\r\nimport { BufferAlignmentType } from '../../constant/buffer-alignment-type.enum';\r\nimport { BufferItemFormat } from '../../constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../../constant/buffer-item-multiplier.enum';\r\nimport { BufferUsage } from '../../constant/buffer-usage.enum';\r\nimport { VertexParameterStepMode } from '../../constant/vertex-parameter-step-mode.enum';\r\nimport { VertexParameterLayout, VertexParameterLayoutBuffer } from './vertex-parameter-layout';\r\nimport { ArrayBufferMemoryLayout } from '../../buffer/memory_layout/array-buffer-memory-layout';\r\nimport { PrimitiveBufferMemoryLayout } from '../../buffer/memory_layout/primitive-buffer-memory-layout';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\nimport { GpuObject } from '../../gpu_object/gpu-object';\r\n\r\n/**\r\n * Vertex parameters used for a single render draw call.\r\n * Flats out parameters that are indexed when another vertex data is not indexed.\r\n */\r\nexport class VertexParameter extends GpuObject<null, VertexParameterInvalidationType> {\r\n    private readonly mBuffer: Dictionary<string, GpuBuffer>;\r\n    private readonly mIndexBufferView: GpuBufferView<Uint16Array | Uint32Array> | null;\r\n    private readonly mIndices: Array<number>;\r\n    private readonly mLayout: VertexParameterLayout;\r\n\r\n    /**\r\n     * Get index buffer.\r\n     */\r\n    public get indexBuffer(): GpuBufferView<Uint16Array | Uint32Array> | null {\r\n        return this.mIndexBufferView;\r\n    }\r\n\r\n    /**\r\n     * Get parameter layout.\r\n     */\r\n    public get layout(): VertexParameterLayout {\r\n        return this.mLayout;\r\n    }\r\n\r\n    /**\r\n     * Vertex count.\r\n     */\r\n    public get vertexCount(): number {\r\n        return this.mIndices.length;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Device reference.\r\n     * @param pVertexParameterLayout - Parameter layout.\r\n     * @param pIndices - Index buffer data.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pVertexParameterLayout: VertexParameterLayout, pIndices: Array<number>) {\r\n        super(pDevice);\r\n\r\n        // Set vertex parameter layout.\r\n        this.mLayout = pVertexParameterLayout;\r\n        this.mBuffer = new Dictionary<string, GpuBuffer>();\r\n\r\n        // Save index information.\r\n        this.mIndices = pIndices;\r\n\r\n        // Create index buffer.\r\n        this.mIndexBufferView = null;\r\n        if (this.mLayout.indexable) {\r\n            // Decide wich format to use.\r\n            if (pIndices.length < Math.pow(2, 16)) {\r\n                // Create index buffer layout.\r\n                const lIndexBufferLayout: ArrayBufferMemoryLayout = new ArrayBufferMemoryLayout(this.device, {\r\n                    arraySize: pIndices.length,\r\n                    innerType: new PrimitiveBufferMemoryLayout(this.device, {\r\n                        alignmentType: BufferAlignmentType.Packed,\r\n                        primitiveFormat: BufferItemFormat.Uint16,\r\n                        primitiveMultiplier: BufferItemMultiplier.Single,\r\n                    })\r\n                });\r\n\r\n                // Create index buffer.\r\n                const lIndexBuffer: GpuBuffer = new GpuBuffer(pDevice, pIndices.length * 2);\r\n                lIndexBuffer.extendUsage(BufferUsage.Index);\r\n                lIndexBuffer.initialData(new Uint16Array(pIndices));\r\n\r\n                // Create view of buffer.\r\n                this.mIndexBufferView = lIndexBuffer.view(lIndexBufferLayout, Uint16Array);\r\n            } else {\r\n                // Create index buffer layout.\r\n                const lIndexBufferLayout: ArrayBufferMemoryLayout = new ArrayBufferMemoryLayout(this.device, {\r\n                    arraySize: pIndices.length,\r\n                    innerType: new PrimitiveBufferMemoryLayout(this.device, {\r\n                        alignmentType: BufferAlignmentType.Packed,\r\n                        primitiveFormat: BufferItemFormat.Uint32,\r\n                        primitiveMultiplier: BufferItemMultiplier.Single,\r\n                    })\r\n                });\r\n\r\n                // Create index buffer.\r\n                const lIndexBuffer: GpuBuffer = new GpuBuffer(pDevice, pIndices.length * 4);\r\n                lIndexBuffer.extendUsage(BufferUsage.Index);\r\n                lIndexBuffer.initialData(new Uint32Array(pIndices));\r\n\r\n                // Create view of buffer.\r\n                this.mIndexBufferView = lIndexBuffer.view(lIndexBufferLayout, Uint32Array);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set parameter data.\r\n     * @param pName - parameter buffer name.\r\n     * @param pData - Parameter data with ignored alignments.\r\n     */\r\n    public create(pBufferName: string, pData: Array<number>): GpuBuffer {\r\n        const lParameterLayout: VertexParameterLayoutBuffer = this.mLayout.parameterBuffer(pBufferName);\r\n\r\n        // Get item count of layout. => Vec3<float> + int + Vex2<uint> => 6 Items\r\n        const lStrideParameter: Array<{ format: BufferItemFormat, count: number, alignment: number; itemByteCount: number; }> = new Array<{ format: BufferItemFormat, count: number, alignment: number; itemByteCount: number; }>();\r\n        let lStrideDataCount: number = 0;\r\n        for (const lBufferParameter of lParameterLayout.layout.properties) {\r\n            const lParameterLayout: PrimitiveBufferMemoryLayout = lBufferParameter.layout as PrimitiveBufferMemoryLayout;\r\n\r\n            // Read item count and format of parameter.\r\n            const lParameterItemCount: number = PrimitiveBufferMemoryLayout.itemCountOfMultiplier(lParameterLayout.itemMultiplier);\r\n            const lParameterItemFormat: BufferItemFormat = lParameterLayout.itemFormat;\r\n\r\n            // Add stride data count.\r\n            lStrideDataCount += lParameterItemCount;\r\n\r\n            // Add formats for each item of parameter.\r\n            lStrideParameter.push({\r\n                count: lParameterItemCount,\r\n                format: lParameterItemFormat,\r\n                alignment: lParameterLayout.alignment,\r\n                itemByteCount: PrimitiveBufferMemoryLayout.itemFormatByteCount(lParameterItemFormat)\r\n            });\r\n        }\r\n\r\n        // Buffer data must align with layout.\r\n        if (pData.length % lStrideDataCount !== 0) {\r\n            throw new Exception('Vertex parameter buffer data does not align with layout.', this);\r\n        }\r\n\r\n        // When parameter is indexed but vertex parameter are not indexed, extend data. Based on index data.\r\n        let lData: Array<number> = pData;\r\n        if (!this.mLayout.indexable && lParameterLayout.stepMode === VertexParameterStepMode.Index) {\r\n            // Dublicate dependent on index information.\r\n            lData = new Array<number>();\r\n            for (const lIndex of this.mIndices) {\r\n                const lDataStart: number = lIndex * lStrideDataCount;\r\n                const lDataEnd: number = lDataStart + lStrideDataCount;\r\n\r\n                // Copy vertex parameter data.\r\n                lData.push(...pData.slice(lDataStart, lDataEnd));\r\n            }\r\n        }\r\n\r\n        // Calculate struct count in buffer. Fallback to vertex mode when buffer is in index step mode but parameters cant be indexed.\r\n        let lStrideCount: number = lData.length / lStrideDataCount;\r\n        if (!this.mLayout.indexable && lParameterLayout.stepMode === VertexParameterStepMode.Index) {\r\n            lStrideCount = this.mIndices.length;\r\n        }\r\n\r\n        // Create buffer data.\r\n        const lBufferData: ArrayBuffer = new ArrayBuffer(lParameterLayout.layout.fixedSize * lStrideCount);\r\n        const lBufferDataView: DataView = new DataView(lBufferData);\r\n\r\n        // Set data in little endian according to the set item format and offset. \r\n        const lSetData = (pByteOffset: number, pFormat: BufferItemFormat, pData: number) => {\r\n            switch (pFormat) {\r\n                case BufferItemFormat.Float32: { lBufferDataView.setFloat32(pByteOffset, pData, true); break; }\r\n                case BufferItemFormat.Uint32: { lBufferDataView.setUint32(pByteOffset, pData, true); break; }\r\n                case BufferItemFormat.Sint32: { lBufferDataView.setInt32(pByteOffset, pData, true); break; }\r\n                case BufferItemFormat.Uint8: { lBufferDataView.setUint8(pByteOffset, pData); break; }\r\n                case BufferItemFormat.Sint8: { lBufferDataView.setInt8(pByteOffset, pData); break; }\r\n                case BufferItemFormat.Uint16: { lBufferDataView.setUint16(pByteOffset, pData, true); break; }\r\n                case BufferItemFormat.Sint16: { lBufferDataView.setInt16(pByteOffset, pData, true); break; }\r\n\r\n                // Unsupported\r\n                case BufferItemFormat.Float16:\r\n                case BufferItemFormat.Unorm16:\r\n                case BufferItemFormat.Snorm16:\r\n                case BufferItemFormat.Unorm8:\r\n                case BufferItemFormat.Snorm8:\r\n                default: {\r\n                    throw new Exception(`Currently \"${pFormat}\" is not supported for vertex parameter.`, this);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Add data with correct alignment.\r\n        let lDataIndex: number = 0;\r\n        let lByteOffset: number = 0;\r\n        for (let lStrideIndex: number = 0; lStrideIndex < lStrideCount; lStrideIndex++) {\r\n            for (const lStrideItem of lStrideParameter) {\r\n                // Apply stride item alignment to offset.\r\n                lByteOffset = Math.ceil(lByteOffset / lStrideItem.alignment) * lStrideItem.alignment;\r\n\r\n                // Add each parameter to buffer.\r\n                for (let lStrideItemIndex: number = 0; lStrideItemIndex < lStrideItem.count; lStrideItemIndex++) {\r\n                    // Add and iterate data.\r\n                    lSetData(lByteOffset, lStrideItem.format, lData[lDataIndex]);\r\n                    lDataIndex++;\r\n\r\n                    // Increase offset by format byte count.\r\n                    lByteOffset += lStrideItem.itemByteCount;\r\n                }\r\n            }\r\n\r\n            // Apply stride alignment\r\n            lByteOffset = Math.ceil(lByteOffset / lParameterLayout.layout.alignment) * lParameterLayout.layout.alignment;\r\n        }\r\n\r\n        // Load typed array from layout format.\r\n        const lParameterBuffer: GpuBuffer = new GpuBuffer(this.device, lBufferData.byteLength).initialData(lBufferData);\r\n\r\n        // Extend buffer to be a vertex buffer.\r\n        lParameterBuffer.extendUsage(BufferUsage.Vertex);\r\n\r\n        // Save gpu buffer in correct index.\r\n        this.mBuffer.set(pBufferName, lParameterBuffer);\r\n\r\n        // Invalidate on data set.\r\n        this.invalidate(VertexParameterInvalidationType.Data);\r\n\r\n        return lParameterBuffer;\r\n    }\r\n\r\n    /**\r\n     * Get parameter buffer.\r\n     * @param pBufferName - Parameter buffer name.\r\n     */\r\n    public get(pBufferName: string): GpuBuffer {\r\n        // Validate.\r\n        if (!this.mBuffer.has(pBufferName)) {\r\n            throw new Exception(`Vertex parameter buffer for \"${pBufferName}\" not set.`, this);\r\n        }\r\n\r\n        return this.mBuffer.get(pBufferName)!;\r\n    }\r\n\r\n    /**\r\n     * Add raw buffer as vertex parameter.\r\n     * \r\n     * @param pBufferName - Buffer name.\r\n     * @param pBuffer - Buffer.\r\n     */\r\n    public set(pBufferName: string, pBuffer: GpuBuffer): GpuBuffer {\r\n        const lParameterLayout: VertexParameterLayoutBuffer = this.mLayout.parameterBuffer(pBufferName);\r\n\r\n        // Validate alignment.\r\n        if (pBuffer.size % lParameterLayout.layout.fixedSize !== 0) {\r\n            throw new Exception('Set vertex parameter buffer does not align with layout.', this);\r\n        }\r\n\r\n        // Calculate stride count.\r\n        let lStrideCount: number = pBuffer.size / lParameterLayout.layout.fixedSize;\r\n        if (!this.mLayout.indexable && lParameterLayout.stepMode === VertexParameterStepMode.Index) {\r\n            lStrideCount = this.mIndices.length;\r\n        }\r\n\r\n        // Validate length.\r\n        if (pBuffer.size !== (lParameterLayout.layout.fixedSize * lStrideCount)) {\r\n            throw new Exception(`Set vertex parameter buffer does not fit needed buffer size (Has:${pBuffer.size} => Should:${lParameterLayout.layout.fixedSize * lStrideCount}).`, this);\r\n        }\r\n\r\n        // Extend usage.\r\n        pBuffer.extendUsage(BufferUsage.Vertex);\r\n\r\n        // Add buffer.\r\n        this.mBuffer.set(pBufferName, pBuffer);\r\n\r\n        // Invalidate on data set.\r\n        this.invalidate(VertexParameterInvalidationType.Data);\r\n\r\n        return pBuffer;\r\n    }\r\n}\r\n\r\nexport enum VertexParameterInvalidationType {\r\n    Data = 'DataChange',\r\n}","import { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { ShaderSetupReferenceData } from './shader-setup';\r\n\r\n/**\r\n * Child setup object to add compute entry points for shaders. \r\n */\r\nexport class ShaderComputeEntryPointSetup extends GpuObjectChildSetup<ShaderSetupReferenceData, ComputeSizeCallback> {\r\n    /**\r\n     * Setup compute entry with a static size.\r\n     */\r\n    public size(pX: number, pY: number = 1, pZ: number = 1): void {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Callback size.\r\n        this.sendData(pX, pY, pZ);\r\n    }\r\n}\r\n\r\ntype ComputeSizeCallback = (pX: number, pY: number, pZ: number) => void;","import { BufferItemFormat } from '../../constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../../constant/buffer-item-multiplier.enum';\r\nimport { GpuObjectChildSetup } from '../../gpu_object/gpu-object-child-setup';\r\nimport { ShaderSetupReferenceData } from './shader-setup';\r\n\r\n/**\r\n * Child setup object to render targets to shaders. \r\n */\r\nexport class ShaderFragmentEntryPointSetup extends GpuObjectChildSetup<ShaderSetupReferenceData, RenderTargetCallback> {\r\n    /**\r\n     * Setup fragment render target.\r\n     */\r\n    public addRenderTarget(pName: string, pLocationIndex: number, pDataFormat: BufferItemFormat, pDataMultiplier: BufferItemMultiplier): this {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        const lRenderTarget: ShaderFragmentEntryPointRenderTargetSetupData = {\r\n            name: pName,\r\n            location: pLocationIndex,\r\n            format: pDataFormat,\r\n            multiplier: pDataMultiplier\r\n        };\r\n\r\n        // Callback size.\r\n        this.sendData(lRenderTarget);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport type ShaderFragmentEntryPointRenderTargetSetupData = {\r\n    name: string;\r\n    location: number;\r\n    format: BufferItemFormat;\r\n    multiplier: BufferItemMultiplier;\r\n};\r\n\r\ntype RenderTargetCallback = (pRenderTarget: ShaderFragmentEntryPointRenderTargetSetupData) => void;","import { ComputeStage } from '../../constant/compute-stage.enum';\r\nimport { GpuObjectSetup } from '../../gpu_object/gpu-object-setup';\r\nimport { BindGroupLayout } from '../../pipeline/bind_group_layout/bind-group-layout';\r\nimport { BindGroupLayoutSetup } from '../../pipeline/bind_group_layout/bind-group-layout-setup';\r\nimport { VertexParameterLayout } from '../../pipeline/vertex_parameter/vertex-parameter-layout';\r\nimport { VertexParameterLayoutSetup } from '../../pipeline/vertex_parameter/vertex-parameter-layout-setup';\r\nimport { ShaderModuleEntryPointFragmentRenderTarget } from '../shader';\r\nimport { ShaderComputeEntryPointSetup } from './shader-compute-entry-point-setup';\r\nimport { ShaderFragmentEntryPointRenderTargetSetupData, ShaderFragmentEntryPointSetup } from './shader-fragment-entry-point-setup';\r\n\r\n/**\r\n * Setup object to setup all layout and constant informations for shaders.\r\n */\r\nexport class ShaderSetup extends GpuObjectSetup<ShaderSetupReferenceData> {\r\n    /**\r\n     * Setup compute entry point.\r\n     * When size is not called, the compute entry point will be setup with a dynamic size.\r\n     * \r\n     * @param pName - Compute entry name.\r\n     */\r\n    public computeEntryPoint(pName: string): ShaderComputeEntryPointSetup {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Create dynamic compute entry point.\r\n        const lEntryPoint: ShaderEntryPointComputeSetupData = {\r\n            name: pName,\r\n            workgroupDimension: null\r\n        };\r\n\r\n        // Append compute entry.\r\n        this.setupData.computeEntrypoints.push(lEntryPoint);\r\n\r\n        // Return compute entry setup object.\r\n        return new ShaderComputeEntryPointSetup(this.setupReferences, (pX: number, pY: number, pZ: number) => {\r\n            lEntryPoint.workgroupDimension = {\r\n                x: pX,\r\n                y: pY,\r\n                z: pZ\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Setup fragment entry point.\r\n     * \r\n     * @param pName - Fragment entry name.\r\n     */\r\n    public fragmentEntryPoint(pName: string): ShaderFragmentEntryPointSetup {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Create empty fragment entry point.\r\n        const lEntryPoint: ShaderEntryPointFragmentSetupData = {\r\n            name: pName,\r\n            renderTargets: new Array<ShaderFragmentEntryPointRenderTargetSetupData>()\r\n        };\r\n\r\n        // Append compute entry.\r\n        this.setupData.fragmentEntrypoints.push(lEntryPoint);\r\n\r\n        // Return fragment entry setup object.\r\n        return new ShaderFragmentEntryPointSetup(this.setupReferences, (pRenderTarget: ShaderModuleEntryPointFragmentRenderTarget) => {\r\n            lEntryPoint.renderTargets.push(pRenderTarget);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add group to layout.\r\n     * \r\n     * @param pIndex - Bind group index.\r\n     * @param pGroup - Group.\r\n     * \r\n     * @returns the same group.\r\n     */\r\n    public group(pIndex: number, pGroup: BindGroupLayout): BindGroupLayout;\r\n    public group(pIndex: number, pGroupName: string, pSetupCall: ((pSetup: BindGroupLayoutSetup) => void)): BindGroupLayout;\r\n    public group(pIndex: number, pGroupOrName: BindGroupLayout | string, pSetupCall?: ((pSetup: BindGroupLayoutSetup) => void)): BindGroupLayout {\r\n        // Use existing or create new bind group.\r\n        let lBindGroupLayout: BindGroupLayout;\r\n        if (typeof pGroupOrName === 'string') {\r\n            // Create new group\r\n            lBindGroupLayout = new BindGroupLayout(this.device, pGroupOrName).setup(pSetupCall);\r\n        } else {\r\n            // Use existing group.\r\n            lBindGroupLayout = pGroupOrName;\r\n        }\r\n\r\n        // Register group.\r\n        this.setupData.bindingGroups.push({\r\n            index: pIndex,\r\n            group: lBindGroupLayout\r\n        });\r\n\r\n        return lBindGroupLayout;\r\n    }\r\n\r\n    /**\r\n     * Add static pipeline parameters definitions.\r\n     * \r\n     * @param pName- Parameter name.\r\n     * @param pFormat - Parameter format.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public parameter(pName: string, ...pStageUsage: Array<ComputeStage>): this {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Add parameter.\r\n        this.setupData.parameter.push({ name: pName, usage: pStageUsage });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Setup vertex entry point.\r\n     * \r\n     * @param pName - Vertex entry name.\r\n     */\r\n    public vertexEntryPoint(pName: string, pSetupCallback: (pSetup: VertexParameterLayoutSetup) => void): VertexParameterLayout {\r\n        // Lock setup to a setup call.\r\n        this.ensureThatInSetup();\r\n\r\n        // Create and setup vertex parameter.\r\n        const lVertexParameterLayout: VertexParameterLayout = new VertexParameterLayout(this.device)\r\n            .setup(pSetupCallback);\r\n\r\n        // Create empty fragment entry point.\r\n        const lEntryPoint: ShaderEntryPointVertexSetupData = {\r\n            name: pName,\r\n            parameter: lVertexParameterLayout\r\n        };\r\n\r\n        // Append compute entry.\r\n        this.setupData.vertexEntrypoints.push(lEntryPoint);\r\n\r\n        return lVertexParameterLayout;\r\n    }\r\n\r\n    /**\r\n     * Fill in default data before the setup starts.\r\n     *\r\n     * @param pDataReference - Setup data reference.\r\n     */\r\n    protected override fillDefaultData(pDataReference: ShaderSetupReferenceData): void {\r\n        // Entry points.\r\n        pDataReference.computeEntrypoints = new Array<ShaderEntryPointComputeSetupData>();\r\n        pDataReference.fragmentEntrypoints = new Array<ShaderEntryPointFragmentSetupData>();\r\n        pDataReference.vertexEntrypoints = new Array<ShaderEntryPointVertexSetupData>();\r\n\r\n        // Parameter.\r\n        pDataReference.parameter = new Array<{\r\n            name: string;\r\n            usage: Array<ComputeStage>;\r\n        }>();\r\n\r\n        // Bind groups.\r\n        pDataReference.bindingGroups = new Array<{\r\n            index: number;\r\n            group: BindGroupLayout;\r\n        }>();\r\n    }\r\n}\r\n\r\ntype ShaderEntryPointComputeSetupData = {\r\n    name: string;\r\n    workgroupDimension: {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n    } | null;\r\n};\r\n\r\ntype ShaderEntryPointVertexSetupData = {\r\n    name: string;\r\n    parameter: VertexParameterLayout;\r\n};\r\n\r\ntype ShaderEntryPointFragmentSetupData = {\r\n    name: string;\r\n    renderTargets: Array<ShaderFragmentEntryPointRenderTargetSetupData>;\r\n};\r\n\r\nexport type ShaderSetupReferenceData = {\r\n    // Entry points.\r\n    computeEntrypoints: Array<ShaderEntryPointComputeSetupData>;\r\n    fragmentEntrypoints: Array<ShaderEntryPointFragmentSetupData>;\r\n    vertexEntrypoints: Array<ShaderEntryPointVertexSetupData>;\r\n\r\n    // Parameter.\r\n    parameter: Array<{\r\n        name: string;\r\n        usage: Array<ComputeStage>;\r\n    }>;\r\n\r\n    // Bind groups.\r\n    bindingGroups: Array<{\r\n        index: number;\r\n        group: BindGroupLayout;\r\n    }>;\r\n};","import { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject } from '../gpu_object/gpu-object';\r\nimport { ComputePipeline } from '../pipeline/compute-pipeline';\r\nimport { PipelineLayout } from '../pipeline/pipeline-layout';\r\nimport { Shader } from './shader';\r\n\r\n/**\r\n * Compute part of a shader programm.\r\n */\r\nexport class ShaderComputeModule extends GpuObject {\r\n    private readonly mEntryPoint: string;\r\n    private readonly mShader: Shader;\r\n    private readonly mSize: [number, number, number];\r\n\r\n    /**\r\n     * Compute entry point.\r\n     */\r\n    public get entryPoint(): string {\r\n        return this.mEntryPoint;\r\n    }\r\n\r\n    /**\r\n     * Shader pipeline layout.\r\n     */\r\n    public get layout(): PipelineLayout {\r\n        return this.mShader.layout;\r\n    }\r\n\r\n    /**\r\n     * Module shader.\r\n     */\r\n    public get shader(): Shader {\r\n        return this.mShader;\r\n    }\r\n\r\n    /**\r\n     * Workgroup size x.\r\n     */\r\n    public get workGroupSizeX(): number {\r\n        return this.mSize[0];\r\n    }\r\n\r\n    /**\r\n     * Workgroup size y.\r\n     */\r\n    public get workGroupSizeY(): number {\r\n        return this.mSize[1];\r\n    }\r\n\r\n    /**\r\n     * Workgroup size z.\r\n     */\r\n    public get workGroupSizeZ(): number {\r\n        return this.mSize[2];\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pShader - Shader.\r\n     * @param pEntryPointName - Compute entry point.\r\n     * @param pSize - Workgroup size.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pShader: Shader, pEntryPointName: string, pSize?: [number, number, number]) {\r\n        super(pDevice);\r\n\r\n        this.mEntryPoint = pEntryPointName;\r\n        this.mShader = pShader;\r\n        this.mSize = pSize ?? [-1, -1, -1];\r\n    }\r\n\r\n    /**\r\n     * Create a new compute pipeline.\r\n     * \r\n     * @returns new compute pipeline. \r\n     */\r\n    public create(): ComputePipeline {\r\n        return new ComputePipeline(this.device, this);\r\n    }\r\n}","import { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject } from '../gpu_object/gpu-object';\r\nimport { PipelineLayout } from '../pipeline/pipeline-layout';\r\nimport { RenderTargets } from '../pipeline/render_targets/render-targets';\r\nimport { VertexFragmentPipeline } from '../pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline';\r\nimport { VertexParameterLayout } from '../pipeline/vertex_parameter/vertex-parameter-layout';\r\nimport { Shader } from './shader';\r\n\r\n/**\r\n * Render parts of a shader programm.\r\n * Uses vertex and fragment shader.\r\n */\r\nexport class ShaderRenderModule extends GpuObject {\r\n    private readonly mFragmentEntryPoint: string | null;\r\n    private readonly mShader: Shader;\r\n    private readonly mVertexEntryPoint: string;\r\n    private readonly mVertexParameter: VertexParameterLayout;\r\n\r\n    /**\r\n     * Fragment entry point.\r\n     */\r\n    public get fragmentEntryPoint(): string | null {\r\n        return this.mFragmentEntryPoint;\r\n    }\r\n\r\n    /**\r\n     * Shader pipeline layout.\r\n     */\r\n    public get layout(): PipelineLayout {\r\n        return this.mShader.layout;\r\n    }\r\n\r\n    /**\r\n     * Module shader.\r\n     */\r\n    public get shader(): Shader {\r\n        return this.mShader;\r\n    }\r\n\r\n    /**\r\n     * Compute entry point.\r\n     */\r\n    public get vertexEntryPoint(): string {\r\n        return this.mVertexEntryPoint;\r\n    }\r\n\r\n    /**\r\n     * Vertex parameter.\r\n     */\r\n    public get vertexParameter(): VertexParameterLayout {\r\n        return this.mVertexParameter;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pShader - Shader.\r\n     * @param pEntryPointName - Compute entry point.\r\n     * @param pSize - Workgroup size.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pShader: Shader, pVertexEntryPointName: string, pVertexParameter: VertexParameterLayout, pFragmentEntryPointName?: string) {\r\n        super(pDevice);\r\n\r\n        this.mVertexEntryPoint = pVertexEntryPointName;\r\n        this.mVertexParameter = pVertexParameter;\r\n        this.mFragmentEntryPoint = pFragmentEntryPointName ?? null;\r\n        this.mShader = pShader;\r\n    }\r\n\r\n    /**\r\n     * Create a new render pipeline for set render targets.\r\n     * \r\n     * @param pRenderTargets - Render targets of pipeline.\r\n     * \r\n     * @returns new render pipeline. \r\n     */\r\n    public create(pRenderTargets: RenderTargets): VertexFragmentPipeline {\r\n        return new VertexFragmentPipeline(this.device, this, pRenderTargets);\r\n    }\r\n}","import { Dictionary, Exception } from '@kartoffelgames/core';\r\nimport { BufferItemFormat } from '../constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../constant/buffer-item-multiplier.enum';\r\nimport { ComputeStage } from '../constant/compute-stage.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject, GpuObjectSetupReferences } from '../gpu_object/gpu-object';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\nimport { IGpuObjectSetup } from '../gpu_object/interface/i-gpu-object-setup';\r\nimport { BindGroupLayout } from '../pipeline/bind_group_layout/bind-group-layout';\r\nimport { PipelineLayout } from '../pipeline/pipeline-layout';\r\nimport { VertexParameterLayout } from '../pipeline/vertex_parameter/vertex-parameter-layout';\r\nimport { ShaderSetup, ShaderSetupReferenceData } from './setup/shader-setup';\r\nimport { ShaderComputeModule } from './shader-compute-module';\r\nimport { ShaderRenderModule } from './shader-render-module';\r\n\r\n/**\r\n * Gpu shader program.\r\n * Can be split into its program modules.\r\n */\r\nexport class Shader extends GpuObject<GPUShaderModule, '', ShaderSetup> implements IGpuObjectNative<GPUShaderModule>, IGpuObjectSetup<ShaderSetup> {\r\n    private readonly mEntryPoints: ShaderModuleEntryPoints;\r\n    private readonly mParameter: Dictionary<string, Set<ComputeStage>>;\r\n    private mPipelineLayout: PipelineLayout | null;\r\n    private readonly mSource: string;\r\n    private readonly mSourceMap: any | null;\r\n\r\n    /**\r\n     * Shader pipeline layout.\r\n     */\r\n    public get layout(): PipelineLayout {\r\n        // Ensure setup is called.\r\n        this.ensureSetup();\r\n\r\n        return this.mPipelineLayout!;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUShaderModule {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Gpu Device reference.\r\n     * @param pSource - Shader source as wgsl code.\r\n     * @param pLayout - Shader layout information.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pSource: string, pSourceMap: any | null = null) {\r\n        super(pDevice);\r\n\r\n        // Create shader information for source.\r\n        this.mSource = pSource;\r\n        this.mSourceMap = pSourceMap;\r\n\r\n        // Init default unset values.\r\n        this.mParameter = new Dictionary<string, Set<ComputeStage>>();\r\n        this.mPipelineLayout = null;\r\n        this.mEntryPoints = {\r\n            compute: new Dictionary<string, ShaderModuleEntryPointCompute>(),\r\n            vertex: new Dictionary<string, ShaderModuleEntryPointVertex>(),\r\n            fragment: new Dictionary<string, ShaderModuleEntryPointFragment>()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create a compute module from shader entry point.\r\n     * \r\n     * @param pEntryName - Compute entry name.\r\n     * \r\n     * @returns shader compute module. \r\n     */\r\n    public createComputeModule(pEntryName: string): ShaderComputeModule {\r\n        // Ensure setup is called.\r\n        this.ensureSetup();\r\n\r\n        const lEntryPoint: ShaderModuleEntryPointCompute | undefined = this.mEntryPoints.compute.get(pEntryName);\r\n        if (!lEntryPoint) {\r\n            throw new Exception(`Compute entry point \"${pEntryName}\" does not exists.`, this);\r\n        }\r\n\r\n        // Return shader module without defined workgroup sizes.\r\n        if (!lEntryPoint.static) {\r\n            return new ShaderComputeModule(this.device, this, pEntryName);\r\n        }\r\n\r\n        // Define workgroup sizes.\r\n        return new ShaderComputeModule(this.device, this, pEntryName, [lEntryPoint.workgroupDimension.x ?? 1, lEntryPoint.workgroupDimension.y ?? 1, lEntryPoint.workgroupDimension.z ?? 1]);\r\n    }\r\n\r\n    /**\r\n     * Create a render module from a vertex and fragment entry point.\r\n     * \r\n     * @param pVertexEntryName - Vertex entry point.\r\n     * @param pFragmentEntryName - Optional fragment entry point.\r\n     * \r\n     * @returns shader render module. \r\n     */\r\n    public createRenderModule(pVertexEntryName: string, pFragmentEntryName?: string): ShaderRenderModule {\r\n        // Ensure setup is called.\r\n        this.ensureSetup();\r\n\r\n        const lVertexEntryPoint: ShaderModuleEntryPointVertex | undefined = this.mEntryPoints.vertex.get(pVertexEntryName);\r\n        if (!lVertexEntryPoint) {\r\n            throw new Exception(`Vertex entry point \"${pVertexEntryName}\" does not exists.`, this);\r\n        }\r\n\r\n        // Return shader module without fragment entry.\r\n        if (!pFragmentEntryName) {\r\n            return new ShaderRenderModule(this.device, this, pVertexEntryName, lVertexEntryPoint.parameter);\r\n        }\r\n\r\n        // Validate fragment entry point.\r\n        const lFragmentEntryPoint: ShaderModuleEntryPointFragment | undefined = this.mEntryPoints.fragment.get(pFragmentEntryName);\r\n        if (!lFragmentEntryPoint) {\r\n            throw new Exception(`Fragment entry point \"${pFragmentEntryName}\" does not exists.`, this);\r\n        }\r\n\r\n        return new ShaderRenderModule(this.device, this, pVertexEntryName, lVertexEntryPoint.parameter, pFragmentEntryName);\r\n    }\r\n\r\n    /**\r\n     * Get shader pipeline parameters.\r\n     * \r\n     * @param pParameterName - Parameter name.\r\n     */\r\n    public parameter(pParameterName: string): Set<ComputeStage> {\r\n        // Ensure setup is called.\r\n        this.ensureSetup();\r\n\r\n        // Try to read parameter type.\r\n        const lParameterType: Set<ComputeStage> | undefined = this.mParameter.get(pParameterName);\r\n        if (!lParameterType) {\r\n            throw new Exception(`Shader has parameter \"${pParameterName}\" not defined.`, this);\r\n        }\r\n\r\n        return new Set(lParameterType);\r\n    }\r\n\r\n    /**\r\n     * Setup render targets.\r\n     * Can only be called once and is the only way to create or add target textures.\r\n     * \r\n     * @param pSetup - Setup call.\r\n     * \r\n     * @returns this. \r\n     */\r\n    public override setup(pSetupCallback?: ((pSetup: ShaderSetup) => void) | undefined): this {\r\n        return super.setup(pSetupCallback);\r\n    }\r\n\r\n    /**\r\n     * Generate shader module.\r\n     */\r\n    protected override generateNative(): GPUShaderModule {\r\n        // Read pipeline for compilation hints.\r\n        const lPipelineLayout = this.mPipelineLayout!.native;\r\n\r\n        // Create compilationHints for every entry point\r\n        const lCompilationHints: Array<GPUShaderModuleCompilationHint> = new Array<GPUShaderModuleCompilationHint>();\r\n        for (const lEntryName of [...this.mEntryPoints.vertex.keys(), ...this.mEntryPoints.fragment.keys(), ...this.mEntryPoints.compute.keys()]) {\r\n            lCompilationHints.push({\r\n                entryPoint: lEntryName,\r\n                layout: lPipelineLayout\r\n            });\r\n        }\r\n\r\n        // Create shader module use hints to speed up compilation on safari.\r\n        return this.device.gpu.createShaderModule({\r\n            code: this.mSource,\r\n            compilationHints: lCompilationHints,\r\n            sourceMap: this.mSourceMap ?? {}\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Setup with setup object.\r\n     * \r\n     * @param pReferences - Used references.\r\n     */\r\n    protected override onSetup(pReferences: ShaderSetupReferenceData): void {\r\n        // Setup parameter.\r\n        for (const lParameter of pReferences.parameter) {\r\n            // Dont override parameters.\r\n            if (this.mParameter.has(lParameter.name)) {\r\n                throw new Exception(`Can't add parameter \"${lParameter.name}\" more than once.`, this);\r\n            }\r\n\r\n            // Add parameter.\r\n            this.mParameter.set(lParameter.name, new Set<ComputeStage>(lParameter.usage));\r\n        }\r\n\r\n        // Convert fragment entry point informations\r\n        for (const lFragmentEntry of pReferences.fragmentEntrypoints) {\r\n            // Restrict doublicate fragment entry names.\r\n            if (this.mEntryPoints.fragment.has(lFragmentEntry.name)) {\r\n                throw new Exception(`Fragment entry \"${lFragmentEntry.name}\" was setup more than once.`, this);\r\n            }\r\n\r\n            // Convert all render attachments to a location mapping.\r\n            const lRenderTargetLocations: Set<number> = new Set<number>();\r\n            const lRenderTargets: ShaderModuleEntryPointFragment['renderTargets'] = new Dictionary<string, any>();\r\n            for (const lRenderTarget of lFragmentEntry.renderTargets) {\r\n                // Restrict doublicate fragment entry render target names.\r\n                if (lRenderTargets.has(lRenderTarget.name)) {\r\n                    throw new Exception(`Fragment entry \"${lFragmentEntry.name}\" was has doublicate render attachment name \"${lRenderTarget.name}\".`, this);\r\n                }\r\n\r\n                // Restrict doublicate fragment entry render target locations.\r\n                if (lRenderTargetLocations.has(lRenderTarget.location)) {\r\n                    throw new Exception(`Fragment entry \"${lFragmentEntry.name}\" was has doublicate render attachment location index \"${lRenderTarget.location}\".`, this);\r\n                }\r\n\r\n                // Add location to location index buffer. Used for finding dublicates.\r\n                lRenderTargetLocations.add(lRenderTarget.location);\r\n\r\n                // Add target to list. \r\n                lRenderTargets.set(lRenderTarget.name, {\r\n                    name: lRenderTarget.name,\r\n                    location: lRenderTarget.location,\r\n                    format: lRenderTarget.format,\r\n                    multiplier: lRenderTarget.multiplier\r\n                });\r\n            }\r\n\r\n            // Set fragment entry point definition. \r\n            this.mEntryPoints.fragment.set(lFragmentEntry.name, {\r\n                renderTargets: lRenderTargets\r\n            });\r\n        }\r\n\r\n        // Convert vertex entry point informations\r\n        for (const lVertexEntry of pReferences.vertexEntrypoints) {\r\n            // Restrict doublicate vertex entry names.\r\n            if (this.mEntryPoints.vertex.has(lVertexEntry.name)) {\r\n                throw new Exception(`Vertex entry \"${lVertexEntry.name}\" was setup more than once.`, this);\r\n            }\r\n\r\n            // Set vertex entry point definition. \r\n            this.mEntryPoints.vertex.set(lVertexEntry.name, {\r\n                parameter: lVertexEntry.parameter\r\n            });\r\n        }\r\n\r\n        // Convert compute entry point informations\r\n        for (const lComputeEntry of pReferences.computeEntrypoints) {\r\n            // Restrict doublicate compute entry names.\r\n            if (this.mEntryPoints.compute.has(lComputeEntry.name)) {\r\n                throw new Exception(`Vertex entry \"${lComputeEntry.name}\" was setup more than once.`, this);\r\n            }\r\n\r\n            // Set vertex entry point definition. \r\n            this.mEntryPoints.compute.set(lComputeEntry.name, {\r\n                static: lComputeEntry.workgroupDimension !== null,\r\n                workgroupDimension: {\r\n                    x: lComputeEntry.workgroupDimension?.x ?? null,\r\n                    y: lComputeEntry.workgroupDimension?.y ?? null,\r\n                    z: lComputeEntry.workgroupDimension?.z ?? null\r\n                }\r\n            });\r\n        }\r\n\r\n        // Generate initial pipeline layout.\r\n        const lInitialPipelineLayout: Dictionary<number, BindGroupLayout> = new Dictionary<number, BindGroupLayout>();\r\n        for (const lGroup of pReferences.bindingGroups) {\r\n            // Set bind group layout with group index.\r\n            lInitialPipelineLayout.set(lGroup.index, lGroup.group);\r\n        }\r\n        this.mPipelineLayout = new PipelineLayout(this.device, lInitialPipelineLayout);\r\n    }\r\n\r\n    /**\r\n     * Create setup object. Return null to skip any setups.\r\n     * \r\n     *  @param pReferences - Unfilled setup references.\r\n     * \r\n     *  @returns Setup object.\r\n     */\r\n    protected override onSetupObjectCreate(pReferences: GpuObjectSetupReferences<ShaderSetupReferenceData>): ShaderSetup {\r\n        return new ShaderSetup(pReferences);\r\n    }\r\n}\r\n\r\nexport type ShaderModuleEntryPointCompute = {\r\n    static: boolean;\r\n    workgroupDimension: {\r\n        x: number | null;\r\n        y: number | null;\r\n        z: number | null;\r\n    };\r\n};\r\n\r\nexport type ShaderModuleEntryPointVertex = {\r\n    parameter: VertexParameterLayout;\r\n};\r\n\r\nexport type ShaderModuleEntryPointFragmentRenderTarget = {\r\n    name: string;\r\n    location: number;\r\n    format: BufferItemFormat;\r\n    multiplier: BufferItemMultiplier;\r\n};\r\nexport type ShaderModuleEntryPointFragment = {\r\n    renderTargets: Dictionary<string, ShaderModuleEntryPointFragmentRenderTarget>;\r\n};\r\n\r\ntype ShaderModuleEntryPoints = {\r\n    compute: Dictionary<string, ShaderModuleEntryPointCompute>,\r\n    vertex: Dictionary<string, ShaderModuleEntryPointVertex>,\r\n    fragment: Dictionary<string, ShaderModuleEntryPointFragment>,\r\n};","import { TextureDimension } from '../constant/texture-dimension.enum';\r\nimport { TextureFormat } from '../constant/texture-format.enum';\r\nimport { TextureUsage } from '../constant/texture-usage.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuObject } from '../gpu_object/gpu-object';\r\nimport { GpuObjectInvalidationReasons } from '../gpu_object/gpu-object-invalidation-reasons';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\n\r\n/**\r\n * Canvas texture. Can only be used as render attachment or to be copied into.\r\n * Allways 2D with preferred format.\r\n */\r\nexport class CanvasTexture extends GpuObject<GPUTexture, CanvasTextureInvalidationType> implements IGpuObjectNative<GPUTexture> {\r\n    private readonly mCanvas: HTMLCanvasElement;\r\n    private mContext: GPUCanvasContext | null;\r\n    private readonly mFrameListener: () => void;\r\n\r\n    /**\r\n     * HTML canvas element.\r\n     */\r\n    public get canvas(): HTMLCanvasElement {\r\n        return this.mCanvas;\r\n    }\r\n\r\n    /**\r\n     * Texture depth.\r\n     */\r\n    public get depth(): number {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Texture dimension.\r\n     */\r\n    public get dimension(): TextureDimension {\r\n        return TextureDimension.ThreeDimension;\r\n    }\r\n\r\n    /**\r\n     * Canvas format.\r\n     */\r\n    public get format(): TextureFormat {\r\n        return this.device.formatValidator.preferredCanvasFormat;\r\n    }\r\n\r\n    /**\r\n     * Texture height.\r\n     */\r\n    public get height(): number {\r\n        return this.mCanvas.height;\r\n    } set height(pValue: number) {\r\n        this.mCanvas.height = pValue;\r\n    }\r\n\r\n    /**\r\n     * Texture mip level count.\r\n     */\r\n    public get mipCount(): number {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUTexture {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Texture width.\r\n     */\r\n    public get width(): number {\r\n        return this.mCanvas.width;\r\n    } set width(pValue: number) {\r\n        this.mCanvas.width = pValue;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Device.\r\n     * @param pLayout - Texture layout.\r\n     * @param pCanvas - Canvas of texture.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pCanvas: HTMLCanvasElement) {\r\n        super(pDevice);\r\n\r\n        // Set canvas reference.\r\n        this.mCanvas = pCanvas;\r\n        this.mContext = null;\r\n\r\n        // Set defaults.\r\n        this.height = 1;\r\n        this.width = 1;\r\n\r\n        // Rebuild view on every frame.\r\n        this.mFrameListener = () => {\r\n            this.invalidate(CanvasTextureInvalidationType.NativeRebuild);\r\n        };\r\n        this.device.addFrameChangeListener(this.mFrameListener);\r\n    }\r\n\r\n    /**\r\n     * Destory texture object.\r\n     * @param _pNativeObject - Native canvas texture.\r\n     */\r\n    protected override destroyNative(_pNativeObject: GPUTexture, pReasons: GpuObjectInvalidationReasons<CanvasTextureInvalidationType>): void {\r\n        // Only destroy context when child data/layout has changes.\r\n        if (pReasons.deconstruct) {\r\n            // Remove frame listener.\r\n            this.device.removeFrameChangeListener(this.mFrameListener);\r\n\r\n            // Destory context.\r\n            this.mContext!.unconfigure();\r\n            this.mContext = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate native canvas texture view.\r\n     */\r\n    protected override generateNative(): GPUTexture {\r\n        // Configure new context when not alread configured or destroyed.\r\n        if (!this.mContext) {\r\n            // Create and configure canvas context.\r\n            this.mContext = <GPUCanvasContext><any>this.canvas.getContext('webgpu');\r\n            this.mContext.configure({\r\n                device: this.device.gpu,\r\n                format: this.device.formatValidator.preferredCanvasFormat as GPUTextureFormat,\r\n                usage: TextureUsage.CopyDestination | TextureUsage.RenderAttachment,\r\n                alphaMode: 'opaque'\r\n            });\r\n        }\r\n\r\n        // Read current texture of canvas. Needs to be retrieved for each frame.\r\n        const lTexture = this.mContext.getCurrentTexture();\r\n        lTexture.label = 'Canvas-Texture';\r\n\r\n        return lTexture;\r\n    }\r\n}\r\n\r\n\r\nexport enum CanvasTextureInvalidationType {\r\n    NativeRebuild = 'NativeRebuild'\r\n}","import { TextureUsage } from '../constant/texture-usage.enum';\r\nimport { TextureViewDimension } from '../constant/texture-view-dimension.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuResourceObject, GpuResourceObjectInvalidationType } from '../gpu_object/gpu-resource-object';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\nimport { GpuTexture } from './gpu-texture';\r\nimport { TextureViewMemoryLayout } from './memory_layout/texture-view-memory-layout';\r\n\r\n/**\r\n * View to a gpu texture.\r\n */\r\nexport class GpuTextureView extends GpuResourceObject<TextureUsage, GPUTextureView> implements IGpuObjectNative<GPUTextureView> {\r\n    private mArrayLayerEnd: number;\r\n    private mArrayLayerStart: number;\r\n    private readonly mLayout: TextureViewMemoryLayout;\r\n    private mMipLevelEnd: number;\r\n    private mMipLevelStart: number;\r\n    private readonly mTexture: GpuTexture;\r\n\r\n    /**\r\n     * End index of depth or array level.\r\n     */\r\n    public get arrayLayerEnd(): number {\r\n        return this.mArrayLayerEnd;\r\n    } set arrayLayerEnd(pArrayLayer: number) {\r\n        this.mArrayLayerEnd = pArrayLayer;\r\n\r\n        // Invalidate view.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Staring index of depth or array level.\r\n     */\r\n    public get arrayLayerStart(): number {\r\n        return this.mArrayLayerStart;\r\n    } set arrayLayerStart(pArrayLayerIndex: number) {\r\n        this.mArrayLayerStart = pArrayLayerIndex;\r\n\r\n        // Invalidate view.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Texture layout.\r\n     */\r\n    public get layout(): TextureViewMemoryLayout {\r\n        return this.mLayout;\r\n    }\r\n\r\n    /**\r\n     * End index of mip level.\r\n     */\r\n    public get mipLevelEnd(): number {\r\n        return this.mMipLevelEnd;\r\n    } set mipLevelEnd(pMipLevel: number) {\r\n        this.mMipLevelEnd = pMipLevel;\r\n\r\n        // Invalidate view.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Staring index of mip level.\r\n     */\r\n    public get mipLevelStart(): number {\r\n        return this.mMipLevelStart;\r\n    } set mipLevelStart(pMipLevel: number) {\r\n        this.mMipLevelStart = pMipLevel;\r\n\r\n        // Invalidate view.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUTextureView {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Views texture.\r\n     */\r\n    public get texture(): GpuTexture {\r\n        return this.mTexture;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Device.\r\n     * @param pTexture - Texture of view.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pTexture: GpuTexture, pLayout: TextureViewMemoryLayout) {\r\n        super(pDevice);\r\n\r\n        // Set statics.\r\n        this.mTexture = pTexture;\r\n        this.mLayout = pLayout;\r\n\r\n        // Set defaults.\r\n        this.mMipLevelStart = 0;\r\n        this.mMipLevelEnd = -1;\r\n        this.mArrayLayerStart = 0;\r\n        this.mArrayLayerEnd = -1;\r\n\r\n        // Trigger View rebuild on texture rebuilds.\r\n        pTexture.addInvalidationListener(() => {\r\n            this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n        }, GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Generate native canvas texture view.\r\n     */\r\n    protected override generateNative(): GPUTextureView {\r\n        // Read native texture.\r\n        const lNativeTexture: GPUTexture = this.mTexture.native;\r\n\r\n        // When mip end level or array end layer is not set, use textures max. \r\n        const lMipLevelEnd: number = this.mMipLevelEnd < 0 ? (lNativeTexture.mipLevelCount - 1) : this.mMipLevelEnd;\r\n        const lArrayLayerEnd: number = this.mArrayLayerEnd < 0 ? (lNativeTexture.depthOrArrayLayers - 1) : this.mArrayLayerEnd;\r\n\r\n        // Validate dimension based on \r\n        const lDimensionViewDepthCount: number = (() => {\r\n            switch (this.mLayout.dimension) {\r\n                case TextureViewDimension.OneDimension:\r\n                case TextureViewDimension.TwoDimension: {\r\n                    return 1;\r\n                }\r\n                case TextureViewDimension.Cube: {\r\n                    return 6;\r\n                }\r\n                case TextureViewDimension.CubeArray: {\r\n                    return Math.floor(((lArrayLayerEnd - this.mArrayLayerStart) + 1) / 6) * 6;\r\n                }\r\n                case TextureViewDimension.TwoDimensionArray:\r\n                case TextureViewDimension.ThreeDimension: {\r\n                    return (lArrayLayerEnd - this.mArrayLayerStart) + 1;\r\n                }\r\n                default: {\r\n                    return 1;\r\n                }\r\n            }\r\n        })();\r\n\r\n        // Create and configure canvas context.\r\n        return lNativeTexture.createView({\r\n            aspect: 'all',\r\n            format: this.mLayout.format as GPUTextureFormat,\r\n            dimension: this.mLayout.dimension,\r\n\r\n            // Mip start and end.\r\n            baseMipLevel: this.mMipLevelStart,\r\n            mipLevelCount: (lMipLevelEnd - this.mMipLevelStart) + 1,\r\n\r\n            // Array layer start and end.\r\n            baseArrayLayer: this.mArrayLayerStart,\r\n            arrayLayerCount: lDimensionViewDepthCount\r\n        });\r\n    }\r\n}","import { Exception } from '@kartoffelgames/core';\r\nimport { GpuLimit } from '../constant/gpu-limit.enum';\r\nimport { TextureDimension } from '../constant/texture-dimension.enum';\r\nimport { TextureFormat } from '../constant/texture-format.enum';\r\nimport { TextureUsage } from '../constant/texture-usage.enum';\r\nimport { TextureViewDimension } from '../constant/texture-view-dimension.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuResourceObject, GpuResourceObjectInvalidationType } from '../gpu_object/gpu-resource-object';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\nimport { GpuTextureView } from './gpu-texture-view';\r\nimport { TextureViewMemoryLayout } from './memory_layout/texture-view-memory-layout';\r\n\r\n/**\r\n * Gpu texture that is alocated on gpu memory.\r\n */\r\nexport class GpuTexture extends GpuResourceObject<TextureUsage, GPUTexture> implements IGpuObjectNative<GPUTexture> {\r\n    private mDepth: number;\r\n    private readonly mDimension: TextureDimension;\r\n    private readonly mFormat: TextureFormat;\r\n    private mHeight: number;\r\n    private mMipLevelCount: number;\r\n    private readonly mMultisampled: boolean;\r\n    private mWidth: number;\r\n\r\n    /**\r\n     * Texture depth.\r\n     */\r\n    public get depth(): number {\r\n        return this.mDepth;\r\n    } set depth(pDepth: number) {\r\n        this.mDepth = pDepth;\r\n\r\n        // Invalidate texture.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Texture dimension.\r\n     */\r\n    public get dimension(): TextureDimension {\r\n        return this.mDimension;\r\n    }\r\n\r\n    /**\r\n     * Texture format.\r\n     */\r\n    public get format(): TextureFormat {\r\n        return this.mFormat;\r\n    }\r\n\r\n    /**\r\n     * Texture height.\r\n     */\r\n    public get height(): number {\r\n        return this.mHeight;\r\n    } set height(pHeight: number) {\r\n        this.mHeight = pHeight;\r\n\r\n        // Invalidate texture.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Texture mip level count.\r\n     */\r\n    public get mipCount(): number {\r\n        return this.mMipLevelCount;\r\n    } set mipCount(pMipCount: number) {\r\n        this.mMipLevelCount = pMipCount;\r\n\r\n        // Invalidate texture.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Texture multi sampled.\r\n     */\r\n    public get multiSampled(): boolean {\r\n        return this.mMultisampled;\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUTexture {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Texture width.\r\n     */\r\n    public get width(): number {\r\n        return this.mWidth;\r\n    } set width(pWidth: number) {\r\n        this.mWidth = pWidth;\r\n\r\n        // Invalidate texture.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Device.\r\n     * @param pLayout - Texture layout.\r\n     * @param pCanvas - Canvas of texture.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pParameter: GpuTextureParameter) {\r\n        super(pDevice);\r\n\r\n        // Allways add copy source/destination and copy over information on rebuild. \r\n        this.extendUsage(TextureUsage.CopyDestination);\r\n        this.extendUsage(TextureUsage.CopySource);\r\n\r\n        // Set static config.\r\n        this.mDimension = pParameter.dimension;\r\n        this.mFormat = pParameter.format;\r\n        this.mMultisampled = pParameter.multisampled;\r\n\r\n        // Set defaults.\r\n        this.mMipLevelCount = 1;\r\n        this.mDepth = 1;\r\n        this.mHeight = 1;\r\n        this.mWidth = 1;\r\n    }\r\n\r\n    public copyFrom(...pTextures: Array<GpuTextureCopyOptions | GpuTextureCopyData>): void {\r\n        // Convert into none optional config.\r\n        const lCopyConfig: Array<GpuTextureCopyDefinition> = new Array<GpuTextureCopyDefinition>();\r\n        for (let lTextureIndex: number = 0; lTextureIndex < pTextures.length; lTextureIndex++) {\r\n            const lCopyTexture: GpuTextureCopyOptions | GpuTextureCopyData = pTextures[lTextureIndex];\r\n\r\n            // Create new config from data.\r\n            if (!('data' in lCopyTexture)) {\r\n                // Wild instance checks.\r\n                switch (true) {\r\n                    case lCopyTexture instanceof GpuTexture: {\r\n                        lCopyConfig.push({\r\n                            data: lCopyTexture,\r\n                            mipLevel: 0,\r\n                            external: false,\r\n                            dimension: {\r\n                                width: lCopyTexture.width,\r\n                                height: lCopyTexture.height,\r\n                                depthOrArrayLayers: lCopyTexture.depth\r\n                            },\r\n                            sourceOrigin: { x: 0, y: 0, z: 0 },\r\n                            targetOrigin: { x: 0, y: 0, z: lTextureIndex }\r\n                        });\r\n\r\n                        continue;\r\n                    }\r\n                    case lCopyTexture instanceof ImageBitmap: {\r\n                        lCopyConfig.push({\r\n                            data: lCopyTexture,\r\n                            mipLevel: 0,\r\n                            external: true,\r\n                            dimension: {\r\n                                width: lCopyTexture.width,\r\n                                height: lCopyTexture.height,\r\n                                depthOrArrayLayers: 1\r\n                            },\r\n                            sourceOrigin: { x: 0, y: 0, z: 0 },\r\n                            targetOrigin: { x: 0, y: 0, z: lTextureIndex }\r\n                        });\r\n\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // Not hit. But better to read.\r\n                continue;\r\n            }\r\n\r\n            // Get data type.\r\n            const lExternal: boolean = !(lCopyTexture instanceof GpuTexture);\r\n\r\n            // Fill in missing values with defaults.\r\n            lCopyConfig.push({\r\n                data: lCopyTexture.data as any,\r\n                external: lExternal,\r\n                mipLevel: lCopyTexture.mipLevel ?? 0,\r\n                dimension: {\r\n                    width: lCopyTexture.dimension?.width ?? lCopyTexture.data.width,\r\n                    height: lCopyTexture.dimension?.height ?? lCopyTexture.data.height,\r\n                    depthOrArrayLayers: lCopyTexture.dimension?.depth ?? ('depth' in lCopyTexture.data ? lCopyTexture.data.depth : 1)\r\n                },\r\n                sourceOrigin: lCopyTexture.sourceOrigin ?? { x: 0, y: 0, z: 0 },\r\n                targetOrigin: lCopyTexture.targetOrigin ?? { x: 0, y: 0, z: 0 }\r\n            });\r\n        }\r\n\r\n        // Extend usage to be able to copy from external and gpu textures.\r\n        this.extendUsage(TextureUsage.CopyDestination);\r\n        this.extendUsage(TextureUsage.RenderAttachment);\r\n\r\n        // Generate native texture.\r\n        const lDestination: GPUImageCopyTexture = {\r\n            texture: this.native,\r\n            aspect: 'all'\r\n        };\r\n\r\n        // Create copy command encoder to store copy actions.\r\n        const lCommandDecoder: GPUCommandEncoder = this.device.gpu.createCommandEncoder();\r\n\r\n        for (const lSourceTexture of lCopyConfig) {\r\n            // Skip copy of textures outside of targets mip level.\r\n            if (lDestination.texture.mipLevelCount < lSourceTexture.mipLevel) {\r\n                continue;\r\n            }\r\n\r\n            // Apply destination config.\r\n            lDestination.origin = lSourceTexture.targetOrigin;\r\n            lDestination.mipLevel = lSourceTexture.mipLevel;\r\n\r\n            // Calculate target max size for the specific mip map.\r\n            const lDestinationMaxSize: GpuTextureDimension = {\r\n                width: Math.floor(lDestination.texture.width / Math.pow(2, lDestination.mipLevel)),\r\n                height: Math.floor(lDestination.texture.height / Math.pow(2, lDestination.mipLevel)),\r\n                // On 3D textures the depth count to the mip.\r\n                depthOrArrayLayers: (lDestination.texture.dimension === '3d') ?\r\n                    Math.floor(lDestination.texture.depthOrArrayLayers / Math.pow(2, lDestination.mipLevel)) :\r\n                    lDestination.texture.depthOrArrayLayers,\r\n            };\r\n\r\n            // Clamp copy sizes to lowest.\r\n            const lClampedCopySize: GpuTextureDimension = {\r\n                width: Math.min(\r\n                    lDestinationMaxSize.width - lSourceTexture.targetOrigin.x,\r\n                    lSourceTexture.dimension.width - lSourceTexture.sourceOrigin.x\r\n                ),\r\n                height: Math.min(\r\n                    lDestinationMaxSize.height - lSourceTexture.targetOrigin.y,\r\n                    lSourceTexture.dimension.height - lSourceTexture.sourceOrigin.y\r\n                ),\r\n                depthOrArrayLayers: Math.min(\r\n                    lDestinationMaxSize.depthOrArrayLayers - lSourceTexture.targetOrigin.z,\r\n                    lSourceTexture.dimension.depthOrArrayLayers - lSourceTexture.sourceOrigin.z\r\n                )\r\n            };\r\n\r\n            // Omit copy when nothing should by copied.\r\n            if (lClampedCopySize.width < 1 || lClampedCopySize.height < 1 || lClampedCopySize.depthOrArrayLayers < 1) {\r\n                continue;\r\n            }\r\n\r\n            // Copy external.\r\n            if (lSourceTexture.external) {\r\n                // Create External source.\r\n                const lSource: GPUImageCopyExternalImage = {\r\n                    source: lSourceTexture.data,\r\n                    origin: [lSourceTexture.sourceOrigin.x, lSourceTexture.sourceOrigin.y]\r\n                };\r\n\r\n                // Add external copy into queue.\r\n                this.device.gpu.queue.copyExternalImageToTexture(lSource, lDestination, lClampedCopySize);\r\n\r\n                continue;\r\n            }\r\n\r\n            // Create copy source information.\r\n            const lSource: GPUImageCopyTexture = {\r\n                texture: lSourceTexture.data.native,\r\n                aspect: 'all',\r\n                origin: lSourceTexture.targetOrigin,\r\n                mipLevel: 0\r\n            };\r\n\r\n            // Add copy action to command queue.\r\n            lCommandDecoder.copyTextureToTexture(lSource, lDestination, lClampedCopySize);\r\n        }\r\n\r\n        // Submit copy actions.\r\n        this.device.gpu.queue.submit([lCommandDecoder.finish()]);\r\n    }\r\n\r\n    /**\r\n     * Use texture as view. \r\n     * @returns Texture view.\r\n     */\r\n    public useAs(pDimension?: TextureViewDimension /* Others Optional, layer, mip ... */): GpuTextureView {\r\n        // Use dimension form parameter or convert texture dimension to view dimension.\r\n        const lViewDimension: TextureViewDimension = pDimension ?? (() => {\r\n            switch (this.mDimension) {\r\n                case TextureDimension.OneDimension: {\r\n                    return TextureViewDimension.OneDimension;\r\n                }\r\n                case TextureDimension.TwoDimension: {\r\n                    return TextureViewDimension.TwoDimension;\r\n                }\r\n                case TextureDimension.ThreeDimension: {\r\n                    return TextureViewDimension.ThreeDimension;\r\n                }\r\n            }\r\n        })();\r\n\r\n        const lLayout: TextureViewMemoryLayout = new TextureViewMemoryLayout(this.device, {\r\n            format: this.mFormat,\r\n            dimension: lViewDimension,\r\n            multisampled: this.mMultisampled\r\n        });\r\n\r\n        return new GpuTextureView(this.device, this, lLayout);\r\n    }\r\n\r\n    /**\r\n     * Destory texture object.\r\n     * \r\n     * @param _pNativeObject - Native gpu texture.\r\n     */\r\n    protected override destroyNative(pNativeObject: GPUTexture): void {\r\n        pNativeObject.destroy();\r\n    }\r\n\r\n    /**\r\n     * Generate native canvas texture view.\r\n     */\r\n    protected override generateNative(pOldTexture: GPUTexture): GPUTexture {\r\n        // Generate gpu dimension from memory layout dimension and enforce limits.\r\n        const lTextureDimensions: { textureDimension: GPUTextureDimension, clampedDimensions: [number, number, number]; } = (() => {\r\n            switch (this.mDimension) {\r\n                case TextureDimension.OneDimension: {\r\n                    // Enforce dimension limits.\r\n                    const lDimensionLimit: number = this.device.capabilities.getLimit(GpuLimit.MaxTextureDimension1D);\r\n                    if (this.mWidth > lDimensionLimit) {\r\n                        throw new Exception(`Texture dimension exeeced for 1D Texture(${this.mWidth}).`, this);\r\n                    }\r\n\r\n                    return {\r\n                        textureDimension: '1d',\r\n                        clampedDimensions: [this.mWidth, 1, 1]\r\n                    };\r\n                }\r\n                case TextureDimension.TwoDimension: {\r\n                    // Enforce dimension limits.\r\n                    const lDimensionLimit: number = this.device.capabilities.getLimit(GpuLimit.MaxTextureDimension1D);\r\n                    if (this.mWidth > lDimensionLimit || this.mHeight > lDimensionLimit) {\r\n                        throw new Exception(`Texture dimension exeeced for 2D Texture(${this.mWidth}, ${this.mHeight}).`, this);\r\n                    }\r\n\r\n                    // Enforce array layer limits.\r\n                    const lArrayLayerLimit: number = this.device.capabilities.getLimit(GpuLimit.MaxTextureArrayLayers);\r\n                    if (this.mDepth > lArrayLayerLimit) {\r\n                        throw new Exception(`Texture array layer exeeced for 2D Texture(${this.mDepth}).`, this);\r\n                    }\r\n\r\n                    return {\r\n                        textureDimension: '2d',\r\n                        clampedDimensions: [this.mWidth, this.mHeight, this.mDepth]\r\n                    };\r\n                }\r\n                case TextureDimension.ThreeDimension: {\r\n                    // Enforce dimension limits.\r\n                    const lDimensionLimit: number = this.device.capabilities.getLimit(GpuLimit.MaxTextureDimension3D);\r\n                    if (this.mWidth > lDimensionLimit || this.mHeight > lDimensionLimit || this.mDepth > lDimensionLimit) {\r\n                        throw new Exception(`Texture dimension exeeced for 3D Texture(${this.mWidth}, ${this.mHeight}, ${this.mDepth}).`, this);\r\n                    }\r\n\r\n                    return {\r\n                        textureDimension: '3d',\r\n                        clampedDimensions: [this.mWidth, this.mHeight, this.mDepth]\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n\r\n        // Calculate max mip count.\r\n        let lMaxMipCount;\r\n        if (lTextureDimensions.textureDimension === '3d') {\r\n            lMaxMipCount = 1 + Math.floor(Math.log2(Math.max(this.mWidth, this.mHeight, this.mDepth)));\r\n        } else {\r\n            lMaxMipCount = 1 + Math.floor(Math.log2(Math.max(this.mWidth, this.mHeight)));\r\n        }\r\n\r\n        // Create and configure canvas context.\r\n        const lNewTexture: GPUTexture = this.device.gpu.createTexture({\r\n            label: 'GPU-Texture',\r\n            size: lTextureDimensions.clampedDimensions,\r\n            format: this.mFormat as GPUTextureFormat,\r\n            usage: this.usage,\r\n            dimension: lTextureDimensions.textureDimension,\r\n            sampleCount: this.mMultisampled ? 4 : 1,\r\n            mipLevelCount: Math.min(this.mMipLevelCount, lMaxMipCount)\r\n        });\r\n\r\n        // Copy old texture data into new texture.\r\n        if (pOldTexture !== null && lNewTexture.sampleCount === 1) {\r\n            // Create copy command encoder to store copy actions.\r\n            const lCommandDecoder: GPUCommandEncoder = this.device.gpu.createCommandEncoder();\r\n\r\n            // Copy each mip level.\r\n            const lCopyMipCount: number = Math.min(lNewTexture.mipLevelCount, pOldTexture.mipLevelCount);\r\n            for (let lMipLevel: number = 0; lMipLevel < lCopyMipCount; lMipLevel++) {\r\n\r\n                // Create copy source settings.\r\n                const lSource: GPUImageCopyTexture = {\r\n                    texture: pOldTexture,\r\n                    aspect: 'all',\r\n                    origin: [0, 0, 0],\r\n                    mipLevel: lMipLevel\r\n                };\r\n\r\n                // Create copy destination settings.\r\n                const lDestination: GPUImageCopyTexture = {\r\n                    texture: lNewTexture,\r\n                    aspect: 'all',\r\n                    origin: [0, 0, 0],\r\n                    mipLevel: lMipLevel\r\n                };\r\n\r\n                // Destination clamped sizes to mip level.\r\n                const lDestinationMaxSize: GpuTextureDimension = {\r\n                    width: Math.floor(lNewTexture.width / Math.pow(2, lMipLevel)),\r\n                    height: Math.floor(lNewTexture.height / Math.pow(2, lMipLevel)),\r\n                    // On 3D textures the depth count to the mip.\r\n                    depthOrArrayLayers: (lNewTexture.dimension === '3d') ?\r\n                        Math.floor(lNewTexture.depthOrArrayLayers / Math.pow(2, lMipLevel)) :\r\n                        lNewTexture.depthOrArrayLayers,\r\n                };\r\n\r\n                // Source clamped sizes to mip level.\r\n                const lSourceMaxSize: GpuTextureDimension = {\r\n                    width: Math.floor(pOldTexture.width / Math.pow(2, lMipLevel)),\r\n                    height: Math.floor(pOldTexture.height / Math.pow(2, lMipLevel)),\r\n                    // On 3D textures the depth count to the mip.\r\n                    depthOrArrayLayers: (pOldTexture.dimension === '3d') ?\r\n                        Math.floor(pOldTexture.depthOrArrayLayers / Math.pow(2, lMipLevel)) :\r\n                        pOldTexture.depthOrArrayLayers,\r\n                };\r\n\r\n                // Clamp copy sizes to lowest.\r\n                const lClampedCopySize: GpuTextureDimension = {\r\n                    width: Math.min(lSourceMaxSize.width, lDestinationMaxSize.width),\r\n                    height: Math.min(lSourceMaxSize.height, lDestinationMaxSize.height),\r\n                    depthOrArrayLayers: Math.min(lSourceMaxSize.depthOrArrayLayers, lDestinationMaxSize.depthOrArrayLayers)\r\n                };\r\n\r\n\r\n                // Add copy action to command queue.\r\n                lCommandDecoder.copyTextureToTexture(lSource, lDestination, lClampedCopySize);\r\n            }\r\n\r\n            // Submit copy actions.\r\n            this.device.gpu.queue.submit([lCommandDecoder.finish()]);\r\n        }\r\n\r\n        return lNewTexture;\r\n    }\r\n}\r\n\r\ntype GpuTextureParameter = {\r\n    format: TextureFormat;\r\n    dimension: TextureDimension;\r\n    multisampled: boolean;\r\n};\r\n\r\ntype GpuTextureDimension = {\r\n    width: number;\r\n    height: number;\r\n    depthOrArrayLayers: number;\r\n};\r\n\r\ntype GpuTextureOrigin = {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n};\r\n\r\ntype GpuTextureCopyDefinition = ({ data: GpuTexture; external: false; } | { data: ImageBitmap; external: true; }) & {\r\n    mipLevel: number;\r\n    dimension: GpuTextureDimension;\r\n    sourceOrigin: GpuTextureOrigin;\r\n    targetOrigin: GpuTextureOrigin;\r\n};\r\n\r\ntype GpuTextureCopyData = GpuTexture | ImageBitmap;\r\nexport type GpuTextureCopyOptions = {\r\n    data: GpuTextureCopyData;\r\n    mipLevel?: number;\r\n    dimension?: {\r\n        width: number;\r\n        height: number;\r\n        depth: number;\r\n    };\r\n    sourceOrigin?: GpuTextureOrigin;\r\n    targetOrigin?: GpuTextureOrigin;\r\n};","import { BaseMemoryLayout } from '../../base-memory-layout';\r\nimport { SamplerType } from '../../constant/sampler-type.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\n\r\n/**\r\n * Memory layouts for texture samplers.\r\n */\r\nexport class SamplerMemoryLayout extends BaseMemoryLayout {\r\n    private readonly mSamplerType: SamplerType;\r\n\r\n    /**\r\n     * Sampler type.\r\n     */\r\n    public get samplerType(): SamplerType {\r\n        return this.mSamplerType;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pType: SamplerType) {\r\n        super(pDevice);\r\n\r\n        this.mSamplerType = pType;\r\n    }\r\n}\r\n","import { BaseMemoryLayout } from '../../base-memory-layout';\r\nimport { TextureFormat } from '../../constant/texture-format.enum';\r\nimport { TextureViewDimension } from '../../constant/texture-view-dimension.enum';\r\nimport { GpuDevice } from '../../device/gpu-device';\r\n\r\n/**\r\n * Memory layout for textures views.\r\n */\r\nexport class TextureViewMemoryLayout extends BaseMemoryLayout {\r\n    private readonly mDimension: TextureViewDimension;\r\n    private readonly mFormat: TextureFormat;\r\n    private readonly mMultisampled: boolean;\r\n\r\n    /**\r\n     * Texture dimension.\r\n     */\r\n    public get dimension(): TextureViewDimension {\r\n        return this.mDimension;\r\n    }\r\n\r\n    /**\r\n     * Texture format.\r\n     */\r\n    public get format(): TextureFormat {\r\n        return this.mFormat;\r\n    }\r\n\r\n    /**\r\n     * Texture uses multisample.\r\n     */\r\n    public get multisampled(): boolean {\r\n        return this.mMultisampled;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * \r\n     * @param pDevice - Device reference.\r\n     * @param pParameter - Parameter.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pParameter: TextureViewMemoryLayoutParameter) {\r\n        super(pDevice);\r\n\r\n        // Set defauls.\r\n        this.mDimension = pParameter.dimension;\r\n        this.mFormat = pParameter.format;\r\n        this.mMultisampled = pParameter.multisampled;\r\n    }\r\n}\r\n\r\ntype TextureViewMemoryLayoutParameter = {\r\n    dimension: TextureViewDimension;\r\n    format: TextureFormat;\r\n    multisampled: boolean;\r\n};\r\n","import { Exception } from '@kartoffelgames/core';\r\nimport { CompareFunction } from '../constant/compare-function.enum';\r\nimport { FilterMode } from '../constant/filter-mode.enum';\r\nimport { SamplerType } from '../constant/sampler-type.enum';\r\nimport { WrappingMode } from '../constant/wrapping-mode.enum';\r\nimport { GpuDevice } from '../device/gpu-device';\r\nimport { GpuResourceObject, GpuResourceObjectInvalidationType } from '../gpu_object/gpu-resource-object';\r\nimport { IGpuObjectNative } from '../gpu_object/interface/i-gpu-object-native';\r\nimport { SamplerMemoryLayout } from './memory_layout/sampler-memory-layout';\r\n\r\n/**\r\n * Gpu texture sampler resource.\r\n */\r\nexport class TextureSampler extends GpuResourceObject<0, GPUSampler> implements IGpuObjectNative<GPUSampler> {\r\n    private mCompare: CompareFunction | null;\r\n    private mLodMaxClamp: number;\r\n    private mLodMinClamp: number;\r\n    private mMagFilter: FilterMode;\r\n    private mMaxAnisotropy: number;\r\n    private readonly mMemoryLayout: SamplerMemoryLayout;\r\n    private mMinFilter: FilterMode;\r\n    private mMipmapFilter: FilterMode;\r\n    private mWrapMode: WrappingMode;\r\n\r\n    /**\r\n     * When provided the sampler will be a comparison sampler with the specified compare function.\r\n     */\r\n    public get compare(): CompareFunction | null {\r\n        return this.mCompare;\r\n    } set compare(pValue: CompareFunction | null) {\r\n        this.mCompare = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Specifies the maximum levels of detail, respectively, used internally when sampling a texture.\r\n     */\r\n    public get lodMaxClamp(): number {\r\n        return this.mLodMaxClamp;\r\n    } set lodMaxClamp(pValue: number) {\r\n        this.mLodMaxClamp = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Specifies the minimum levels of detail, respectively, used internally when sampling a texture.\r\n     */\r\n    public get lodMinClamp(): number {\r\n        return this.mLodMinClamp;\r\n    } set lodMinClamp(pValue: number) {\r\n        this.mLodMinClamp = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * How the texture is sampled when a texel covers more than one pixel.\r\n     */\r\n    public get magFilter(): FilterMode {\r\n        return this.mMagFilter;\r\n    } set magFilter(pValue: FilterMode) {\r\n        this.mMagFilter = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Specifies the maximum anisotropy value clamp used by the sampler.\r\n     */\r\n    public get maxAnisotropy(): number {\r\n        return this.mMaxAnisotropy;\r\n    } set maxAnisotropy(pValue: number) {\r\n        this.mMaxAnisotropy = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Sampler memory layout.\r\n     */\r\n    public get memoryLayout(): SamplerMemoryLayout {\r\n        return this.mMemoryLayout;\r\n    }\r\n\r\n    /**\r\n     * How the texture is sampled when a texel covers less than one pixel.\r\n     */\r\n    public get minFilter(): FilterMode {\r\n        return this.mMinFilter;\r\n    } set minFilter(pValue: FilterMode) {\r\n        this.mMinFilter = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Specifies behavior for sampling between mipmap levels.\r\n     */\r\n    public get mipmapFilter(): FilterMode {\r\n        return this.mMipmapFilter;\r\n    } set mipmapFilter(pValue: FilterMode) {\r\n        this.mMipmapFilter = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Native gpu object.\r\n     */\r\n    public override get native(): GPUSampler {\r\n        return super.native;\r\n    }\r\n\r\n    /**\r\n     * Texture sampler edge wrap mode.\r\n     */\r\n    public get wrapMode(): WrappingMode {\r\n        return this.mWrapMode;\r\n    } set wrapMode(pValue: WrappingMode) {\r\n        this.mWrapMode = pValue;\r\n\r\n        // Invalidate native object.\r\n        this.invalidate(GpuResourceObjectInvalidationType.ResourceRebuild);\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param pDevice - Device.\r\n     * @param pLayout - Sampler memory layout.\r\n     */\r\n    public constructor(pDevice: GpuDevice, pLayout: SamplerMemoryLayout) {\r\n        super(pDevice);\r\n\r\n        this.mMemoryLayout = pLayout;\r\n\r\n        // Set defaults.\r\n        this.mCompare = null;\r\n        this.mWrapMode = WrappingMode.ClampToEdge;\r\n        this.mMagFilter = FilterMode.Linear;\r\n        this.mMinFilter = FilterMode.Linear;\r\n        this.mMipmapFilter = FilterMode.Linear;\r\n        this.mLodMinClamp = 0;\r\n        this.mLodMaxClamp = 32;\r\n        this.mMaxAnisotropy = 16;\r\n    }\r\n\r\n    /**\r\n     * Generate native bind data group layout object.\r\n     */\r\n    protected override generateNative(): GPUSampler {\r\n        // Create sampler descriptor.\r\n        const lSamplerOptions: GPUSamplerDescriptor = {\r\n            label: 'Texture-Sampler',\r\n            addressModeU: this.wrapMode,\r\n            addressModeV: this.wrapMode,\r\n            addressModeW: this.wrapMode,\r\n            magFilter: this.magFilter,\r\n            minFilter: this.minFilter,\r\n            mipmapFilter: this.mipmapFilter,\r\n            lodMaxClamp: this.lodMaxClamp,\r\n            lodMinClamp: this.lodMinClamp,\r\n            maxAnisotropy: this.maxAnisotropy\r\n        };\r\n\r\n        // Add compare function when sampler is a compare sampler.\r\n        if (this.memoryLayout.samplerType === SamplerType.Comparison) {\r\n            if (!this.compare) {\r\n                throw new Exception(`No compare function is set for a comparison sampler.`, this);\r\n            }\r\n            lSamplerOptions.compare = this.compare;\r\n        }\r\n\r\n        return this.device.gpu.createSampler(lSamplerOptions);\r\n    }\r\n}","export default \"// ------------------------- Object Values ---------------------- //\\r\\n@group(0) @binding(0) var<uniform> transformationMatrix: mat4x4<f32>;\\r\\n@group(0) @binding(1) var<uniform> color: vec4<f32>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- World Values ---------------------- //\\r\\nstruct Camera {\\r\\n    viewProjection: mat4x4<f32>,\\r\\n    view: mat4x4<f32>,\\r\\n    projection: mat4x4<f32>,\\r\\n    rotation: mat4x4<f32>,\\r\\n    translation: mat4x4<f32>,\\r\\n    position: vec3<f32>\\r\\n}\\r\\n@group(1) @binding(0) var<uniform> camera: Camera;\\r\\n\\r\\nstruct TimeData {\\r\\n    timestamp: f32,\\r\\n    delta: f32\\r\\n}\\r\\n@group(1) @binding(1) var<uniform> time: TimeData;\\r\\n\\r\\nstruct AmbientLight {\\r\\n    color: vec4<f32>\\r\\n}\\r\\n@group(1) @binding(2) var<uniform> ambientLight: AmbientLight;\\r\\n\\r\\nstruct PointLight {\\r\\n    position: vec4<f32>,\\r\\n    color: vec4<f32>,\\r\\n    range: f32\\r\\n}\\r\\n@group(1) @binding(3) var<storage, read> pointLights: array<PointLight>;\\r\\n\\r\\n@group(1) @binding(4) var<storage, read_write> debugValue: f32;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// --------------------- Light calculations --------------------- //\\r\\n\\r\\n/**\\r\\n * Calculate point light output.\\r\\n */\\r\\nfn calculatePointLights(fragmentPosition: vec4<f32>, normal: vec4<f32>) -> vec4<f32> {\\r\\n    // Count of point lights.\\r\\n    let pointLightCount: u32 = arrayLength(&pointLights);\\r\\n\\r\\n    var lightResult: vec4<f32> = vec4<f32>(0, 0, 0, 1);\\r\\n\\r\\n    for (var index: u32 = 0; index < pointLightCount; index++) {\\r\\n        var pointLight: PointLight = pointLights[index];\\r\\n\\r\\n        // Calculate light strength based on angle of incidence.\\r\\n        let lightDirection: vec4<f32> = normalize(pointLight.position - fragmentPosition);\\r\\n        let diffuse: f32 = max(dot(normal, lightDirection), 0.0);\\r\\n\\r\\n        lightResult += pointLight.color * diffuse;\\r\\n    }\\r\\n\\r\\n    return lightResult;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Apply lights to fragment color.\\r\\n */\\r\\nfn applyLight(colorIn: vec4<f32>, fragmentPosition: vec4<f32>, normal: vec4<f32>) -> vec4<f32> {\\r\\n    var lightColor: vec4<f32> = vec4<f32>(0, 0, 0, 1);\\r\\n\\r\\n    lightColor += ambientLight.color;\\r\\n    lightColor += calculatePointLights(fragmentPosition, normal);\\r\\n\\r\\n    return lightColor * colorIn;\\r\\n}\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\nstruct VertexOut {\\r\\n    @builtin(position) position: vec4<f32>,\\r\\n    @location(0) color: vec4<f32>,\\r\\n    @location(1) normal: vec4<f32>,\\r\\n    @location(2) fragmentPosition: vec4<f32>,\\r\\n}\\r\\n\\r\\nstruct VertexIn {\\r\\n    @builtin(instance_index) instanceId : u32,\\r\\n    @location(0) position: vec4<f32>,\\r\\n    @location(1) normal: vec4<f32>\\r\\n}\\r\\n\\r\\n@vertex\\r\\nfn vertex_main(vertex: VertexIn) -> VertexOut {\\r\\n    var worldposition: vec4<f32> = transformationMatrix * vertex.position;\\r\\n\\r\\n    var out: VertexOut;\\r\\n    out.position = camera.viewProjection * worldposition;\\r\\n    out.normal = vertex.normal;\\r\\n    out.fragmentPosition = worldposition;\\r\\n    out.color = color;\\r\\n\\r\\n    return out;\\r\\n}\\r\\n\\r\\nstruct FragmentIn {\\r\\n    @location(0) color: vec4<f32>,\\r\\n    @location(1) normal: vec4<f32>,\\r\\n    @location(2) fragmentPosition: vec4<f32>,\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fragment_main(fragment: FragmentIn) -> @location(0) vec4<f32> {\\r\\n    return applyLight(fragment.color, fragment.fragmentPosition, fragment.normal);\\r\\n}\";","export default \"// ------------------------- Object Values ---------------------- //\\r\\n@group(0) @binding(0) var<uniform> transformationMatrix: mat4x4<f32>;\\r\\n@group(0) @binding(1) var<storage, read> instancePositions: array<vec4<f32>>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- World Values ---------------------- //\\r\\nstruct Camera {\\r\\n    viewProjection: mat4x4<f32>,\\r\\n    view: mat4x4<f32>,\\r\\n    projection: mat4x4<f32>,\\r\\n    rotation: mat4x4<f32>,\\r\\n    translation: mat4x4<f32>,\\r\\n    position: vec3<f32>\\r\\n}\\r\\n@group(1) @binding(0) var<uniform> camera: Camera;\\r\\n\\r\\nstruct TimeData {\\r\\n    timestamp: f32,\\r\\n    delta: f32\\r\\n}\\r\\n@group(1) @binding(1) var<uniform> time: TimeData;\\r\\n\\r\\nstruct AmbientLight {\\r\\n    color: vec4<f32>\\r\\n}\\r\\n@group(1) @binding(2) var<uniform> ambientLight: AmbientLight;\\r\\n\\r\\nstruct PointLight {\\r\\n    position: vec4<f32>,\\r\\n    color: vec4<f32>,\\r\\n    range: f32\\r\\n}\\r\\n@group(1) @binding(3) var<storage, read> pointLights: array<PointLight>;\\r\\n\\r\\n@group(1) @binding(4) var<storage, read_write> debugValue: f32;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- User Inputs ------------------------ //\\r\\n@group(2) @binding(0) var cubeTextureSampler: sampler;\\r\\n@group(2) @binding(1) var cubeTexture: texture_2d_array<f32>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// --------------------- Light calculations --------------------- //\\r\\n\\r\\n/**\\r\\n * Calculate point light output.\\r\\n */\\r\\nfn calculatePointLights(fragmentPosition: vec4<f32>, normal: vec4<f32>) -> vec4<f32> {\\r\\n    // Count of point lights.\\r\\n    let pointLightCount: u32 = arrayLength(&pointLights);\\r\\n\\r\\n    var lightResult: vec4<f32> = vec4<f32>(0, 0, 0, 1);\\r\\n\\r\\n    for (var index: u32 = 0; index < pointLightCount; index++) {\\r\\n        var pointLight: PointLight = pointLights[index];\\r\\n\\r\\n        // Calculate light strength based on angle of incidence.\\r\\n        let lightDirection: vec4<f32> = normalize(pointLight.position - fragmentPosition);\\r\\n        let diffuse: f32 = max(dot(normal, lightDirection), 0.0);\\r\\n\\r\\n        lightResult += pointLight.color * diffuse;\\r\\n    }\\r\\n\\r\\n    return lightResult;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Apply lights to fragment color.\\r\\n */\\r\\nfn applyLight(colorIn: vec4<f32>, fragmentPosition: vec4<f32>, normal: vec4<f32>) -> vec4<f32> {\\r\\n    var lightColor: vec4<f32> = vec4<f32>(0, 0, 0, 1);\\r\\n\\r\\n    lightColor += ambientLight.color;\\r\\n    lightColor += calculatePointLights(fragmentPosition, normal);\\r\\n\\r\\n    return lightColor * colorIn;\\r\\n}\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\nfn hash(x: u32) -> u32\\r\\n{\\r\\n    var result: u32 = x;\\r\\n    result ^= result >> 16;\\r\\n    result *= 0x7feb352du;\\r\\n    result ^= result >> 15;\\r\\n    result *= 0x846ca68bu;\\r\\n    result ^= result >> 16;\\r\\n    return result;\\r\\n}\\r\\n\\r\\nstruct VertexOut {\\r\\n    @builtin(position) position: vec4<f32>,\\r\\n    @location(0) uv: vec2<f32>,\\r\\n    @location(1) normal: vec4<f32>,\\r\\n    @location(2) fragmentPosition: vec4<f32>,\\r\\n    @interpolate(flat) @location(3) textureLayer: u32\\r\\n}\\r\\n\\r\\nstruct VertexIn {\\r\\n    @builtin(instance_index) instanceId : u32,\\r\\n    @location(0) position: vec4<f32>,\\r\\n    @location(1) uv: vec2<f32>,\\r\\n    @location(2) normal: vec4<f32>\\r\\n}\\r\\n\\r\\noverride animationSeconds: f32 = 3; \\r\\n\\r\\n@vertex\\r\\nfn vertex_main(vertex: VertexIn) -> VertexOut {\\r\\n    let textureLayers: f32 = f32(textureNumLayers(cubeTexture));\\r\\n\\r\\n    var instancePosition: vec4<f32> = instancePositions[vertex.instanceId];\\r\\n\\r\\n    // Generate 4 random numbers.\\r\\n    var hash1: u32 = hash(vertex.instanceId + 1);\\r\\n    var hash2: u32 = hash(hash1);\\r\\n    var hash3: u32 = hash(hash2);\\r\\n    var hash4: u32 = hash(hash3);\\r\\n\\r\\n    // Convert into normals.\\r\\n    var hashStartDisplacement: f32 = (f32(hash1) - pow(2, 31)) * 2 / pow(2, 32);\\r\\n    var randomNormalPosition: vec4<f32> = vec4<f32>(\\r\\n        (f32(hash2) - pow(2, 31)) * 2 / pow(2, 32),\\r\\n        (f32(hash3) - pow(2, 31)) * 2 / pow(2, 32),\\r\\n        (f32(hash4) - pow(2, 31)) * 2 / pow(2, 32),\\r\\n        1\\r\\n    );\\r\\n\\r\\n    // Calculate random position and animate a 100m spread. \\r\\n    var randPosition: vec4<f32> = randomNormalPosition * 1000; // Randomise start spreading 1000m in all directsions.\\r\\n    randPosition += randomNormalPosition * sin((time.timestamp / animationSeconds) + (hashStartDisplacement * 100)) * 100;\\r\\n    randPosition.w = 1; // Reset w coord.\\r\\n\\r\\n    let randomPositionMatrix: mat4x4<f32> = mat4x4<f32>(\\r\\n        1, 0, 0, 0,\\r\\n        0, 1, 0, 0,\\r\\n        0, 0, 1, 0,\\r\\n        randPosition.x, randPosition.y, randPosition.z, 1\\r\\n    );\\r\\n\\r\\n    let instancePositionMatrix: mat4x4<f32> = mat4x4<f32>(\\r\\n        1, 0, 0, 0,\\r\\n        0, 1, 0, 0,\\r\\n        0, 0, 1, 0,\\r\\n        instancePosition.x, instancePosition.y, instancePosition.z, 1\\r\\n    );\\r\\n\\r\\n    var textureLayer: u32 = u32(floor(f32(vertex.instanceId) % textureLayers));\\r\\n\\r\\n    var worldposition: vec4<f32> = randomPositionMatrix * instancePositionMatrix * transformationMatrix * vertex.position;\\r\\n\\r\\n    var out: VertexOut;\\r\\n    out.position = camera.viewProjection * worldposition;\\r\\n    out.uv = vertex.uv;\\r\\n    out.normal = vertex.normal;\\r\\n    out.fragmentPosition = worldposition;\\r\\n    out.textureLayer = textureLayer;\\r\\n\\r\\n    return out;\\r\\n}\\r\\n\\r\\nstruct FragmentIn {\\r\\n    @location(0) uv: vec2<f32>,\\r\\n    @location(1) normal: vec4<f32>,\\r\\n    @location(2) fragmentPosition: vec4<f32>,\\r\\n    @interpolate(flat) @location(3) textureLayer: u32\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fragment_main(fragment: FragmentIn) -> @location(0) vec4<f32> {\\r\\n    return applyLight(textureSample(cubeTexture, cubeTextureSampler, fragment.uv, fragment.textureLayer), fragment.fragmentPosition, fragment.normal);\\r\\n}\";","export default \"// ------------------------- Object Values ---------------------- //\\r\\nstruct Particle {\\r\\n    position: vec3<f32>,\\r\\n    rotation: vec3<f32>,\\r\\n    velocity: vec3<f32>,\\r\\n    lifetime: f32\\r\\n}\\r\\n@group(0) @binding(0) var<storage, read_write> particles: array<Particle>;\\r\\n@group(0) @binding(1) var<storage, read_write> indirect: array<atomic<u32>, 4>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- World Values ---------------------- //\\r\\nstruct CameraTransformation {\\r\\n    rotation: mat4x4<f32>,\\r\\n    translation: mat4x4<f32>\\r\\n}\\r\\nstruct Camera {\\r\\n    viewProjection: mat4x4<f32>,\\r\\n    view: mat4x4<f32>,\\r\\n    projection: mat4x4<f32>,\\r\\n    translation: CameraTransformation,\\r\\n    invertedTranslation: CameraTransformation,\\r\\n    position: vec3<f32>\\r\\n}\\r\\n@group(1) @binding(0) var<uniform> camera: Camera;\\r\\n\\r\\nstruct TimeData {\\r\\n    timestamp: f32,\\r\\n    delta: f32\\r\\n}\\r\\n@group(1) @binding(1) var<uniform> time: TimeData;\\r\\n\\r\\nstruct AmbientLight {\\r\\n    color: vec4<f32>\\r\\n}\\r\\n@group(1) @binding(2) var<uniform> ambientLight: AmbientLight;\\r\\n\\r\\nstruct PointLight {\\r\\n    position: vec4<f32>,\\r\\n    color: vec4<f32>,\\r\\n    range: f32\\r\\n}\\r\\n@group(1) @binding(3) var<storage, read> pointLights: array<PointLight>;\\r\\n\\r\\n@group(1) @binding(4) var<storage, read_write> debugValue: f32;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n/**\\r\\n * PCG-Hash\\r\\n */\\r\\nfn hash(input: u32) -> u32\\r\\n{\\r\\n    let state: u32 = input * 747796405u + 2891336453u;\\r\\n    let word: u32 = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\\r\\n    return (word >> 22u) ^ word;\\r\\n}\\r\\n\\r\\noverride animationSeconds: f32 = 3; \\r\\n\\r\\nstruct ComputeParams {\\r\\n    @builtin(global_invocation_id) globalInvocationId : vec3u\\r\\n}\\r\\n@compute @workgroup_size(64)\\r\\nfn compute_main(params: ComputeParams) {\\r\\n    const MAX_DISTANCE: f32 = 3;\\r\\n    const MAX_LIFETIME: f32 = 9999;\\r\\n\\r\\n    let id = params.globalInvocationId.x;\\r\\n    if(id >= arrayLength(&particles)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    var particle: Particle = particles[id];\\r\\n\\r\\n    // Atomic just in case\\r\\n    atomicStore(&indirect[1], 600);\\r\\n\\r\\n    // Update time\\r\\n    particle.lifetime -= time.delta;\\r\\n\\r\\n    // Mark particle to kill.\\r\\n    let cameraDistance: f32 = distance(particle.position, camera.position);\\r\\n    if(cameraDistance > MAX_DISTANCE && particle.lifetime > 1) {\\r\\n        particle.lifetime = 0;\\r\\n    }\\r\\n\\r\\n    // Recreate particle.\\r\\n    if(particle.lifetime <= 0) {\\r\\n        var hash1: u32 = hash(id * 10000  + u32(time.timestamp * 1000));\\r\\n        var hash2: u32 = hash(hash1);\\r\\n        var hash3: u32 = hash(hash2);\\r\\n        var hash4: u32 = hash(hash3);\\r\\n\\r\\n        let radi: f32 = (f32(hash1) - pow(2, 31)) * 2 / pow(2, 32);\\r\\n        let posX: f32 = (f32(hash2) - pow(2, 31)) * 2 / pow(2, 32);\\r\\n        let posY: f32 = (f32(hash3) - pow(2, 31)) * 2 / pow(2, 32);\\r\\n        let posZ: f32 = (f32(hash4) - pow(2, 31)) * 2 / pow(2, 32);\\r\\n\\r\\n        // Random normalized vector.\\r\\n        var randomPosition: vec3<f32> =vec3<f32>(posX, posY, posZ);\\r\\n        randomPosition = normalize(randomPosition);\\r\\n\\r\\n        // Flip Y when it is negative.\\r\\n        randomPosition.y = abs(randomPosition.y);\\r\\n\\r\\n        // Scale ball by 10m\\r\\n        randomPosition *= MAX_DISTANCE * 0.75;\\r\\n\\r\\n        particle.position = randomPosition + camera.position;\\r\\n        particle.rotation = randomPosition;\\r\\n        particle.lifetime = MAX_LIFETIME;\\r\\n        particle.velocity = vec3<f32>(0.1, -0.2, 0);\\r\\n    }\\r\\n\\r\\n    // Move by velocity.\\r\\n    particle.position += particle.velocity * time.delta;\\r\\n    particle.rotation += particle.velocity * time.delta * 8;\\r\\n\\r\\n    _ = animationSeconds;\\r\\n\\r\\n    particles[id] = particle;\\r\\n}\";","export default \"// ------------------------- Object Values ---------------------- //\\r\\n@group(0) @binding(0) var<uniform> transformationMatrix: mat4x4<f32>;\\r\\nstruct Particle {\\r\\n    position: vec3<f32>,\\r\\n    rotation: vec3<f32>,\\r\\n    velocity: vec3<f32>,\\r\\n    lifetime: f32\\r\\n}\\r\\n@group(0) @binding(1) var<storage, read> particles: array<Particle>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- World Values ---------------------- //\\r\\nstruct CameraTransformation {\\r\\n    rotation: mat4x4<f32>,\\r\\n    translation: mat4x4<f32>\\r\\n}\\r\\nstruct Camera {\\r\\n    viewProjection: mat4x4<f32>,\\r\\n    view: mat4x4<f32>,\\r\\n    projection: mat4x4<f32>,\\r\\n    translation: CameraTransformation,\\r\\n    invertedTranslation: CameraTransformation,\\r\\n    position: vec3<f32>\\r\\n}\\r\\n@group(1) @binding(0) var<uniform> camera: Camera;\\r\\n\\r\\nstruct TimeData {\\r\\n    timestamp: f32,\\r\\n    delta: f32\\r\\n}\\r\\n@group(1) @binding(1) var<uniform> time: TimeData;\\r\\n\\r\\nstruct AmbientLight {\\r\\n    color: vec4<f32>\\r\\n}\\r\\n@group(1) @binding(2) var<uniform> ambientLight: AmbientLight;\\r\\n\\r\\nstruct PointLight {\\r\\n    position: vec4<f32>,\\r\\n    color: vec4<f32>,\\r\\n    range: f32\\r\\n}\\r\\n@group(1) @binding(3) var<storage, read> pointLights: array<PointLight>;\\r\\n\\r\\n@group(1) @binding(4) var<storage, read_write> debugValue: f32;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- User Inputs ------------------------ //\\r\\n@group(2) @binding(0) var textureSampler: sampler;\\r\\n@group(2) @binding(1) var texture: texture_2d<f32>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\nstruct VertexOut {\\r\\n    @builtin(position) position: vec4<f32>,\\r\\n    @location(0) uv: vec2<f32>,\\r\\n    @location(1) fragmentPosition: vec4<f32>,\\r\\n    @location(2) alpha: f32\\r\\n}\\r\\n\\r\\nstruct VertexIn {\\r\\n    @builtin(instance_index) instanceId : u32,\\r\\n    @location(0) position: vec4<f32>,\\r\\n    @location(1) uv: vec2<f32>\\r\\n}\\r\\n\\r\\n@vertex\\r\\nfn vertex_main(vertex: VertexIn) -> VertexOut {\\r\\n    const MAX_DISTANCE: f32 = 3;\\r\\n    const MAX_LIFETIME: f32 = 9999;\\r\\n\\r\\n    var particle: Particle = particles[vertex.instanceId];\\r\\n\\r\\n    let positionMatrix: mat4x4<f32> = mat4x4<f32>(\\r\\n        1, 0, 0, 0,\\r\\n        0, 1, 0, 0,\\r\\n        0, 0, 1, 0,\\r\\n        particle.position.x, particle.position.y, particle.position.z, 1,\\r\\n    );\\r\\n\\r\\n    let rotationMatrixX: mat4x4<f32> = mat4x4<f32>(\\r\\n        1, 0, 0, 0,\\r\\n        0, cos(particle.rotation.x), -sin(particle.rotation.x), 0,\\r\\n        0, sin(particle.rotation.x), cos(particle.rotation.x), 0,\\r\\n        0, 0, 0, 1\\r\\n    );\\r\\n\\r\\n    let rotationMatrixY: mat4x4<f32> = mat4x4<f32>(\\r\\n        cos(particle.rotation.y), 0, sin(particle.rotation.y), 0,\\r\\n        0, 1, 0, 0,\\r\\n        -sin(particle.rotation.y), 0, cos(particle.rotation.y), 0,\\r\\n        0, 0, 0, 1\\r\\n    );\\r\\n\\r\\n    let rotationMatrixZ: mat4x4<f32> = mat4x4<f32>(\\r\\n        cos(particle.rotation.z), -sin(particle.rotation.z), 0, 0,\\r\\n        sin(particle.rotation.z), cos(particle.rotation.z), 0, 0,\\r\\n        0, 0, 1, 0,\\r\\n        0, 0, 0, 1\\r\\n    );\\r\\n\\r\\n    let rotationMatrix: mat4x4<f32> = rotationMatrixX * rotationMatrixY * rotationMatrixZ;\\r\\n\\r\\n    let distanceScale: f32 = (MAX_DISTANCE - distance(particle.position, camera.position)) / MAX_DISTANCE;\\r\\n    let scalingMatrix: mat4x4<f32> = mat4x4<f32>(\\r\\n        distanceScale, 0, 0, 0,\\r\\n        0, distanceScale, 0, 0,\\r\\n        0, 0, distanceScale, 0,\\r\\n        0, 0, 0, 1,\\r\\n    );\\r\\n\\r\\n    let worldPosition: vec4<f32> = positionMatrix * scalingMatrix * transformationMatrix * rotationMatrix * vertex.position;\\r\\n\\r\\n    var out: VertexOut;\\r\\n    out.position = camera.viewProjection * worldPosition;\\r\\n    out.uv = vertex.uv;\\r\\n    out.fragmentPosition = worldPosition;\\r\\n    out.alpha = clamp(particle.lifetime, 0, 1);\\r\\n\\r\\n    return out;\\r\\n}\\r\\n\\r\\nstruct FragmentIn {\\r\\n    @location(0) uv: vec2<f32>,\\r\\n    @location(1) fragmentPosition: vec4<f32>,\\r\\n    @location(2) alpha: f32\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fragment_main(fragment: FragmentIn) -> @location(0) vec4<f32> {\\r\\n    var color = textureSample(texture, textureSampler, fragment.uv);\\r\\n    color.a *= fragment.alpha;\\r\\n\\r\\n    if(color.a == 0) {\\r\\n        discard;\\r\\n    }\\r\\n\\r\\n    return color;\\r\\n}\";","export default \"// ------------------------- Object Values ---------------------- //\\r\\n@group(0) @binding(0) var<uniform> transformationMatrix: mat4x4<f32>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- World Values ---------------------- //\\r\\nstruct CameraTransformation {\\r\\n    rotation: mat4x4<f32>,\\r\\n    translation: mat4x4<f32>\\r\\n}\\r\\nstruct Camera {\\r\\n    viewProjection: mat4x4<f32>,\\r\\n    view: mat4x4<f32>,\\r\\n    projection: mat4x4<f32>,\\r\\n    translation: CameraTransformation,\\r\\n    invertedTranslation: CameraTransformation,\\r\\n    position: vec3<f32>\\r\\n}\\r\\n@group(1) @binding(0) var<uniform> camera: Camera;\\r\\n\\r\\nstruct TimeData {\\r\\n    timestamp: f32,\\r\\n    delta: f32\\r\\n}\\r\\n@group(1) @binding(1) var<uniform> time: TimeData;\\r\\n\\r\\nstruct AmbientLight {\\r\\n    color: vec4<f32>\\r\\n}\\r\\n@group(1) @binding(2) var<uniform> ambientLight: AmbientLight;\\r\\n\\r\\nstruct PointLight {\\r\\n    position: vec4<f32>,\\r\\n    color: vec4<f32>,\\r\\n    range: f32\\r\\n}\\r\\n@group(1) @binding(3) var<storage, read> pointLights: array<PointLight>;\\r\\n\\r\\n@group(1) @binding(4) var<storage, read_write> debugValue: f32;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\nstruct VertexOut {\\r\\n    @builtin(position) position: vec4<f32>,\\r\\n    @location(0) color: vec4<f32>,\\r\\n}\\r\\n\\r\\nstruct VertexIn {\\r\\n    @builtin(instance_index) instanceId : u32,\\r\\n    @location(0) position: vec4<f32>,\\r\\n    @location(1) uv: vec2<f32>,\\r\\n    @location(2) normal: vec4<f32>\\r\\n}\\r\\n\\r\\n@vertex\\r\\nfn vertex_main(vertex: VertexIn) -> VertexOut {\\r\\n    var instanceLight: PointLight = pointLights[vertex.instanceId];\\r\\n\\r\\n    var out: VertexOut;\\r\\n    out.position = camera.viewProjection * (instanceLight.position + vertex.position) * transformationMatrix;\\r\\n    out.color = instanceLight.color;\\r\\n\\r\\n    return out;\\r\\n}\\r\\n\\r\\nstruct FragmentIn {\\r\\n    @location(0) color: vec4<f32>,\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fragment_main(fragment: FragmentIn) -> @location(0) vec4<f32> {\\r\\n    return fragment.color;\\r\\n}\";","export default \"// ------------------------- Object Values ---------------------- //\\r\\n@group(0) @binding(0) var cubeTextureSampler: sampler;\\r\\n@group(0) @binding(1) var cubeMap: texture_cube<f32>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- World Values ---------------------- //\\r\\nstruct CameraTransformation {\\r\\n    rotation: mat4x4<f32>,\\r\\n    translation: mat4x4<f32>\\r\\n}\\r\\nstruct Camera {\\r\\n    viewProjection: mat4x4<f32>,\\r\\n    view: mat4x4<f32>,\\r\\n    projection: mat4x4<f32>,\\r\\n    translation: CameraTransformation,\\r\\n    invertedTranslation: CameraTransformation,\\r\\n    position: vec3<f32>\\r\\n}\\r\\n@group(1) @binding(0) var<uniform> camera: Camera;\\r\\n\\r\\nstruct TimeData {\\r\\n    timestamp: f32,\\r\\n    delta: f32\\r\\n}\\r\\n@group(1) @binding(1) var<uniform> time: TimeData;\\r\\n\\r\\nstruct AmbientLight {\\r\\n    color: vec4<f32>\\r\\n}\\r\\n@group(1) @binding(2) var<uniform> ambientLight: AmbientLight;\\r\\n\\r\\nstruct PointLight {\\r\\n    position: vec4<f32>,\\r\\n    color: vec4<f32>,\\r\\n    range: f32\\r\\n}\\r\\n@group(1) @binding(3) var<storage, read> pointLights: array<PointLight>;\\r\\n\\r\\n@group(1) @binding(4) var<storage, read_write> debugValue: f32;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\nstruct VertexOut {\\r\\n    @builtin(position) position: vec4<f32>,\\r\\n    @location(1) fragmentPosition: vec4<f32>,\\r\\n}\\r\\n\\r\\nstruct VertexIn {\\r\\n    @location(0) position: vec4<f32>,\\r\\n}\\r\\n\\r\\n@vertex\\r\\nfn vertex_main(vertex: VertexIn) -> VertexOut {\\r\\n    var out: VertexOut;\\r\\n    out.position = camera.projection * camera.invertedTranslation.rotation  * vertex.position;\\r\\n    out.fragmentPosition = vertex.position;\\r\\n\\r\\n    return out;\\r\\n}\\r\\n\\r\\nstruct FragmentIn {\\r\\n    @location(1) fragmentPosition: vec4<f32>,\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fragment_main(fragment: FragmentIn) -> @location(0) vec4<f32> {\\r\\n  return textureSample(cubeMap, cubeTextureSampler, fragment.fragmentPosition.xyz);\\r\\n}\";","export default \"// ------------------------- Object Values ---------------------- //\\r\\n@group(0) @binding(0) var<uniform> transformationMatrix: mat4x4<f32>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- World Values ---------------------- //\\r\\nstruct CameraTransformation {\\r\\n    rotation: mat4x4<f32>,\\r\\n    translation: mat4x4<f32>\\r\\n}\\r\\nstruct Camera {\\r\\n    viewProjection: mat4x4<f32>,\\r\\n    view: mat4x4<f32>,\\r\\n    projection: mat4x4<f32>,\\r\\n    translation: CameraTransformation,\\r\\n    invertedTranslation: CameraTransformation,\\r\\n    position: vec3<f32>\\r\\n}\\r\\n@group(1) @binding(0) var<uniform> camera: Camera;\\r\\n\\r\\nstruct TimeData {\\r\\n    timestamp: f32,\\r\\n    delta: f32\\r\\n}\\r\\n@group(1) @binding(1) var<uniform> time: TimeData;\\r\\n\\r\\nstruct AmbientLight {\\r\\n    color: vec4<f32>\\r\\n}\\r\\n@group(1) @binding(2) var<uniform> ambientLight: AmbientLight;\\r\\n\\r\\nstruct PointLight {\\r\\n    position: vec4<f32>,\\r\\n    color: vec4<f32>,\\r\\n    range: f32\\r\\n}\\r\\n@group(1) @binding(3) var<storage, read> pointLights: array<PointLight>;\\r\\n\\r\\n@group(1) @binding(4) var<storage, read_write> debugValue: f32;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// ------------------------- User Inputs ------------------------ //\\r\\n@group(2) @binding(0) var videoTextureSampler: sampler;\\r\\n@group(2) @binding(1) var videoTexture: texture_2d<f32>;\\r\\n// -------------------------------------------------------------- //\\r\\n\\r\\n\\r\\n// --------------------- Light calculations --------------------- //\\r\\n\\r\\n/**\\r\\n * Calculate point light output.\\r\\n */\\r\\nfn calculatePointLights(fragmentPosition: vec4<f32>, normal: vec4<f32>) -> vec4<f32> {\\r\\n    // Count of point lights.\\r\\n    let pointLightCount: u32 = arrayLength(&pointLights);\\r\\n\\r\\n    var lightResult: vec4<f32> = vec4<f32>(0, 0, 0, 1);\\r\\n\\r\\n    for (var index: u32 = 0; index < pointLightCount; index++) {\\r\\n        var pointLight: PointLight = pointLights[index];\\r\\n\\r\\n        // Calculate light strength based on angle of incidence.\\r\\n        let lightDirection: vec4<f32> = normalize(pointLight.position - fragmentPosition);\\r\\n        let diffuse: f32 = max(dot(normal, lightDirection), 0.0);\\r\\n\\r\\n        lightResult += pointLight.color * diffuse;\\r\\n    }\\r\\n\\r\\n    return lightResult;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Apply lights to fragment color.\\r\\n */\\r\\nfn applyLight(colorIn: vec4<f32>, fragmentPosition: vec4<f32>, normal: vec4<f32>) -> vec4<f32> {\\r\\n    var lightColor: vec4<f32> = vec4<f32>(0, 0, 0, 1);\\r\\n\\r\\n    lightColor += ambientLight.color;\\r\\n    lightColor += calculatePointLights(fragmentPosition, normal);\\r\\n\\r\\n    return lightColor * colorIn;\\r\\n}\\r\\n// -------------------------------------------------------------- //\\r\\nstruct VertexOut {\\r\\n    @builtin(position) position: vec4<f32>,\\r\\n    @location(0) uv: vec2<f32>,\\r\\n    @location(1) normal: vec4<f32>,\\r\\n    @location(2) fragmentPosition: vec4<f32>,\\r\\n}\\r\\n\\r\\nstruct VertexIn {\\r\\n    @builtin(instance_index) instanceId : u32,\\r\\n    @location(0) position: vec4<f32>,\\r\\n    @location(1) uv: vec2<f32>,\\r\\n    @location(2) normal: vec4<f32>\\r\\n}\\r\\n\\r\\n@vertex\\r\\nfn vertex_main(vertex: VertexIn) -> VertexOut {\\r\\n    let translation: mat4x4<f32> = mat4x4(\\r\\n        vec4<f32>(1, 0, 0, 0),\\r\\n        vec4<f32>(0, 1, 0, 0),\\r\\n        vec4<f32>(0, 0, 1, 0),\\r\\n        transformationMatrix[3]\\r\\n    );\\r\\n\\r\\n    let scaling: mat4x4<f32> = mat4x4(\\r\\n        vec4<f32>(length(transformationMatrix[0].xyz), 0, 0, 0),\\r\\n        vec4<f32>(0, length(transformationMatrix[1].xyz), 0, 0),\\r\\n        vec4<f32>(0, 0, length(transformationMatrix[2].xyz), 0),\\r\\n        vec4<f32>(0, 0, 0, 1),\\r\\n    );\\r\\n\\r\\n    var transformedPosition: vec4<f32> = translation * camera.translation.rotation * scaling  * vertex.position;\\r\\n\\r\\n    var out: VertexOut;\\r\\n    out.position = camera.viewProjection * transformedPosition;\\r\\n    out.uv = vertex.uv;\\r\\n    out.normal = camera.translation.rotation * vertex.normal;\\r\\n    out.fragmentPosition = transformedPosition;\\r\\n\\r\\n    return out;\\r\\n}\\r\\n\\r\\nstruct FragmentIn {\\r\\n    @location(0) uv: vec2<f32>,\\r\\n    @location(1) normal: vec4<f32>,\\r\\n    @location(2) fragmentPosition: vec4<f32>,\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fragment_main(fragment: FragmentIn) -> @location(0) vec4<f32> {\\r\\n    let videoColor: vec4<f32> = textureSample(videoTexture, videoTextureSampler, fragment.uv);\\r\\n\\r\\n    const red: f32 = 53;\\r\\n    const green: f32 = 214;\\r\\n    const blue: f32 = 19;\\r\\n\\r\\n    const redGreenRatio: f32 = red / green;\\r\\n    const blueGreenRatio: f32 = blue / green;\\r\\n\\r\\n    const ratioTolerance: f32 = 0.5;\\r\\n\\r\\n    let curredRedGreenRatio: f32 = videoColor.r / videoColor.g;\\r\\n    let curredBlueGreenRatio: f32 = videoColor.b / videoColor.g;\\r\\n\\r\\n    let compareRed: f32 = abs(curredRedGreenRatio - redGreenRatio);\\r\\n    let compareBlue: f32 = abs(curredBlueGreenRatio - blueGreenRatio);\\r\\n    \\r\\n\\r\\n    if(compareRed < ratioTolerance && compareBlue < ratioTolerance) {\\r\\n        return vec4<f32>(videoColor.rgb, 0.0);\\r\\n    }\\r\\n\\r\\n    return vec4<f32>(applyLight(videoColor, fragment.fragmentPosition, fragment.normal).rgb, (sin(fragment.uv.y * 750 + time.timestamp * 20) * 0.5 + 1) * 0.7);\\r\\n}\";","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeState = exports.MyersDiff = void 0;\nclass MyersDiff {\n    /**\n     * Constructor.\n     * @param pCompareFunction - Compare function to compare two items.\n     */\n    constructor(pCompareFunction) {\n        this.mCompareFunction = pCompareFunction;\n    }\n    /**\n     * Get differences of the two item lists.\n     * @param pItemListA - Item list A.\n     * @param pItemListB - Item list B.\n     */\n    differencesOf(pItemListA, pItemListB) {\n        // Save farthest-right points with it histories.\n        const lFrontierList = { 1: { x: 0, history: [] } };\n        // \"Convert\" Zero index to One index.\n        const lOneIndex = (pId) => pId - 1;\n        const lLengthA = pItemListA.length;\n        const lLengthB = pItemListB.length;\n        let lHistoryList;\n        let lX;\n        for (let lD = 0; lD < lLengthA + lLengthB + 1; lD++) {\n            for (let lK = -lD; lK < lD + 1; lK += 2) {\n                // Check if next move goes down or right.\n                const lGoesDown = (lK === -lD || (lK !== lD && lFrontierList[lK - 1].x < lFrontierList[lK + 1].x));\n                // Get starting diagonal point.\n                if (lGoesDown) {\n                    const lNextFrontier = lFrontierList[lK + 1];\n                    lX = lNextFrontier.x;\n                    lHistoryList = lNextFrontier.history;\n                }\n                else {\n                    const lNextFrontier = lFrontierList[lK - 1];\n                    lX = lNextFrontier.x + 1;\n                    lHistoryList = lNextFrontier.history;\n                }\n                // Copy history list.\n                lHistoryList = lHistoryList.slice();\n                let lY = lX - lK;\n                // Only start tracking history on valid track. Staring point (0,0) should not be tracked.\n                if (1 <= lY && lY <= lLengthB && lGoesDown) {\n                    lHistoryList.push({ changeState: ChangeState.Insert, item: pItemListB[lOneIndex(lY)] });\n                }\n                else if (1 <= lX && lX <= lLengthA) {\n                    lHistoryList.push({ changeState: ChangeState.Remove, item: pItemListA[lOneIndex(lX)] });\n                }\n                // Move diagonal as long as possible.\n                while (lX < lLengthA && lY < lLengthB && this.mCompareFunction(pItemListA[lOneIndex(lX + 1)], pItemListB[lOneIndex(lY + 1)])) {\n                    lX += 1;\n                    lY += 1;\n                    lHistoryList.push({ changeState: ChangeState.Keep, item: pItemListA[lOneIndex(lX)] });\n                }\n                // Check if in the bottom right. If not save frontier.\n                if (lX >= lLengthA && lY >= lLengthB) {\n                    // Return found history.\n                    return lHistoryList;\n                }\n                else {\n                    lFrontierList[lK] = { x: lX, history: lHistoryList };\n                }\n            }\n        }\n        // Empty array for typescript. This area is never reached.\n        /* istanbul ignore next */\n        return new Array();\n    }\n}\nexports.MyersDiff = MyersDiff;\nvar ChangeState;\n(function (ChangeState) {\n    ChangeState[ChangeState[\"Remove\"] = 1] = \"Remove\";\n    ChangeState[ChangeState[\"Insert\"] = 2] = \"Insert\";\n    ChangeState[ChangeState[\"Keep\"] = 3] = \"Keep\";\n})(ChangeState || (exports.ChangeState = ChangeState = {}));\n//# sourceMappingURL=myers-diff.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dictionary = void 0;\nconst list_1 = require(\"./list\");\nconst exception_1 = require(\"../exception/exception\");\n/**\n * Wrapper for {@link Map}.\n * Extended by {@link Dictionary.add}, {@link Dictionary.getAllKeysOfValue}, {@link Dictionary.getOrDefault} and {@link Dictionary.map}.\n *\n * @typeParam TKey - Type of objects defined for keys.\n * @typeParam TValue - Type of objects defined for values.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n *\n * @public\n */\nclass Dictionary extends Map {\n    /**\n     * Add value and key to dictionary.\n     * Throws {@link Exception}  for any added dublicate key.\n     *\n     * @param pKey - Key of item.\n     * @param pValue - value of item.\n     *\n     * @throws\n     * On any dublicate key set,\n     *\n     * @example Adding a new and existing key.\n     * ```TypeScript\n     * const dictionary = new Dictionary<string, number>();\n     * dictionary.add('a', 4); // => OK\n     * dictionary.add('a', 4); // => Fail: Dublicate key.\n     * ```\n     */\n    add(pKey, pValue) {\n        // Add value and key to containers.\n        if (!this.has(pKey)) {\n            this.set(pKey, pValue);\n        }\n        else {\n            throw new exception_1.Exception(\"Can't add dublicate key to dictionary.\", this);\n        }\n    }\n    /**\n     * Create new dicionary and add same keys and values.\n     * @see {@link ICloneable.clone}\n     *\n     * @returns cloned dictionary with shallow copied key and value refernces.\n     *\n     * @example Clone and compare dictionary and dictionary items.\n     * ```TypeScript\n     * const dictionary = new Dictionary<string, object>();\n     * dictionary.set('a', new Object());\n     *\n     * const clone = dictionary.clone();\n     *\n     * const areSame = dictionary === clone; // => False\n     * const itemSame = dictionary.get('a') === clone.get('a'); // => True\n     * ```\n     */\n    clone() {\n        return new Dictionary(this);\n    }\n    /**\n     * Get all keys that have the set value.\n     *\n     * @param pValue - Value.\n     *\n     * @returns all keys that hold the specified value.\n     *\n     * @example Get keys of a value.\n     * ```TypeScript\n     * const dictionary = new Dictionary<string, number>();\n     * dictionary.set('a', 1);\n     * dictionary.set('b', 2);\n     * dictionary.set('c', 1);\n     *\n     * const keys = dictionary.getAllKeysOfValue(1); // => ['a', 'c']\n     * ```\n     */\n    getAllKeysOfValue(pValue) {\n        // Add entries iterator to list and filter for pValue = Value\n        const lKeyValuesWithValue = [...this.entries()].filter((pItem) => {\n            return pItem[1] === pValue;\n        });\n        // Get only keys of key values.\n        const lKeysOfKeyValue = lKeyValuesWithValue.map((pItem) => {\n            return pItem[0];\n        });\n        return lKeysOfKeyValue;\n    }\n    /**\n     * Get item. If the key does not exists the default value gets returned.\n     * @param pKey - Key of item.\n     * @param pDefault - Default value if key was not found.\n     *\n     * @returns value of the key. If the key does not exists the default value gets returned.\n     *\n     * @example Get value or default from a existing and none existing key.\n     * ```TypeScript\n     * const dictionary = new Dictionary<string, number>();\n     * dictionary.set('a', 1);\n     *\n     * const keyA = dictionary.getOrDefault('a', 22); // => 1\n     * const keyZ = dictionary.getOrDefault('z', 22); // => 22\n     * ```\n     */\n    getOrDefault(pKey, pDefault) {\n        const lValue = this.get(pKey);\n        if (typeof lValue !== 'undefined') {\n            return lValue;\n        }\n        return pDefault;\n    }\n    /**\n     * Maps information into new list.\n     * @param pFunction - Mapping funktion.\n     *\n     * @typeParam T - Result type of mapping resolver function.\n     *\n     * @returns mapped data for each item.\n     *\n     * @example Remap all dictionary values by adding a number to all values.\n     * ```TypeScript\n     * const dictionary = new Dictionary<string, number>();\n     * dictionary.set('a', 1);\n     * dictionary.set('b', 2);\n     *\n     * const list = dictionary.map((key, value) => value + 1); //  => [2, 3]\n     * ```\n     */\n    map(pFunction) {\n        const lResultList = new list_1.List();\n        for (const lKeyValuePair of this) {\n            // Execute callback and add result to list.\n            const lMappingResult = pFunction(lKeyValuePair[0], lKeyValuePair[1]);\n            lResultList.push(lMappingResult);\n        }\n        return lResultList;\n    }\n}\nexports.Dictionary = Dictionary;\n//# sourceMappingURL=dictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.List = void 0;\n/**\n * Wrapper for {@link Array}.\n *\n * @typeParam T - Type of items of list.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array}\n *\n * @public\n */\nclass List extends Array {\n    /**\n     * Create list and add items.\n     * Prevents spread operator with number arrays to initialize array with length instead of item.\n     *\n     * @param pItemList - Items.\n     *\n     * @example Create new list with `newListWith` and failing creation with the native `Array` constructor.\n     * ```TypeScript\n     * const newList = List.newListWith<number>(...[3]); // => [3]\n     * const newListWrong = new List<number>(...[3]);    // => [undefined, undefined, undefined]\n     * ```\n     */\n    static newListWith(...pItemList) {\n        const lNewList = new List();\n        lNewList.push(...pItemList);\n        return lNewList;\n    }\n    /**\n     * Remove every item.\n     *\n     * @example Clear a list.\n     * ```TypeScript\n     * const list = List.newListWith<number>(1, 2, 3);\n     * list.clear();\n     *\n     * console.log(list.length); // => 0\n     * ```\n     */\n    clear() {\n        this.splice(0, this.length);\n    }\n    /**\n     * Create new list and add same items.\n     * @see {@link ICloneable.clone}\n     *\n     * @returns cloned list with shallow copied item refernces.\n     *\n     * @example Clone and compare list and list items.\n     * ```TypeScript\n     * const list = List.newListWith<object>(new Object());\n     *\n     * const clone = list.clone();\n     *\n     * const areSame = list === clone; // => False\n     * const itemSame = list[0] === list[0]; // => True\n     * ```\n     */\n    clone() {\n        return List.newListWith(...this);\n    }\n    /**\n     * Copy distinct values into new list.\n     *\n     * @returns new list instance with only distinct values.\n     *\n     * @example Create a new list with dublicates and create a new distinct list out of it.\n     * ```TypeScript\n     * const listWithDublicates = List.newListWith<number>(1, 1, 2, 3, 3);\n     * const distinctList = listWithDublicates.distinct(); // => [1, 2, 3]\n     * ```\n     */\n    distinct() {\n        return List.newListWith(...new Set(this));\n    }\n    /**\n     * Compares this array with the specified one.\n     * Compares length and every item by reference and order.\n     * Does only shallow compare item references.\n     *\n     * @param pArray - Array to compare.\n     *\n     * @returns true for equality.\n     *\n     * @example Compare two arrays with a list.\n     * ```TypeScript\n     * const list = List.newListWith<number>(1, 3, 2);\n     *\n     * const isEqual = list.equals([1, 3, 2]) // => True\n     * const isUnequal = list.equals([1, 2, 3]) // => False\n     * ```\n     */\n    equals(pArray) {\n        // Check if array are same, dont null and have same length.\n        if (this === pArray) {\n            return true;\n        }\n        else if (!pArray || this.length !== pArray.length) {\n            return false;\n        }\n        // Check each item.\n        for (let lIndex = 0; lIndex < this.length; ++lIndex) {\n            if (this[lIndex] !== pArray[lIndex]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Removes the first appearence of a value.\n     *\n     * @param pValue - Target value to remove.\n     *\n     * @returns removed element. When no element was removed, undefined is returned instead.\n     *\n     * @example Remove a existing and a none existing item of a list.\n     * ```TypeScript\n     * const list = List.newListWith<number>(1, 3, 2);\n     *\n     * const removedElement = list.remove(1); // => 1\n     * const noneExistingElement = list.remove(4); // => undefined\n     * ```\n     */\n    remove(pValue) {\n        const lFoundIndex = this.indexOf(pValue);\n        // Only remove if found.\n        if (lFoundIndex !== -1) {\n            return this.splice(lFoundIndex, 1)[0];\n        }\n        return undefined;\n    }\n    /**\n     * Replace first appearence of value.\n     *\n     * @param pOldValue - Target value to replace.\n     * @param pNewValue - Replacement value.\n     *\n     * @returns replaced element. When no element was replaced, undefined is returned instead.\n     *\n     * @example Replace a existing and a none existing item of a list.\n     * ```TypeScript\n     * const list = List.newListWith<number>(1, 5, 3);\n     *\n     * const removedElement = list.replace(5, 2); // => 5\n     * const noneExistingElement = list.replace(4, 3); // => undefined\n     *\n     * console.log(list); // => [1, 2, 3]\n     * ```\n     */\n    replace(pOldValue, pNewValue) {\n        const lFoundIndex = this.indexOf(pOldValue);\n        // Only replace if found.\n        if (lFoundIndex !== -1) {\n            // Save old value and replace it with new value.\n            const lOldValue = this[lFoundIndex];\n            this[lFoundIndex] = pNewValue;\n            return lOldValue;\n        }\n        return undefined;\n    }\n    /**\n     * Returns a string representation of this list.\n     * @override base objects {@link Array.toString}\n     *\n     * @returns string representation for this list.\n     *\n     * @example Output a string representation of a list.\n     * ```TypeScript\n     * const list = List.newListWith<number>(1, 2, 3);\n     * console.log(list.toString()); // => [1, 2, 3]\n     * ```\n     */\n    toString() {\n        return `[${super.join(', ')}]`;\n    }\n}\nexports.List = List;\n//# sourceMappingURL=list.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Stack = void 0;\n/**\n * Simple and fast stack implementation based on references.\n *\n * @public\n */\nclass Stack {\n    /**\n     * Get current stack size.\n     */\n    get size() {\n        return this.mSize;\n    }\n    /**\n     * Current top item of stack.\n     * Returns undefined when no item is stacked.\n     */\n    get top() {\n        // Undefined when no item is stacked.\n        if (!this.mTopItem) {\n            return undefined;\n        }\n        return this.mTopItem.value;\n    }\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.mTopItem = null;\n        this.mSize = 0;\n    }\n    /**\n     * Clones the references of all stack items into a new one.\n     * Does only shallow copy.\n     *\n     * @returns The cloned stack.\n     */\n    clone() {\n        const lClonedStack = new Stack();\n        // Only thing that needs to be cloned is the current reference.\n        lClonedStack.mTopItem = this.mTopItem;\n        lClonedStack.mSize = this.mSize;\n        return lClonedStack;\n    }\n    /**\n     * Iterates over each stack entry in reversed (newest...oldest) order.\n     *\n     * @returns Generator.\n     */\n    *entries() {\n        let lCurrentItem = this.mTopItem;\n        while (lCurrentItem !== null) {\n            yield lCurrentItem.value;\n            lCurrentItem = lCurrentItem.previous;\n        }\n    }\n    /**\n     * Clear stack and get all stacked items in stack order.\n     *\n     * @returns All stacked values in top to down order.\n     *\n     * @example Flush Stack\n     * ``` Typescript\n     * const stack = new Stack<number>();\n     * stack.push(1);\n     * stack.push(2);\n     * stack.push(3);\n     *\n     * // Flush all items. Clears stack.\n     * const stackValues = stack.flush(); // => [3, 2, 1];\n     * console.log(stack.top); // => undefined\n     * ```\n     */\n    flush() {\n        const lValueList = new Array();\n        // Pop items as long as there are stack items.\n        // Don't check poped value as next indicator as it can contain undefined.\n        while (this.mTopItem) {\n            lValueList.push(this.pop());\n        }\n        return lValueList;\n    }\n    /**\n     * Removes the current top item of stack.\n     * When no item is stacked nothing happends and undefined is returned.\n     *\n     * @returns Current top item. When no item was stacked, undefined is returned instead.\n     *\n     * @example Pop current top item.\n     * ``` Typescript\n     * const stack = new Stack<number>();\n     * stack.push(1);\n     * stack.push(2);\n     * stack.push(3);\n     *\n     * // Check current stacked top item before and after poping.\n     * console.log(stack.top); // => 3\n     * const stackValues = stack.pop(); // => 3;\n     * console.log(stack.top); // => 2\n     * ```\n     */\n    pop() {\n        // Undefined when no item is stacked.\n        if (!this.mTopItem) {\n            return undefined;\n        }\n        // Buffer current top value.\n        const lCurrentTopValue = this.mTopItem.value;\n        // Replace current top item with previous stacked.\n        this.mTopItem = this.mTopItem.previous;\n        this.mSize--;\n        return lCurrentTopValue;\n    }\n    /**\n     * Push new value as top item of stack. Replaces the current top item.\n     * @param pValue - Next value placed on top.\n     *\n     * @example Push next top item.\n     * ``` Typescript\n     * const stack = new Stack<number>();\n     * stack.push(1);\n\n     *\n     * // Check current stacked top item before and after pushing.\n     * console.log(stack.top); // => 1\n     * stack.push(2);\n     * console.log(stack.top); // => 2\n     * ```\n     */\n    push(pValue) {\n        // Create new stack item with the current top item as reference. \n        const lNextItem = {\n            previous: this.mTopItem,\n            value: pValue\n        };\n        // Replace current top item with next.\n        this.mTopItem = lNextItem;\n        this.mSize++;\n    }\n    /**\n     * Converts this stack into an array.\n     * The first item in the array is the last item pushed into the stack.\n     *\n     * @returns The current stack as array.\n     *\n     * @example Stack into array.\n     * ``` Typescript\n     * const stack = new Stack<number>();\n     * stack.push(1);\n     * stack.push(2);\n     * stack.push(3);\n     *\n     * // Stack to array.\n     * console.log(stack.toArray()); // => [3, 2, 1]\n     * ```\n     */\n    toArray() {\n        // Convert genertor into array.\n        return [...this.entries()];\n    }\n}\nexports.Stack = Stack;\n//# sourceMappingURL=stack.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Exception = void 0;\n/**\n * Extends {@link Error} by a {@link Exception.target} reference.\n *\n * @typeParam T - Exception target type.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error}\n *\n * @public\n */\nclass Exception extends Error {\n    /**\n     * Target of exception.\n     *\n     * @readonly\n     */\n    get target() {\n        return this.mTarget;\n    }\n    /**\n     * Constructor.\n     * @param pMessage - Messsage of exception.\n     * @param pTarget - Target of exception.\n     * @param pErrorOptions - Optional error options.\n     */\n    constructor(pMessage, pTarget, pErrorOptions) {\n        super(pMessage, pErrorOptions);\n        this.mTarget = pTarget;\n    }\n}\nexports.Exception = Exception;\n//# sourceMappingURL=exception.js.map","\"use strict\";\n/* istanbul ignore file */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MyersDiff = exports.ChangeState = exports.TypeUtil = exports.EnumUtil = exports.Stack = exports.Exception = exports.List = exports.Dictionary = void 0;\n/**\n * Library for data container and easier data access.\n *\n * @remarks\n * This package consists mostly of helper classes and storage types, aimed at reducing code redundance and improving clarity.\n *\n * @packageDocumentation\n */\n// Container.\nvar dictionary_1 = require(\"./data_container/dictionary\");\nObject.defineProperty(exports, \"Dictionary\", { enumerable: true, get: function () { return dictionary_1.Dictionary; } });\nvar list_1 = require(\"./data_container/list\");\nObject.defineProperty(exports, \"List\", { enumerable: true, get: function () { return list_1.List; } });\nvar exception_1 = require(\"./exception/exception\");\nObject.defineProperty(exports, \"Exception\", { enumerable: true, get: function () { return exception_1.Exception; } });\nvar stack_1 = require(\"./data_container/stack\");\nObject.defineProperty(exports, \"Stack\", { enumerable: true, get: function () { return stack_1.Stack; } });\n// Handler.\nvar enum_util_1 = require(\"./util/enum-util\");\nObject.defineProperty(exports, \"EnumUtil\", { enumerable: true, get: function () { return enum_util_1.EnumUtil; } });\nvar type_util_1 = require(\"./util/type-util\");\nObject.defineProperty(exports, \"TypeUtil\", { enumerable: true, get: function () { return type_util_1.TypeUtil; } });\n// Algorythms\nvar myers_diff_1 = require(\"./algorithm/myers-diff\");\nObject.defineProperty(exports, \"ChangeState\", { enumerable: true, get: function () { return myers_diff_1.ChangeState; } });\nObject.defineProperty(exports, \"MyersDiff\", { enumerable: true, get: function () { return myers_diff_1.MyersDiff; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnumUtil = void 0;\n/**\n * Static helper type to read data from enum objects.\n *\n * @public\n */\nclass EnumUtil {\n    /**\n     * Infers value into enum type.\n     * When the values can not be infered into the specified enum, undefined is returned.\n     *\n     * @param pEnum - typeof Enum object.\n     * @param pValue - Value of enum.\n     *\n     * @typeParam T - Enum type the value should be infered into.\n     *\n     * @returns Infered `pValue` parameter or undefined when the value does not exists as the enums value.\n     *\n     * @example Try to cast two possible enum values.\n     * ``` Typescript\n     * enum MyEnum {\n     *     Entry1 = 1,\n     *     Entry2 = 2\n     * }\n     *\n     * const existingValue = EnumUtil.cast<MyEnum>(MyEnum, 1); // => MyEnum.Entry1\n     * const noneExistingValue = EnumUtil.cast<MyEnum>(MyEnum, 5); // => undefined\n     * ```\n     */\n    static cast(pEnum, pValue) {\n        // Thats it... :)\n        if (EnumUtil.exists(pEnum, pValue)) {\n            return pValue;\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Check value existence on a enum object.\n     * Infers `pValue` parameter as enum type.\n     * @param pEnum - typeof Enum object.\n     * @param pValue - Value of enum.\n     *\n     * @typeParam T - Enum type the value should be infered into.\n     *\n     * @returns True when the value can be casted into enum.\n     *\n     * @example Check existence of one two possible enum values.\n     * ``` Typescript\n     * enum MyEnum {\n     *     Entry1 = 1,\n     *     Entry2 = 2\n     * }\n     *\n     * const existingValue = EnumUtil.exists(MyEnum, 1); // => True\n     * const noneExistingValue = EnumUtil.exists(MyEnum, 5); // => False\n     * ```\n     */\n    static exists(pEnum, pValue) {\n        return EnumUtil.valuesOf(pEnum).includes(pValue);\n    }\n    /**\n     * Return all keys of an enum as array.\n     *\n     * @param pEnum - typeof Enum object.\n     *\n     * @returns All enum key as array in defined order.\n     *\n     * @remarks\n     * Does only work for number enums and should fail for mixed or string enums.\n     *\n     * @example Read enum names from custom enum object.\n     * ``` Typescript\n     * enum MyEnum {\n     *     Entry1 = 1,\n     *     Entry2 = 2\n     * }\n     *\n     * const enumNames = EnumUtil.namesOf(MyEnum); // => ['Entry1', 'Entry2']\n     * ```\n     */\n    static namesOf(pEnum) {\n        // Convert enum to key array.\n        return Object.keys(pEnum).filter((pKey) => isNaN(Number(pKey)));\n    }\n    /**\n     * Return all values of an enum as array.\n     *\n     * @param pEnum - typeof Enum object.\n     *\n     * @typeParam T - Enum value type.\n     *\n     * @returns All enum values as array in defined order.\n     *\n     * @example Read enum values from custom enum object.\n     * ``` Typescript\n     * enum MyEnum {\n     *     Entry1 = 1,\n     *     Entry2 = 2\n     * }\n     *\n     * const enumValues = EnumUtil.valuesOf(MyEnum); // => [1, 2]\n     * ```\n     */\n    static valuesOf(pEnum) {\n        const lEnumValues = new Array();\n        // Convert enum to vaue array by iterating over all keys.\n        for (const lKey of EnumUtil.namesOf(pEnum)) {\n            lEnumValues.push(pEnum[lKey]);\n        }\n        return lEnumValues;\n    }\n}\nexports.EnumUtil = EnumUtil;\n//# sourceMappingURL=enum-util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeUtil = void 0;\n/**\n * Static helper type to read data from objects.\n *\n * @public\n */\nclass TypeUtil {\n    /**\n     * Get name of objects property.\n     * @param pName - Property name.\n     *\n     * @typeParam T - Object with any string key property.\n     *\n     * @returns the name of property.\n     *\n     * @remarks\n     * Acts more as a type safe way of accessing property names of a type.\n     *\n     * @example Read enum names from custom enum object.\n     * ``` Typescript\n     * class MyClass {\n     *    public myProperty: number = 1;\n     * }\n     *\n     * const propertyName = TypeUtil.nameOf<MyClass>('myProperty'); // => 'myProperty'\n     * ```\n     *\n     * @experimental @alpha\n     */\n    static nameOf(pName) {\n        return pName;\n    }\n}\nexports.TypeUtil = TypeUtil;\n//# sourceMappingURL=type-util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeviceConfiguration = void 0;\nconst core_1 = require(\"@kartoffelgames/core\");\nclass DeviceConfiguration {\n    /**\n     * Get all key actions.\n     */\n    get keyActions() {\n        return this.mButtonActions.map((pKey, pValue) => {\n            return { name: pKey, buttons: [...pValue] };\n        });\n    }\n    /**\n     * Tolerance on wich buttons and axis are marked as pressed.\n     */\n    get triggerTolerance() {\n        return this.mTriggerTolerance;\n    }\n    set triggerTolerance(pTolerance) {\n        this.mTriggerTolerance = pTolerance;\n    }\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.mTriggerTolerance = 0;\n        this.mButtonActions = new core_1.Dictionary();\n        this.mActionsButtons = new core_1.Dictionary();\n    }\n    /**\n     * Add key actions.\n     * @param pName - Action name.\n     * @param pButtons - Buttons binded to action.\n     */\n    addAction(pName, pButtons) {\n        this.mButtonActions.set(pName, new Set(pButtons));\n        // Map keys to actions. \n        for (const lKey of pButtons) {\n            // Init action list.\n            if (!this.mActionsButtons.has(lKey)) {\n                this.mActionsButtons.set(lKey, new Set());\n            }\n            this.mActionsButtons.get(lKey).add(pName);\n        }\n    }\n    /**\n     * Clone device configuration.\n     */\n    clone() {\n        const lClone = new DeviceConfiguration();\n        // Trigger tolerance.\n        lClone.triggerTolerance = this.triggerTolerance;\n        // Copy actions.\n        for (const lAction of this.mButtonActions) {\n            lClone.addAction(lAction[0], [...lAction[1]]);\n        }\n        return lClone;\n    }\n    /**\n     * Get keys of actions.\n     * @param pActionName - Action name.\n     */\n    getActionButtons(pActionName) {\n        return [...(this.mButtonActions.get(pActionName) ?? [])];\n    }\n    /**\n     * Get all actions asigned to button.\n     * @param pButton - Button.\n     */\n    getActionOfButton(pButton) {\n        // Copy Set to array.\n        return [...(this.mActionsButtons.get(pButton) ?? [])];\n    }\n}\nexports.DeviceConfiguration = DeviceConfiguration;\n//# sourceMappingURL=device-configuration.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GamepadButtonMapping = void 0;\nconst core_1 = require(\"@kartoffelgames/core\");\nconst button_value_type_enum_1 = require(\"../enum/button-value-type.enum\");\n/**\n * Gamepad mapping.\n */\nclass GamepadButtonMapping {\n    /**\n     * Constructor.\n     */\n    constructor(pMapping) {\n        this.mMapping = new core_1.Dictionary();\n        // Apply optional mapping.\n        if (pMapping) {\n            for (const lButton of Object.keys(pMapping)) {\n                const lButtonMapping = pMapping[lButton];\n                this.addMapping(lButton, lButtonMapping.type, lButtonMapping.index);\n            }\n        }\n    }\n    /**\n     * Add button mapping.\n     * @param pButton - Button.\n     * @param pButtonType - Type of button.\n     * @param pButtonIndex - Mapped index.\n     */\n    addMapping(pButton, pButtonType, pButtonIndex) {\n        this.mMapping.set(pButton, { type: pButtonType, index: pButtonIndex });\n    }\n    /**\n     * Get button value of mapped button.\n     * Unmapped buttons return allways zero.\n     * @param pButton - Button.\n     * @param pGamepad - Gamepad data.\n     */\n    executeMapping(pButton, pGamepad) {\n        const lButtonMapping = this.mMapping.get(pButton);\n        // Return unpressed value on all unmapped buttons. \n        if (!lButtonMapping) {\n            return 0;\n        }\n        // Access correct button array for axis or button  buttons.\n        if (lButtonMapping.type === button_value_type_enum_1.ButtonValueType.Button) {\n            return pGamepad.buttons[lButtonMapping.index]?.value ?? 0;\n        }\n        else { // Axis.   \n            return pGamepad.axes[lButtonMapping.index] ?? 0;\n        }\n    }\n}\nexports.GamepadButtonMapping = GamepadButtonMapping;\n//# sourceMappingURL=gamepad-button-mapping.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InputConfiguration = void 0;\nconst core_1 = require(\"@kartoffelgames/core\");\nconst button_value_type_enum_1 = require(\"../enum/button-value-type.enum\");\nconst gamepad_button_mapping_1 = require(\"./gamepad-button-mapping\");\nclass InputConfiguration {\n    /**\n     * Constructor.\n     */\n    constructor(pDefault) {\n        this.mGampadMappingList = new Array();\n        this.mDeviceSettings = new core_1.Dictionary();\n        this.mDefaultDevice = pDefault;\n        // Gamepad mapping.\n        this.mGampadMappingList = new Array();\n        this.mStandardGamepadMapping = new gamepad_button_mapping_1.GamepadButtonMapping({\n            clusterButtonBottom: { type: button_value_type_enum_1.ButtonValueType.Button, index: 0 },\n            clusterButtonRight: { type: button_value_type_enum_1.ButtonValueType.Button, index: 1 },\n            clusterButtonLeft: { type: button_value_type_enum_1.ButtonValueType.Button, index: 2 },\n            clusterButtonTop: { type: button_value_type_enum_1.ButtonValueType.Button, index: 3 },\n            buttonLeft: { type: button_value_type_enum_1.ButtonValueType.Button, index: 4 },\n            buttonRight: { type: button_value_type_enum_1.ButtonValueType.Button, index: 5 },\n            triggerLeft: { type: button_value_type_enum_1.ButtonValueType.Button, index: 6 },\n            triggerRight: { type: button_value_type_enum_1.ButtonValueType.Button, index: 7 },\n            selectButton: { type: button_value_type_enum_1.ButtonValueType.Button, index: 8 },\n            startButton: { type: button_value_type_enum_1.ButtonValueType.Button, index: 9 },\n            homeButton: { type: button_value_type_enum_1.ButtonValueType.Button, index: 16 },\n            directionalPadTop: { type: button_value_type_enum_1.ButtonValueType.Button, index: 12 },\n            directionalPadBottom: { type: button_value_type_enum_1.ButtonValueType.Button, index: 13 },\n            directionalPadRight: { type: button_value_type_enum_1.ButtonValueType.Button, index: 15 },\n            directionalPadLeft: { type: button_value_type_enum_1.ButtonValueType.Button, index: 14 },\n            leftThumbStickButton: { type: button_value_type_enum_1.ButtonValueType.Button, index: 10 },\n            leftThumbStickXaxis: { type: button_value_type_enum_1.ButtonValueType.Axis, index: 0 },\n            leftThumbStickYaxis: { type: button_value_type_enum_1.ButtonValueType.Axis, index: 1 },\n            rightThumbStickButton: { type: button_value_type_enum_1.ButtonValueType.Button, index: 11 },\n            rightThumbStickXaxis: { type: button_value_type_enum_1.ButtonValueType.Axis, index: 2 },\n            rightThumbStickYaxis: { type: button_value_type_enum_1.ButtonValueType.Axis, index: 3 },\n        });\n    }\n    /**\n     * Add gamepad mapping by id matching.\n     * @param pIdAssignment - Regex for assigning to matching gamepad ids.\n     * @param pMapping - Gamepad mapping.\n     */\n    addGamepadMapping(pIdAssignment, pMapping) {\n        this.mGampadMappingList.push({ mapping: pMapping, idMatch: pIdAssignment });\n    }\n    /**\n     * Get device settings.\n     * @param pDeviceId - Device id.\n     */\n    deviceConfiguration(pDeviceId) {\n        // Init device with cloned default configuration.\n        if (!this.mDeviceSettings.has(pDeviceId)) {\n            const lDefaultClone = this.mDefaultDevice.clone();\n            this.mDeviceSettings.set(pDeviceId, lDefaultClone);\n        }\n        return this.mDeviceSettings.get(pDeviceId);\n    }\n    /**\n     * Get mapping of gamepad.\n     * @param pGamepadId - Manufacturer id of gamepad.\n     */\n    getGampadMapping(pGamepadId, pGamepadMappingType) {\n        for (const lMappingAssignment of this.mGampadMappingList) {\n            if (lMappingAssignment.idMatch.test(pGamepadId)) {\n                return lMappingAssignment.mapping;\n            }\n        }\n        // Map with gamepad mapping type.\n        if (pGamepadMappingType === 'standard') {\n            return this.mStandardGamepadMapping;\n        }\n        return this.mStandardGamepadMapping;\n    }\n}\nexports.InputConfiguration = InputConfiguration;\n//# sourceMappingURL=input-configuration.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GamepadConnector = void 0;\nconst core_1 = require(\"@kartoffelgames/core\");\nconst gamepad_input_device_1 = require(\"../device/gamepad-input-device\");\n/**\n * Handles connect and disconnection of gamepads.\n */\nclass GamepadConnector {\n    static { this.mGamepads = new core_1.Dictionary(); }\n    /**\n     * Constructor.\n     * Initialize connecting and disconnecting gamepads.\n     */\n    init(pDevices) {\n        // Init connected gamepads.\n        window.addEventListener('gamepadconnected', (pEvent) => {\n            this.connectGamepad(pEvent.gamepad, pDevices);\n        });\n        // Deconstruct disconnected gamepads.\n        window.addEventListener('gamepaddisconnected', (pEvent) => {\n            this.disconnectGamepad(pEvent.gamepad, pDevices);\n        });\n        // Init gamepads that are connected before constructor call.\n        for (const lGamepad of globalThis.navigator.getGamepads()) {\n            if (lGamepad !== null) {\n                this.connectGamepad(lGamepad, pDevices);\n            }\n        }\n    }\n    /**\n     * Init gamepad.\n     * Applies gamepad button mapping.\n     * @param pGamepad - Gamepad\n     */\n    connectGamepad(pGamepad, pDevices) {\n        // Enable gamepad when already created.\n        if (GamepadConnector.mGamepads.has(pGamepad.index)) {\n            pDevices.registerDevice(GamepadConnector.mGamepads.get(pGamepad.index));\n            return;\n        }\n        // Try to find mappig by id assignment.\n        const lFoundMapping = pDevices.configuration.getGampadMapping(pGamepad.id, pGamepad.mapping);\n        // Build general gamepad information.\n        const lGamepadInformation = {\n            index: pGamepad.index,\n            id: pGamepad.id,\n            mapping: lFoundMapping\n        };\n        const lGamepadInput = new gamepad_input_device_1.GamepadInputDevice(lGamepadInformation, pDevices.configuration);\n        // Add GamepadGameInput to local store.\n        GamepadConnector.mGamepads.add(pGamepad.index, lGamepadInput);\n        // Add gamepad to global input devices.\n        pDevices.registerDevice(lGamepadInput);\n    }\n    /**\n     * Desconstruct gamepad.\n     * @param pGamepad - Gamepad.\n     */\n    disconnectGamepad(pGamepad, pDevices) {\n        // Only disconnect GamepadInput\n        if (GamepadConnector.mGamepads.has(pGamepad.index)) {\n            pDevices.unregisterDevice(GamepadConnector.mGamepads.get(pGamepad.index));\n        }\n    }\n}\nexports.GamepadConnector = GamepadConnector;\n//# sourceMappingURL=gamepad-connector.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseKeyboardConnector = void 0;\nconst mouse_keyboard_input_device_1 = require(\"../device/mouse-keyboard-input-device\");\nclass MouseKeyboardConnector {\n    /**\n     * Init keyboard and mouse input devices.\n     */\n    init(pDevices) {\n        pDevices.registerDevice(new mouse_keyboard_input_device_1.MouseKeyboardInputDevice(pDevices.configuration));\n    }\n}\nexports.MouseKeyboardConnector = MouseKeyboardConnector;\n//# sourceMappingURL=mouse-keyboard-connector.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseInputDevice = void 0;\nconst core_1 = require(\"@kartoffelgames/core\");\nconst input_action_event_1 = require(\"../event/input-action-event\");\nconst input_button_event_1 = require(\"../event/input-button-event\");\nclass BaseInputDevice extends EventTarget {\n    /**\n     * Get connection state.\n     */\n    get connected() {\n        return this.mConnected;\n    }\n    set connected(pConnected) {\n        this.mConnected = pConnected;\n        // Call state change method.\n        this.onConnectionStateChange();\n    }\n    /**\n     * Device configuration.\n     */\n    get deviceConfiguration() {\n        return this.mDeviceConfiguration;\n    }\n    /**\n     * Device type.\n     */\n    get deviceType() {\n        return this.mDeviceType;\n    }\n    /**\n     * Unique game input id.\n     * Consistent on reconnect.\n     */\n    get id() {\n        return this.mId;\n    }\n    /**\n     * Constructor.s\n     * @param pId - Game input id.\n     */\n    constructor(pId, pDeviceType, pDeviceConfiguration) {\n        super();\n        this.mId = pId;\n        this.mConnected = false;\n        this.mDeviceType = pDeviceType;\n        this.mButtonState = new core_1.Dictionary();\n        this.mActionStates = new core_1.Dictionary();\n        this.mDeviceConfiguration = pDeviceConfiguration;\n    }\n    addEventListener(pType, pCallback, pOptions) {\n        super.addEventListener(pType, pCallback, pOptions);\n    }\n    /**\n     * Get float value of button state. Range between 0..1.\n     * @param pButton - Button\n     */\n    getButtonState(pButton) {\n        return this.mButtonState.get(pButton) ?? 0;\n    }\n    /**\n     * Check for button pressed.\n     * @param pButton - Button.\n     */\n    isPressed(pButton) {\n        return this.getButtonState(pButton) !== 0;\n    }\n    /**\n     * Set button state.\n     * Updates states of alias buttons.\n     * @param pButton - Target button.\n     * @param pValue - New state value of button.\n     */\n    setButtonState(pButton, pValue) {\n        // Exit when input is not connected.\n        if (!this.connected) {\n            return;\n        }\n        // Save current state.\n        const lLastButtonState = this.mButtonState.get(pButton) ?? 0;\n        // Apply tolerance. Absolute values for negative axis.\n        let lButtonState = pValue;\n        if (Math.abs(lButtonState) < this.mDeviceConfiguration.triggerTolerance) {\n            lButtonState = 0;\n        }\n        // Exit when values has not changed.\n        if (lLastButtonState === lButtonState) {\n            return;\n        }\n        // Set next target button state and trigger button change.\n        this.mButtonState.set(pButton, lButtonState);\n        this.dispatchButtonChangeEvent(pButton, lButtonState, lLastButtonState);\n        // Check all actions of this buttons.\n        for (const lAction of this.deviceConfiguration.getActionOfButton(pButton)) {\n            const lActionButtonList = this.deviceConfiguration.getActionButtons(lAction);\n            // Get lowest state of all alias buttons.\n            const lActionState = lActionButtonList.reduce((pCurrentValue, pNextValue) => {\n                const lNextValue = this.mButtonState.get(pNextValue) ?? 0;\n                // Save changes closer to zero.\n                if (Math.abs(lNextValue) < Math.abs(pCurrentValue)) {\n                    return lNextValue;\n                }\n                else {\n                    return pCurrentValue;\n                }\n            }, 999);\n            // Set highest state to alias target state.\n            const lActionLastState = this.mActionStates.get(lAction) ?? 0;\n            // Exit when values has not changed.\n            if (lActionLastState === lActionState) {\n                return;\n            }\n            // Update action state.\n            this.mActionStates.set(lAction, lActionState);\n            // Trigger events.\n            this.dispatchActionChangeEvent(lAction, lActionState, lActionLastState, lActionButtonList);\n        }\n    }\n    /**\n     * Dispatch action events based on changed state.\n     * @param pAction - Target action.\n     * @param pCurrentState - Current set state.\n     * @param pLastState - Last state.\n     */\n    dispatchActionChangeEvent(pAction, pCurrentState, pLastState, pAffectedButtons) {\n        // Trigger pressed event when last state was zero.\n        if (pLastState === 0) {\n            this.dispatchEvent(new input_action_event_1.InputActionEvent('actiondown', pAction, pCurrentState, pAffectedButtons));\n        }\n        else if (Math.abs(pLastState) > 0 && pCurrentState === 0) {\n            this.dispatchEvent(new input_action_event_1.InputActionEvent('actionup', pAction, pCurrentState, pAffectedButtons));\n        }\n        // Trigger value change event.\n        this.dispatchEvent(new input_action_event_1.InputActionEvent('actionstatechange', pAction, pCurrentState, pAffectedButtons));\n        return true;\n    }\n    /**\n     * Dispatch button events based on changed state.\n     * @param pButton - Target button.\n     * @param pCurrentState - Current set state.\n     * @param pLastState - Last state.\n     */\n    dispatchButtonChangeEvent(pButton, pCurrentState, pLastState) {\n        // Trigger pressed event when last state was zero.\n        if (pLastState === 0) {\n            this.dispatchEvent(new input_button_event_1.InputButtonEvent('buttondown', pButton, pCurrentState));\n        }\n        else if (Math.abs(pLastState) > 0 && pCurrentState === 0) {\n            this.dispatchEvent(new input_button_event_1.InputButtonEvent('buttonup', pButton, pCurrentState));\n        }\n        // Trigger value change event.\n        this.dispatchEvent(new input_button_event_1.InputButtonEvent('buttonstatechange', pButton, pCurrentState));\n        return true;\n    }\n}\nexports.BaseInputDevice = BaseInputDevice;\n//# sourceMappingURL=base-input-device.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GamepadInputDevice = void 0;\nconst core_1 = require(\"@kartoffelgames/core\");\nconst gamepad_button_enum_1 = require(\"../enum/gamepad-button.enum\");\nconst input_device_enum_1 = require(\"../enum/input-device.enum\");\nconst base_input_device_1 = require(\"./base-input-device\");\nclass GamepadInputDevice extends base_input_device_1.BaseInputDevice {\n    /**\n     * Constructor.\n     * @param pGamepad - Gamepad object.\n     */\n    constructor(pGamepad, pConfiguration) {\n        const lDeviceId = `gamepad_${pGamepad.index}`;\n        const lDeviceConfiguration = pConfiguration.deviceConfiguration(lDeviceId);\n        super(lDeviceId, input_device_enum_1.InputDevice.Gamepad, lDeviceConfiguration);\n        this.mGamepadInformation = pGamepad;\n        this.mLoopRunning = false;\n    }\n    /**\n     * On connection state change.\n     */\n    onConnectionStateChange() {\n        if (this.connected && !this.mLoopRunning) {\n            this.startScanLoop();\n        }\n    }\n    /**\n     * Start scanning for pressed buttons.\n     */\n    startScanLoop() {\n        // Get all gamepad buttons.\n        const lGamepadButtonList = core_1.EnumUtil.valuesOf(gamepad_button_enum_1.GamepadButton);\n        const lLoop = () => {\n            // Only scan on connected gamepads.\n            if (this.connected) {\n                // Find connected gamepad. Gamepad does allways exists. Even after disconnect.\n                const lGamepad = globalThis.navigator.getGamepads().find((pGamepad) => {\n                    return pGamepad.index === this.mGamepadInformation.index;\n                });\n                // Scan each gamepad button.\n                for (const lButton of lGamepadButtonList) {\n                    // Read button value.\n                    const lButtonValue = this.mGamepadInformation.mapping.executeMapping(lButton, lGamepad);\n                    // Set button value.\n                    this.setButtonState(lButton, lButtonValue);\n                }\n            }\n            // Stop loop on disconnect.\n            if (this.connected) {\n                globalThis.requestAnimationFrame(lLoop);\n            }\n            else {\n                this.mLoopRunning = false;\n            }\n        };\n        // Request starting animation frame.\n        globalThis.requestAnimationFrame(lLoop);\n        this.mLoopRunning = true;\n    }\n}\nexports.GamepadInputDevice = GamepadInputDevice;\n//# sourceMappingURL=gamepad-input-device.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseKeyboardInputDevice = void 0;\nconst input_device_enum_1 = require(\"../enum/input-device.enum\");\nconst mouse_button_enum_1 = require(\"../enum/mouse-button.enum\");\nconst base_input_device_1 = require(\"./base-input-device\");\nclass MouseKeyboardInputDevice extends base_input_device_1.BaseInputDevice {\n    /**\n     * Constructor.\n     * @param pConfiguration - Iput configuration.\n     */\n    constructor(pConfiguration) {\n        const lDeviceId = 'KEYBOARD_MOUSE_1';\n        const lDeviceConfiguration = pConfiguration.deviceConfiguration(lDeviceId);\n        super(lDeviceId, input_device_enum_1.InputDevice.MouseKeyboard, lDeviceConfiguration);\n        this.mMovementX = 0;\n        this.mMovementY = 0;\n        this.mLoopRunning = false;\n        this.setupCaptureListener();\n    }\n    /**\n     * On connection state change.\n     */\n    onConnectionStateChange() {\n        if (this.connected && !this.mLoopRunning) {\n            this.startMouseMoveScanLoop();\n        }\n    }\n    /**\n     * Set value of mouse button.\n     * @param pButtonNumber - Button number of MouseEvent.button.\n     * @param pValue - Button values.\n     */\n    setMouseButtonValue(pButtonNumber, pValue) {\n        switch (pButtonNumber) {\n            case 0: {\n                this.setButtonState(mouse_button_enum_1.MouseButton.MainLeft, pValue);\n                break;\n            }\n            case 1: {\n                this.setButtonState(mouse_button_enum_1.MouseButton.MainMiddle, pValue);\n                break;\n            }\n            case 2: {\n                this.setButtonState(mouse_button_enum_1.MouseButton.MainRight, pValue);\n                break;\n            }\n            case 3: {\n                this.setButtonState(mouse_button_enum_1.MouseButton.SecondaryBack, pValue);\n                break;\n            }\n            case 4: {\n                this.setButtonState(mouse_button_enum_1.MouseButton.SecondaryForward, pValue);\n                break;\n            }\n        }\n    }\n    /**\n     * Setup event listener for keyboard and mouse events.\n     */\n    setupCaptureListener() {\n        // Capture mouse movement for next frame.\n        document.addEventListener('mousemove', (pMouseEvent) => {\n            this.mMovementX += pMouseEvent.movementX;\n            this.mMovementY += pMouseEvent.movementY;\n        });\n        // Mouse button events.\n        document.addEventListener('mouseup', (pMouseEvent) => {\n            this.setMouseButtonValue(pMouseEvent.button, 0);\n        });\n        document.addEventListener('mousedown', (pMouseEvent) => {\n            this.setMouseButtonValue(pMouseEvent.button, 1);\n        });\n        // Keyboard event.\n        document.addEventListener('keydown', (pKeyboardEvent) => {\n            const lInputKey = pKeyboardEvent.code;\n            this.setButtonState(lInputKey, 1);\n        });\n        document.addEventListener('keyup', (pKeyboardEvent) => {\n            const lInputKey = pKeyboardEvent.code;\n            this.setButtonState(lInputKey, 0);\n        });\n    }\n    /**\n     * Start scanning mouse movements.\n     */\n    startMouseMoveScanLoop() {\n        // Reset mouse movement.\n        this.mMovementX = 0;\n        this.mMovementY = 0;\n        const lMouseMoveReport = () => {\n            // Calculate to axis value by set base value to 10 pixels.\n            this.setButtonState(mouse_button_enum_1.MouseButton.Xaxis, this.mMovementX / 10);\n            this.setButtonState(mouse_button_enum_1.MouseButton.Yaxis, this.mMovementY / 10);\n            // Reset mouse movement.\n            this.mMovementX = 0;\n            this.mMovementY = 0;\n            if (this.connected) {\n                globalThis.requestAnimationFrame(lMouseMoveReport);\n            }\n            else {\n                this.mLoopRunning = false;\n            }\n        };\n        globalThis.requestAnimationFrame(lMouseMoveReport);\n        this.mLoopRunning = true;\n    }\n}\nexports.MouseKeyboardInputDevice = MouseKeyboardInputDevice;\n//# sourceMappingURL=mouse-keyboard-input-device.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ButtonValueType = void 0;\nvar ButtonValueType;\n(function (ButtonValueType) {\n    ButtonValueType[ButtonValueType[\"Button\"] = 1] = \"Button\";\n    ButtonValueType[ButtonValueType[\"Axis\"] = 2] = \"Axis\";\n})(ButtonValueType || (exports.ButtonValueType = ButtonValueType = {}));\n//# sourceMappingURL=button-value-type.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GamepadButton = void 0;\nvar GamepadButton;\n(function (GamepadButton) {\n    GamepadButton[\"ClusterButtonBottom\"] = \"clusterButtonBottom\";\n    GamepadButton[\"ClusterButtonRight\"] = \"clusterButtonRight\";\n    GamepadButton[\"ClusterButtonLeft\"] = \"clusterButtonLeft\";\n    GamepadButton[\"ClusterButtonTop\"] = \"clusterButtonTop\";\n    GamepadButton[\"ButtonLeft\"] = \"buttonLeft\";\n    GamepadButton[\"ButtonRight\"] = \"buttonRight\";\n    GamepadButton[\"TriggerLeft\"] = \"triggerLeft\";\n    GamepadButton[\"TriggerRight\"] = \"triggerRight\";\n    GamepadButton[\"SelectButton\"] = \"selectButton\";\n    GamepadButton[\"StartButton\"] = \"startButton\";\n    GamepadButton[\"HomeButton\"] = \"homeButton\";\n    GamepadButton[\"DirectionalPadTop\"] = \"directionalPadTop\";\n    GamepadButton[\"DirectionalPadBottom\"] = \"directionalPadBottom\";\n    GamepadButton[\"DirectionalPadRight\"] = \"directionalPadRight\";\n    GamepadButton[\"DirectionalPadLeft\"] = \"directionalPadLeft\";\n    GamepadButton[\"LeftThumbStickButton\"] = \"leftThumbStickButton\";\n    GamepadButton[\"LeftThumbStickXaxis\"] = \"leftThumbStickXaxis\";\n    GamepadButton[\"LeftThumbStickYaxis\"] = \"leftThumbStickYaxis\";\n    GamepadButton[\"RightThumbStickButton\"] = \"rightThumbStickButton\";\n    GamepadButton[\"RightThumbStickXaxis\"] = \"rightThumbStickXaxis\";\n    GamepadButton[\"RightThumbStickYaxis\"] = \"rightThumbStickYaxis\";\n})(GamepadButton || (exports.GamepadButton = GamepadButton = {}));\n//# sourceMappingURL=gamepad-button.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InputDevice = void 0;\nvar InputDevice;\n(function (InputDevice) {\n    InputDevice[InputDevice[\"MouseKeyboard\"] = 1] = \"MouseKeyboard\";\n    InputDevice[InputDevice[\"Gamepad\"] = 2] = \"Gamepad\";\n})(InputDevice || (exports.InputDevice = InputDevice = {}));\n//# sourceMappingURL=input-device.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyboardButton = void 0;\nvar KeyboardButton;\n(function (KeyboardButton) {\n    // Letter keys.\n    KeyboardButton[\"KeyA\"] = \"KeyA\";\n    KeyboardButton[\"KeyB\"] = \"KeyB\";\n    KeyboardButton[\"KeyC\"] = \"KeyC\";\n    KeyboardButton[\"KeyD\"] = \"KeyD\";\n    KeyboardButton[\"KeyE\"] = \"KeyE\";\n    KeyboardButton[\"KeyF\"] = \"KeyF\";\n    KeyboardButton[\"KeyG\"] = \"KeyG\";\n    KeyboardButton[\"KeyH\"] = \"KeyH\";\n    KeyboardButton[\"KeyI\"] = \"KeyI\";\n    KeyboardButton[\"KeyJ\"] = \"KeyJ\";\n    KeyboardButton[\"KeyK\"] = \"KeyK\";\n    KeyboardButton[\"KeyL\"] = \"KeyL\";\n    KeyboardButton[\"KeyM\"] = \"KeyM\";\n    KeyboardButton[\"KeyN\"] = \"KeyN\";\n    KeyboardButton[\"KeyO\"] = \"KeyO\";\n    KeyboardButton[\"KeyP\"] = \"KeyP\";\n    KeyboardButton[\"KeyQ\"] = \"KeyQ\";\n    KeyboardButton[\"KeyR\"] = \"KeyR\";\n    KeyboardButton[\"KeyS\"] = \"KeyS\";\n    KeyboardButton[\"KeyT\"] = \"KeyT\";\n    KeyboardButton[\"KeyU\"] = \"KeyU\";\n    KeyboardButton[\"KeyV\"] = \"KeyV\";\n    KeyboardButton[\"KeyW\"] = \"KeyW\";\n    KeyboardButton[\"KeyX\"] = \"KeyX\";\n    KeyboardButton[\"KeyY\"] = \"KeyY\";\n    KeyboardButton[\"KeyZ\"] = \"KeyZ\";\n    // Digit keys.\n    KeyboardButton[\"Digit0\"] = \"Digit0\";\n    KeyboardButton[\"Digit1\"] = \"Digit1\";\n    KeyboardButton[\"Digit2\"] = \"Digit2\";\n    KeyboardButton[\"Digit3\"] = \"Digit3\";\n    KeyboardButton[\"Digit4\"] = \"Digit4\";\n    KeyboardButton[\"Digit5\"] = \"Digit5\";\n    KeyboardButton[\"Digit6\"] = \"Digit6\";\n    KeyboardButton[\"Digit7\"] = \"Digit7\";\n    KeyboardButton[\"Digit8\"] = \"Digit8\";\n    KeyboardButton[\"Digit9\"] = \"Digit9\";\n    // Numberpad key.\n    KeyboardButton[\"NumLock\"] = \"NumLock\";\n    KeyboardButton[\"Numpad0\"] = \"Numpad0\";\n    KeyboardButton[\"Numpad1\"] = \"Numpad1\";\n    KeyboardButton[\"Numpad2\"] = \"Numpad2\";\n    KeyboardButton[\"Numpad3\"] = \"Numpad3\";\n    KeyboardButton[\"Numpad4\"] = \"Numpad4\";\n    KeyboardButton[\"Numpad5\"] = \"Numpad5\";\n    KeyboardButton[\"Numpad6\"] = \"Numpad6\";\n    KeyboardButton[\"Numpad7\"] = \"Numpad7\";\n    KeyboardButton[\"Numpad8\"] = \"Numpad8\";\n    KeyboardButton[\"Numpad9\"] = \"Numpad9\";\n    KeyboardButton[\"NumpadAdd\"] = \"NumpadAdd\";\n    KeyboardButton[\"NumpadComma\"] = \"NumpadComma\";\n    KeyboardButton[\"NumpadDecimal\"] = \"NumpadDecimal\";\n    KeyboardButton[\"NumpadDivide\"] = \"NumpadDivide\";\n    KeyboardButton[\"NumpadEnter\"] = \"NumpadEnter\";\n    KeyboardButton[\"NumpadMultiply\"] = \"NumpadMultiply\";\n    KeyboardButton[\"NumpadSubtract\"] = \"NumpadSubtract\";\n    // Function keys.\n    KeyboardButton[\"F1\"] = \"F1\";\n    KeyboardButton[\"F2\"] = \"F2\";\n    KeyboardButton[\"F3\"] = \"F3\";\n    KeyboardButton[\"F4\"] = \"F4\";\n    KeyboardButton[\"F5\"] = \"F5\";\n    KeyboardButton[\"F6\"] = \"F6\";\n    KeyboardButton[\"F7\"] = \"F7\";\n    KeyboardButton[\"F8\"] = \"F8\";\n    KeyboardButton[\"F9\"] = \"F9\";\n    KeyboardButton[\"F10\"] = \"F10\";\n    KeyboardButton[\"F11\"] = \"F11\";\n    KeyboardButton[\"F12\"] = \"F12\";\n    KeyboardButton[\"F13\"] = \"F13\";\n    KeyboardButton[\"F14\"] = \"F14\";\n    KeyboardButton[\"F15\"] = \"F15\";\n    KeyboardButton[\"F16\"] = \"F16\";\n    KeyboardButton[\"F17\"] = \"F17\";\n    KeyboardButton[\"F18\"] = \"F18\";\n    KeyboardButton[\"F19\"] = \"F19\";\n    KeyboardButton[\"F20\"] = \"F20\";\n    KeyboardButton[\"F21\"] = \"F21\";\n    KeyboardButton[\"F22\"] = \"F22\";\n    KeyboardButton[\"F23\"] = \"F23\";\n    KeyboardButton[\"F24\"] = \"F24\";\n    // Arrow keys.\n    KeyboardButton[\"ArrowDown\"] = \"ArrowDown\";\n    KeyboardButton[\"ArrowLeft\"] = \"ArrowLeft\";\n    KeyboardButton[\"ArrowRight\"] = \"ArrowRight\";\n    KeyboardButton[\"ArrowUp\"] = \"ArrowUp\";\n    // Main metas\n    KeyboardButton[\"Escape\"] = \"Escape\";\n    KeyboardButton[\"AltLeft\"] = \"AltLeft\";\n    KeyboardButton[\"AltRight\"] = \"AltRight\";\n    KeyboardButton[\"CapsLock\"] = \"CapsLock\";\n    KeyboardButton[\"MetaLeft\"] = \"MetaLeft\";\n    KeyboardButton[\"MetaRight\"] = \"MetaRight\";\n    KeyboardButton[\"OsLeft\"] = \"OSLeft\";\n    KeyboardButton[\"OsRight\"] = \"OSRight\";\n    KeyboardButton[\"ShiftLeft\"] = \"ShiftLeft\";\n    KeyboardButton[\"ShiftRight\"] = \"ShiftRight\";\n    KeyboardButton[\"ControlLeft\"] = \"ControlLeft\";\n    KeyboardButton[\"ControlRight\"] = \"ControlRight\";\n    // White space key.s\n    KeyboardButton[\"Enter\"] = \"Enter\";\n    KeyboardButton[\"Space\"] = \"Space\";\n    KeyboardButton[\"Tab\"] = \"Tab\";\n    // Center meta\n    KeyboardButton[\"Delete\"] = \"Delete\";\n    KeyboardButton[\"End\"] = \"End\";\n    KeyboardButton[\"PageDown\"] = \"PageDown\";\n    KeyboardButton[\"PageUp\"] = \"PageUp\";\n    KeyboardButton[\"Insert\"] = \"Insert\";\n    KeyboardButton[\"ScrollLock\"] = \"ScrollLock\";\n    // Media keys.\n    KeyboardButton[\"AudioVolumeUp\"] = \"AudioVolumeUp\";\n    KeyboardButton[\"Home\"] = \"Home\";\n    KeyboardButton[\"ContextMenu\"] = \"ContextMenu\";\n    // Brackes, slash and dot keys.\n    KeyboardButton[\"Backquote\"] = \"Backquote\";\n    KeyboardButton[\"Backslash\"] = \"Backslash\";\n    KeyboardButton[\"Backspace\"] = \"Backspace\";\n    KeyboardButton[\"BracketLeft\"] = \"BracketLeft\";\n    KeyboardButton[\"BracketRight\"] = \"BracketRight\";\n    KeyboardButton[\"Comma\"] = \"Comma\";\n    KeyboardButton[\"IntlBackslash\"] = \"IntlBackslash\";\n    KeyboardButton[\"Period\"] = \"Period\";\n    KeyboardButton[\"Quote\"] = \"Quote\";\n    KeyboardButton[\"Semicolon\"] = \"Semicolon\";\n    KeyboardButton[\"Slash\"] = \"Slash\";\n    KeyboardButton[\"Minus\"] = \"Minus\";\n    KeyboardButton[\"Equal\"] = \"Equal\";\n})(KeyboardButton || (exports.KeyboardButton = KeyboardButton = {}));\n//# sourceMappingURL=keyboard-button.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseButton = void 0;\nvar MouseButton;\n(function (MouseButton) {\n    // Main trigger.\n    MouseButton[\"MainLeft\"] = \"mainLeft\";\n    MouseButton[\"MainRight\"] = \"mainRight\";\n    MouseButton[\"MainMiddle\"] = \"mainMiddle\";\n    MouseButton[\"SecondaryBack\"] = \"secondaryBack\";\n    MouseButton[\"SecondaryForward\"] = \"secondaryForward\";\n    // Axis.\n    MouseButton[\"Xaxis\"] = \"xAxis\";\n    MouseButton[\"Yaxis\"] = \"yAxis\";\n})(MouseButton || (exports.MouseButton = MouseButton = {}));\n//# sourceMappingURL=mouse-button.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InputActionEvent = void 0;\nclass InputActionEvent extends Event {\n    /**\n     * Triggered action.\n     */\n    get action() {\n        return this.mAction;\n    }\n    /**\n     * Action Buttons.\n     */\n    get buttons() {\n        return this.mButtons;\n    }\n    /**\n     * Button pressed state.\n     */\n    get isPressed() {\n        return this.mState > 0;\n    }\n    /**\n     * Button state.\n     */\n    get state() {\n        return this.mState;\n    }\n    /**\n     * Constructor.\n     * @param pType - Event type.\n     * @param pState - Button state.\n     */\n    constructor(pType, pAction, pState, pButtons) {\n        super(pType);\n        this.mAction = pAction;\n        this.mState = pState;\n        this.mButtons = pButtons;\n    }\n}\nexports.InputActionEvent = InputActionEvent;\n//# sourceMappingURL=input-action-event.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InputButtonEvent = void 0;\nclass InputButtonEvent extends Event {\n    /**\n     * Button.\n     */\n    get button() {\n        return this.mButton;\n    }\n    /**\n     * Button pressed state.\n     */\n    get isPressed() {\n        return this.mState > 0;\n    }\n    /**\n     * Button state.\n     */\n    get state() {\n        return this.mState;\n    }\n    /**\n     * Constructor.\n     * @param pType - Event type.\n     * @param pState - Button state.\n     */\n    constructor(pType, pButton, pState) {\n        super(pType);\n        this.mState = pState;\n        this.mButton = pButton;\n    }\n}\nexports.InputButtonEvent = InputButtonEvent;\n//# sourceMappingURL=input-button-event.js.map","\"use strict\";\n/* istanbul ignore file */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GamepadButton = exports.MouseButton = exports.KeyboardButton = exports.InputButtonEvent = exports.InputActionEvent = exports.BaseInputDevice = exports.InputConfiguration = exports.InputDevices = exports.GamepadConnector = exports.MouseKeyboardConnector = exports.DeviceConfiguration = void 0;\nvar device_configuration_1 = require(\"./configuration/device-configuration\");\nObject.defineProperty(exports, \"DeviceConfiguration\", { enumerable: true, get: function () { return device_configuration_1.DeviceConfiguration; } });\nvar mouse_keyboard_connector_1 = require(\"./connector/mouse-keyboard-connector\");\nObject.defineProperty(exports, \"MouseKeyboardConnector\", { enumerable: true, get: function () { return mouse_keyboard_connector_1.MouseKeyboardConnector; } });\nvar gamepad_connector_1 = require(\"./connector/gamepad-connector\");\nObject.defineProperty(exports, \"GamepadConnector\", { enumerable: true, get: function () { return gamepad_connector_1.GamepadConnector; } });\nvar input_devices_1 = require(\"./input-devices\");\nObject.defineProperty(exports, \"InputDevices\", { enumerable: true, get: function () { return input_devices_1.InputDevices; } });\nvar input_configuration_1 = require(\"./configuration/input-configuration\");\nObject.defineProperty(exports, \"InputConfiguration\", { enumerable: true, get: function () { return input_configuration_1.InputConfiguration; } });\nvar base_input_device_1 = require(\"./device/base-input-device\");\nObject.defineProperty(exports, \"BaseInputDevice\", { enumerable: true, get: function () { return base_input_device_1.BaseInputDevice; } });\nvar input_action_event_1 = require(\"./event/input-action-event\");\nObject.defineProperty(exports, \"InputActionEvent\", { enumerable: true, get: function () { return input_action_event_1.InputActionEvent; } });\nvar input_button_event_1 = require(\"./event/input-button-event\");\nObject.defineProperty(exports, \"InputButtonEvent\", { enumerable: true, get: function () { return input_button_event_1.InputButtonEvent; } });\nvar keyboard_button_enum_1 = require(\"./enum/keyboard-button.enum\");\nObject.defineProperty(exports, \"KeyboardButton\", { enumerable: true, get: function () { return keyboard_button_enum_1.KeyboardButton; } });\nvar mouse_button_enum_1 = require(\"./enum/mouse-button.enum\");\nObject.defineProperty(exports, \"MouseButton\", { enumerable: true, get: function () { return mouse_button_enum_1.MouseButton; } });\nvar gamepad_button_enum_1 = require(\"./enum/gamepad-button.enum\");\nObject.defineProperty(exports, \"GamepadButton\", { enumerable: true, get: function () { return gamepad_button_enum_1.GamepadButton; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InputDevices = void 0;\nconst core_1 = require(\"@kartoffelgames/core\");\nclass InputDevices {\n    /**\n     * Get input device configuration.\n     */\n    get configuration() {\n        return this.mConfiguration;\n    }\n    /**\n     * Get all input devices.\n     */\n    get devices() {\n        return [...this.mInputDevices.values()];\n    }\n    /**\n     * Constructor.\n     * @param pConfiguration - input configuration.\n     */\n    constructor(pConfiguration) {\n        this.mConnectionChangeListenerList = new Array();\n        this.mInputDevices = new core_1.Dictionary();\n        this.mConfiguration = pConfiguration;\n    }\n    /**\n     * On connection change.\n     * @param pListener - Connection change listener.\n     */\n    onConnectionChange(pListener) {\n        this.mConnectionChangeListenerList.push(pListener);\n    }\n    /**\n     * Register input connector.\n     * @param pConnector - Input connector.\n     */\n    registerConnector(pConnector) {\n        pConnector.init(this);\n    }\n    /**\n     * Register new device.\n     * @param pDevice - Device.\n     */\n    registerDevice(pDevice) {\n        let lDevice;\n        // Init new device or reconnect old.\n        if (this.mInputDevices.has(pDevice.id)) {\n            lDevice = this.mInputDevices.get(pDevice.id);\n        }\n        else {\n            this.mInputDevices.set(pDevice.id, pDevice);\n            lDevice = pDevice;\n        }\n        lDevice.connected = true;\n        this.dispatchConnectionChangeEvent(lDevice);\n    }\n    /**\n     * Unregister device.\n     * @param pDevice - Device.\n     */\n    unregisterDevice(pDevice) {\n        if (this.mInputDevices.has(pDevice.id)) {\n            const lDevice = this.mInputDevices.get(pDevice.id);\n            lDevice.connected = false;\n            this.dispatchConnectionChangeEvent(lDevice);\n        }\n    }\n    /**\n     * Call all connection change listener.\n     * @param pDevice - Changed device.\n     */\n    dispatchConnectionChangeEvent(pDevice) {\n        for (const lCallback of this.mConnectionChangeListenerList) {\n            lCallback.apply(this, [pDevice]);\n        }\n    }\n}\nexports.InputDevices = InputDevices;\n//# sourceMappingURL=input-devices.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { GpuBuffer } from '../../source/buffer/gpu-buffer';\r\nimport { GpuBufferView } from '../../source/buffer/gpu-buffer-view';\r\nimport { BufferItemFormat } from '../../source/constant/buffer-item-format.enum';\r\nimport { BufferItemMultiplier } from '../../source/constant/buffer-item-multiplier.enum';\r\nimport { CompareFunction } from '../../source/constant/compare-function.enum';\r\nimport { ComputeStage } from '../../source/constant/compute-stage.enum';\r\nimport { GpuFeature } from '../../source/constant/gpu-feature.enum';\r\nimport { PrimitiveCullMode } from '../../source/constant/primitive-cullmode.enum';\r\nimport { SamplerType } from '../../source/constant/sampler-type.enum';\r\nimport { StorageBindingType } from '../../source/constant/storage-binding-type.enum';\r\nimport { TextureBlendFactor } from '../../source/constant/texture-blend-factor.enum';\r\nimport { TextureBlendOperation } from '../../source/constant/texture-blend-operation.enum';\r\nimport { TextureFormat } from '../../source/constant/texture-format.enum';\r\nimport { TextureViewDimension } from '../../source/constant/texture-view-dimension.enum';\r\nimport { VertexParameterStepMode } from '../../source/constant/vertex-parameter-step-mode.enum';\r\nimport { GpuDevice } from '../../source/device/gpu-device';\r\nimport { GpuExecution } from '../../source/execution/gpu-execution';\r\nimport { ComputePass } from '../../source/execution/pass/compute-pass';\r\nimport { RenderPass } from '../../source/execution/pass/render-pass';\r\nimport { BindGroup } from '../../source/pipeline/bind_group/bind-group';\r\nimport { BindGroupLayout } from '../../source/pipeline/bind_group_layout/bind-group-layout';\r\nimport { ComputePipeline } from '../../source/pipeline/compute-pipeline';\r\nimport { PipelineData } from '../../source/pipeline/pipeline_data/pipeline-data';\r\nimport { RenderTargets, RenderTargetsInvalidationType } from '../../source/pipeline/render_targets/render-targets';\r\nimport { VertexFragmentPipeline } from '../../source/pipeline/vertex_fragment_pipeline/vertex-fragment-pipeline';\r\nimport { VertexParameter } from '../../source/pipeline/vertex_parameter/vertex-parameter';\r\nimport { Shader } from '../../source/shader/shader';\r\nimport { ShaderRenderModule } from '../../source/shader/shader-render-module';\r\nimport { CanvasTexture } from '../../source/texture/canvas-texture';\r\nimport { GpuTexture, GpuTextureCopyOptions } from '../../source/texture/gpu-texture';\r\nimport { AmbientLight } from './camera/light/ambient-light';\r\nimport { Transform, TransformMatrix } from './camera/transform';\r\nimport { PerspectiveProjection } from './camera/view_projection/projection/perspective-projection';\r\nimport { ViewProjection } from './camera/view_projection/view-projection';\r\nimport colorCubeShader from './game_objects/color_cube/color-cube-shader.wgsl';\r\nimport cubeShader from './game_objects/cube/cube-shader.wgsl';\r\nimport particleComputeShader from './game_objects/leaf_particle/particle-compute-shader.wgsl';\r\nimport particleShader from './game_objects/leaf_particle/particle-shader.wgsl';\r\nimport lightBoxShader from './game_objects/light/light-box-shader.wgsl';\r\nimport skyboxShader from './game_objects/skybox/sky-box-shader.wgsl';\r\nimport videoCanvasShader from './game_objects/video_canvas/video-canvas-shader.wgsl';\r\nimport { CanvasVertexIndices, CanvasVertexNormalData, CanvasVertexPositionData, CanvasVertexUvData } from './meshes/canvas-mesh';\r\nimport { CubeVertexIndices, CubeVertexNormalData, CubeVertexPositionData, CubeVertexUvData } from './meshes/cube-mesh';\r\nimport { ParticleVertexIndices, ParticleVertexPositionUvData } from './meshes/particle-mesh';\r\nimport { InitCameraControls, UpdateFpsDisplay } from './util';\r\n\r\nconst gGenerateCubeStep = (pGpu: GpuDevice, pRenderTargets: RenderTargets, pWorldGroup: BindGroup): RenderInstruction => {\r\n    const lHeight: number = 50;\r\n    const lWidth: number = 50;\r\n    const lDepth: number = 50;\r\n\r\n    // Create shader.\r\n    const lWoodBoxShader = pGpu.shader(cubeShader).setup((pShaderSetup) => {\r\n        // Set parameter.\r\n        pShaderSetup.parameter('animationSeconds', ComputeStage.Vertex);\r\n\r\n        // Vertex entry.\r\n        pShaderSetup.vertexEntryPoint('vertex_main', (pVertexParameterSetup) => {\r\n            pVertexParameterSetup.buffer('position', VertexParameterStepMode.Index)\r\n                .withParameter('position', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n            pVertexParameterSetup.buffer('uv', VertexParameterStepMode.Vertex)\r\n                .withParameter('uv', 1, BufferItemFormat.Float32, BufferItemMultiplier.Vector2);\r\n\r\n            pVertexParameterSetup.buffer('normal', VertexParameterStepMode.Vertex)\r\n                .withParameter('normal', 2, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // Fragment entry.\r\n        pShaderSetup.fragmentEntryPoint('fragment_main')\r\n            .addRenderTarget('main', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n        // Object bind group.\r\n        pShaderSetup.group(0, 'object', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'transformationMatrix', ComputeStage.Vertex)\r\n                .asBuffer().withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n\r\n            pBindGroupSetup.binding(1, 'instancePositions', ComputeStage.Vertex, StorageBindingType.Read)\r\n                .asBuffer().withArray().withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // World bind group.\r\n        pShaderSetup.group(1, pWorldGroup.layout);\r\n\r\n        // User bind group\r\n        pShaderSetup.group(2, 'user', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'cubeTextureSampler', ComputeStage.Fragment)\r\n                .asSampler(SamplerType.Filter);\r\n\r\n            pBindGroupSetup.binding(1, 'cubeTexture', ComputeStage.Fragment | ComputeStage.Vertex)\r\n                .asTexture(TextureViewDimension.TwoDimensionArray, TextureFormat.Rgba8unorm);\r\n        });\r\n    });\r\n\r\n    // Create render module from shader.\r\n    const lWoodBoxRenderModule: ShaderRenderModule = lWoodBoxShader.createRenderModule('vertex_main', 'fragment_main');\r\n\r\n    // Transformation and position group. \r\n    const lWoodBoxTransformationGroup = lWoodBoxRenderModule.layout.getGroupLayout('object').create();\r\n\r\n    // Create transformation.\r\n    lWoodBoxTransformationGroup.data('transformationMatrix').createBuffer(new Transform().setScale(1, 1, 1).getMatrix(TransformMatrix.Transformation).dataArray);\r\n\r\n    // Create instance positions.\r\n    const lCubeInstanceTransformationData: Array<number> = new Array<number>();\r\n    for (let lWidthIndex: number = 0; lWidthIndex < lWidth; lWidthIndex++) {\r\n        for (let lHeightIndex: number = 0; lHeightIndex < lHeight; lHeightIndex++) {\r\n            for (let lDepthIndex: number = 0; lDepthIndex < lDepth; lDepthIndex++) {\r\n                lCubeInstanceTransformationData.push(lWidthIndex * 3, lHeightIndex * 3, lDepthIndex * 3, 1);\r\n            }\r\n        }\r\n    }\r\n    lWoodBoxTransformationGroup.data('instancePositions').createBuffer(lCubeInstanceTransformationData);\r\n\r\n    /*\r\n     * User defined group.\r\n     */\r\n    const lWoodBoxUserGroup = lWoodBoxRenderModule.layout.getGroupLayout('user').create();\r\n\r\n    // Setup cube texture.\r\n    const lImageTexture: GpuTexture = lWoodBoxUserGroup.data('cubeTexture').createTexture().texture;\r\n    lImageTexture.depth = 3;\r\n    lImageTexture.mipCount = 20;\r\n    (async () => {\r\n        const lSourceList: Array<string> = [\r\n            '/source/game_objects/cube/texture_one/cube-texture.png',\r\n            '/source/game_objects/cube/texture_two/cube-texture.png',\r\n            '/source/game_objects/cube/texture_three/cube-texture.png'\r\n        ];\r\n\r\n        let lHeight: number = 0;\r\n        let lWidth: number = 0;\r\n\r\n        // \"Random\" colors.\r\n        const lColorList: Array<string> = new Array<string>();\r\n        for (let lIndex: number = 0; lIndex < 20; lIndex++) {\r\n            lColorList.push('#' + Math.floor(Math.random() * 16777215).toString(16));\r\n        }\r\n\r\n        // Parallel load images.\r\n        const lImageLoadPromiseList: Array<Promise<Array<GpuTextureCopyOptions>>> = lSourceList.map(async (pSource, pIndex: number) => {\r\n            // Load image with html image element.\r\n            const lImage: HTMLImageElement = new Image();\r\n            lImage.src = pSource;\r\n            await lImage.decode();\r\n\r\n            // Init size.\r\n            if (lHeight === 0 || lWidth === 0) {\r\n                lWidth = lImage.naturalWidth;\r\n                lHeight = lImage.naturalHeight;\r\n            }\r\n\r\n            // Validate same image size for all layers.\r\n            if (lHeight !== lImage.naturalHeight || lWidth !== lImage.naturalWidth) {\r\n                throw new Error(`Texture image layers are not the same size. (${lImage.naturalWidth}, ${lImage.naturalHeight}) needs (${lWidth}, ${lHeight}).`);\r\n            }\r\n\r\n            const lWaiter: Array<Promise<void>> = new Array<Promise<void>>();\r\n            const lMipList: Array<GpuTextureCopyOptions> = new Array<GpuTextureCopyOptions>();\r\n\r\n            // Add level one.\r\n            lWaiter.push(createImageBitmap(lImage).then((pBitmap) => {\r\n                lMipList.push({\r\n                    data: pBitmap,\r\n                    mipLevel: 0,\r\n                    targetOrigin: { x: 0, y: 0, z: pIndex }\r\n                });\r\n            }));\r\n\r\n            // Generate all mips.\r\n            const lMaxMipCount = 1 + Math.floor(Math.log2(Math.max(lWidth, lHeight)));\r\n            for (let lMipLevel: number = 1; lMipLevel < lMaxMipCount; lMipLevel++) {\r\n                const lCanvas: OffscreenCanvas = new OffscreenCanvas(\r\n                    Math.max(1, Math.floor(lWidth / Math.pow(2, lMipLevel))),\r\n                    Math.max(1, Math.floor(lHeight / Math.pow(2, lMipLevel)))\r\n                );\r\n\r\n                // Fill canvas.\r\n                const lCanvasContext: OffscreenCanvasRenderingContext2D = lCanvas.getContext('2d')!;\r\n                lCanvasContext.globalAlpha = 1;\r\n                lCanvasContext.drawImage(lImage, 0, 0, lWidth, lHeight, 0, 0, lCanvas.width, lCanvas.height);\r\n                lCanvasContext.globalAlpha = 0.5;\r\n                lCanvasContext.fillStyle = lColorList[lMipLevel];\r\n                lCanvasContext.fillRect(0, 0, lCanvas.width, lCanvas.height);\r\n\r\n                lWaiter.push(createImageBitmap(lCanvas).then((pBitmap) => {\r\n                    lMipList.push({\r\n                        data: pBitmap,\r\n                        mipLevel: lMipLevel,\r\n                        targetOrigin: { x: 0, y: 0, z: pIndex }\r\n                    });\r\n                }));\r\n            }\r\n\r\n            // Wait for all images to resolve.\r\n            await Promise.all(lWaiter);\r\n\r\n            return lMipList;\r\n        }).flat();\r\n\r\n        // Resolve all bitmaps.\r\n        const lImageList: Array<GpuTextureCopyOptions> = (await Promise.all(lImageLoadPromiseList)).flat();\r\n\r\n        // Set new texture size.\r\n        lImageTexture.width = lWidth;\r\n        lImageTexture.height = lHeight;\r\n        lImageTexture.depth = lSourceList.length;\r\n\r\n        // Copy images into texture.\r\n        lImageTexture.copyFrom(...lImageList);\r\n\r\n        // Test for keeping information on resize.\r\n        lImageTexture.width = lImageTexture.width * 2;\r\n        lImageTexture.native;\r\n        lImageTexture.width = lImageTexture.width / 2;\r\n    })();\r\n\r\n    // Setup Sampler.\r\n    lWoodBoxUserGroup.data('cubeTextureSampler').createSampler();\r\n\r\n    // Generate render parameter from parameter layout.\r\n    const lMesh: VertexParameter = lWoodBoxRenderModule.vertexParameter.create(CubeVertexIndices);\r\n    lMesh.create('position', CubeVertexPositionData);\r\n    lMesh.create('uv', CubeVertexUvData);\r\n    lMesh.create('normal', CubeVertexNormalData);\r\n\r\n    // Create pipeline.\r\n    const lWoodBoxPipeline: VertexFragmentPipeline = lWoodBoxRenderModule.create(pRenderTargets);\r\n    lWoodBoxPipeline.primitiveCullMode = PrimitiveCullMode.Front;\r\n    lWoodBoxPipeline.setParameter('animationSeconds', 3);\r\n    (<any>window).animationSpeed = (pSeconds: number) => {\r\n        lWoodBoxPipeline.setParameter('animationSeconds', pSeconds);\r\n    };\r\n\r\n    return {\r\n        pipeline: lWoodBoxPipeline,\r\n        parameter: lMesh,\r\n        instanceCount: lWidth * lHeight * lDepth,\r\n        data: lWoodBoxPipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lWoodBoxTransformationGroup);\r\n            pSetup.addGroup(pWorldGroup);\r\n            pSetup.addGroup(lWoodBoxUserGroup);\r\n        })\r\n    };\r\n};\r\n\r\nconst gGenerateColorCubeStep = (pGpu: GpuDevice, pRenderTargets: RenderTargets, pWorldGroup: BindGroup): Array<RenderInstruction> => {\r\n    // Create shader.\r\n    const lColorBoxShader = pGpu.shader(colorCubeShader).setup((pShaderSetup) => {\r\n        // Vertex entry.\r\n        pShaderSetup.vertexEntryPoint('vertex_main', (pVertexParameterSetup) => {\r\n            pVertexParameterSetup.buffer('position', VertexParameterStepMode.Index)\r\n                .withParameter('position', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n            pVertexParameterSetup.buffer('normal', VertexParameterStepMode.Vertex)\r\n                .withParameter('normal', 1, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // Fragment entry.\r\n        pShaderSetup.fragmentEntryPoint('fragment_main')\r\n            .addRenderTarget('main', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n        // Object bind group.\r\n        pShaderSetup.group(0, 'object', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'transformationMatrix', ComputeStage.Vertex)\r\n                .asBuffer(true).withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n\r\n            pBindGroupSetup.binding(1, 'color', ComputeStage.Vertex)\r\n                .asBuffer(true).withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // World bind group.\r\n        pShaderSetup.group(1, pWorldGroup.layout);\r\n    });\r\n\r\n    // Create render module from shader.\r\n    const lWoodBoxRenderModule: ShaderRenderModule = lColorBoxShader.createRenderModule('vertex_main', 'fragment_main');\r\n\r\n    // Transformation and position group. \r\n    const lColorBoxTransformationGroup = lWoodBoxRenderModule.layout.getGroupLayout('object').create();\r\n\r\n    // Create transformation.\r\n    lColorBoxTransformationGroup.data('transformationMatrix').createBuffer(3);\r\n    lColorBoxTransformationGroup.data('transformationMatrix').asBufferView(Float32Array, 0).write(new Transform().setScale(1, 1, 1).setTranslation(2, -30, 5).getMatrix(TransformMatrix.Transformation).dataArray);\r\n    lColorBoxTransformationGroup.data('transformationMatrix').asBufferView(Float32Array, 1).write(new Transform().setScale(1, 1, 1).setTranslation(0, -30, 5).getMatrix(TransformMatrix.Transformation).dataArray);\r\n    lColorBoxTransformationGroup.data('transformationMatrix').asBufferView(Float32Array, 2).write(new Transform().setScale(1, 1, 1).setTranslation(-2, -30, 5).getMatrix(TransformMatrix.Transformation).dataArray);\r\n\r\n    // Setup cube texture.\r\n    lColorBoxTransformationGroup.data('color').createBuffer([\r\n        /* Color 1*/ 0.89, 0.74, 0.00, 1,\r\n        /* Color 2*/ 0.92, 0.48, 0.14, 1\r\n    ]);\r\n\r\n    // Generate render parameter from parameter layout.\r\n    const lMesh: VertexParameter = lWoodBoxRenderModule.vertexParameter.create(CubeVertexIndices);\r\n    lMesh.create('position', CubeVertexPositionData);\r\n    lMesh.create('normal', CubeVertexNormalData);\r\n\r\n    // Create pipeline.\r\n    const lColorBoxPipeline: VertexFragmentPipeline = lWoodBoxRenderModule.create(pRenderTargets);\r\n    lColorBoxPipeline.primitiveCullMode = PrimitiveCullMode.Front;\r\n\r\n    return [{\r\n        pipeline: lColorBoxPipeline,\r\n        parameter: lMesh,\r\n        instanceCount: 1,\r\n        data: lColorBoxPipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lColorBoxTransformationGroup)\r\n                .withOffset('color', 0)\r\n                .withOffset('transformationMatrix', 0);\r\n            pSetup.addGroup(pWorldGroup);\r\n        })\r\n    },\r\n    {\r\n        pipeline: lColorBoxPipeline,\r\n        parameter: lMesh,\r\n        instanceCount: 1,\r\n        data: lColorBoxPipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lColorBoxTransformationGroup)\r\n                .withOffset('color', 1)\r\n                .withOffset('transformationMatrix', 1);\r\n            pSetup.addGroup(pWorldGroup);\r\n        })\r\n    },\r\n    {\r\n        pipeline: lColorBoxPipeline,\r\n        parameter: lMesh,\r\n        instanceCount: 1,\r\n        data: lColorBoxPipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lColorBoxTransformationGroup)\r\n                .withOffset('color', 0)\r\n                .withOffset('transformationMatrix', 2);\r\n            pSetup.addGroup(pWorldGroup);\r\n        })\r\n    }];\r\n};\r\n\r\nconst gGenerateLightBoxStep = (pGpu: GpuDevice, pRenderTargets: RenderTargets, pWorldGroup: BindGroup): RenderInstruction => {\r\n    // Create shader.\r\n    const lLightBoxShader: Shader = pGpu.shader(lightBoxShader).setup((pShaderSetup) => {\r\n        // Vertex entry.\r\n        pShaderSetup.vertexEntryPoint('vertex_main', (pVertexParameterSetup) => {\r\n            pVertexParameterSetup.buffer('position', VertexParameterStepMode.Index)\r\n                .withParameter('position', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n            pVertexParameterSetup.buffer('uv', VertexParameterStepMode.Vertex)\r\n                .withParameter('uv', 1, BufferItemFormat.Float32, BufferItemMultiplier.Vector2);\r\n\r\n            pVertexParameterSetup.buffer('normal', VertexParameterStepMode.Vertex)\r\n                .withParameter('normal', 2, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // Fragment entry.\r\n        pShaderSetup.fragmentEntryPoint('fragment_main')\r\n            .addRenderTarget('main', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n        // Object bind group.\r\n        pShaderSetup.group(0, 'object', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'transformationMatrix', ComputeStage.Vertex)\r\n                .asBuffer().withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n        });\r\n\r\n        // World bind group.\r\n        pShaderSetup.group(1, pWorldGroup.layout);\r\n    });\r\n\r\n    // Create render module from shader.\r\n    const lLightBoxRenderModule = lLightBoxShader.createRenderModule('vertex_main', 'fragment_main');\r\n\r\n    // Transformation and position group. \r\n    const lLightBoxTransformationGroup = lLightBoxShader.layout.getGroupLayout('object').create();\r\n\r\n    // Create transformation.\r\n    lLightBoxTransformationGroup.data('transformationMatrix').createBuffer(new Transform().setScale(1, 1, 1).getMatrix(TransformMatrix.Transformation).dataArray);\r\n\r\n    const lLightBoxPipeline: VertexFragmentPipeline = lLightBoxRenderModule.create(pRenderTargets);\r\n    lLightBoxPipeline.primitiveCullMode = PrimitiveCullMode.Front;\r\n\r\n    // Generate render parameter from parameter layout.\r\n    const lMesh: VertexParameter = lLightBoxRenderModule.vertexParameter.create(CubeVertexIndices);\r\n    lMesh.create('position', CubeVertexPositionData);\r\n    lMesh.create('uv', CubeVertexUvData);\r\n    lMesh.create('normal', CubeVertexNormalData);\r\n\r\n    // Create buffer view for pointlights.\r\n    const lPointLightsBuffer: GpuBufferView<Float32Array> = pWorldGroup.data('pointLights').asBufferView(Float32Array);\r\n\r\n    return {\r\n        pipeline: lLightBoxPipeline,\r\n        parameter: lMesh,\r\n        instanceCount: lPointLightsBuffer.length / 12,\r\n        data: lLightBoxPipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lLightBoxTransformationGroup);\r\n            pSetup.addGroup(pWorldGroup);\r\n        })\r\n    };\r\n};\r\n\r\nconst gGenerateSkyboxStep = (pGpu: GpuDevice, pRenderTargets: RenderTargets, pWorldGroup: BindGroup): RenderInstruction => {\r\n    const lSkyBoxShader: Shader = pGpu.shader(skyboxShader).setup((pShaderSetup) => {\r\n        // Vertex entry.\r\n        pShaderSetup.vertexEntryPoint('vertex_main', (pVertexParameterSetup) => {\r\n            pVertexParameterSetup.buffer('position', VertexParameterStepMode.Index)\r\n                .withParameter('position', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // Fragment entry.\r\n        pShaderSetup.fragmentEntryPoint('fragment_main')\r\n            .addRenderTarget('main', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n        pShaderSetup.group(0, 'object', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'cubeTextureSampler', ComputeStage.Fragment)\r\n                .asSampler(SamplerType.Filter);\r\n\r\n            pBindGroupSetup.binding(1, 'cubeMap', ComputeStage.Fragment)\r\n                .asTexture(TextureViewDimension.Cube, TextureFormat.Rgba8unorm);\r\n        });\r\n\r\n        // World bind group.\r\n        pShaderSetup.group(1, pWorldGroup.layout);\r\n    });\r\n\r\n    // Create render module from shader.\r\n    const lSkyBoxRenderModule = lSkyBoxShader.createRenderModule('vertex_main', 'fragment_main');\r\n\r\n    // Transformation and position group. \r\n    const lSkyBoxTextureGroup = lSkyBoxShader.layout.getGroupLayout('object').create();\r\n\r\n    const lImageTexture: GpuTexture = lSkyBoxTextureGroup.data('cubeMap').createTexture().texture;\r\n    lImageTexture.depth = 6;\r\n    (async () => {\r\n        const lSourceList: Array<string> = [\r\n            '/source/game_objects/skybox/right.jpg',\r\n            '/source/game_objects/skybox/left.jpg',\r\n            '/source/game_objects/skybox/top.jpg',\r\n            '/source/game_objects/skybox/bottom.jpg',\r\n            '/source/game_objects/skybox/front.jpg',\r\n            '/source/game_objects/skybox/back.jpg'\r\n        ];\r\n\r\n        let lHeight: number = 0;\r\n        let lWidth: number = 0;\r\n\r\n        // Parallel load images.\r\n        const lImageLoadPromiseList: Array<Promise<ImageBitmap>> = lSourceList.map(async (pSource) => {\r\n            // Load image with html image element.\r\n            const lImage: HTMLImageElement = new Image();\r\n            lImage.src = pSource;\r\n            await lImage.decode();\r\n\r\n            // Init size.\r\n            if (lHeight === 0 || lWidth === 0) {\r\n                lWidth = lImage.naturalWidth;\r\n                lHeight = lImage.naturalHeight;\r\n            }\r\n\r\n            // Validate same image size for all layers.\r\n            if (lHeight !== lImage.naturalHeight || lWidth !== lImage.naturalWidth) {\r\n                throw new Error(`Texture image layers are not the same size. (${lImage.naturalWidth}, ${lImage.naturalHeight}) needs (${lWidth}, ${lHeight}).`);\r\n            }\r\n\r\n            return createImageBitmap(lImage);\r\n        });\r\n\r\n        // Resolve all bitmaps.\r\n        const lImageList: Array<ImageBitmap> = await Promise.all(lImageLoadPromiseList);\r\n\r\n        // Set new texture size.\r\n        lImageTexture.width = lWidth;\r\n        lImageTexture.height = lHeight;\r\n        lImageTexture.depth = lSourceList.length;\r\n\r\n        // Copy images into texture.\r\n        lImageTexture.copyFrom(...lImageList);\r\n    })();\r\n\r\n    // Setup Sampler.\r\n    lSkyBoxTextureGroup.data('cubeTextureSampler').createSampler();\r\n\r\n    // Generate render parameter from parameter layout.\r\n    const lMesh: VertexParameter = lSkyBoxRenderModule.vertexParameter.create(CubeVertexIndices);\r\n    lMesh.create('position', CubeVertexPositionData);\r\n\r\n    const lSkyBoxPipeline: VertexFragmentPipeline = lSkyBoxRenderModule.create(pRenderTargets);\r\n    lSkyBoxPipeline.primitiveCullMode = PrimitiveCullMode.Back;\r\n    lSkyBoxPipeline.depthConfig().enableWrite(false).compareWith(CompareFunction.Allways);\r\n\r\n    return {\r\n        pipeline: lSkyBoxPipeline,\r\n        parameter: lMesh,\r\n        instanceCount: 1,\r\n        data: lSkyBoxPipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lSkyBoxTextureGroup);\r\n            pSetup.addGroup(pWorldGroup);\r\n        })\r\n    };\r\n};\r\n\r\nconst gGenerateVideoCanvasStep = (pGpu: GpuDevice, pRenderTargets: RenderTargets, pWorldGroup: BindGroup): RenderInstruction => {\r\n    // Create shader.\r\n    const lWoodBoxShader = pGpu.shader(videoCanvasShader).setup((pShaderSetup) => {\r\n        // Vertex entry.\r\n        pShaderSetup.vertexEntryPoint('vertex_main', (pVertexParameterSetup) => {\r\n            pVertexParameterSetup.buffer('position', VertexParameterStepMode.Index)\r\n                .withParameter('position', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n            pVertexParameterSetup.buffer('uv', VertexParameterStepMode.Vertex)\r\n                .withParameter('uv', 1, BufferItemFormat.Float32, BufferItemMultiplier.Vector2);\r\n\r\n            pVertexParameterSetup.buffer('normal', VertexParameterStepMode.Vertex)\r\n                .withParameter('normal', 2, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // Fragment entry.\r\n        pShaderSetup.fragmentEntryPoint('fragment_main')\r\n            .addRenderTarget('main', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n        // Object bind group.\r\n        pShaderSetup.group(0, 'object', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'transformationMatrix', ComputeStage.Vertex)\r\n                .asBuffer().withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n        });\r\n\r\n        // World bind group.\r\n        pShaderSetup.group(1, pWorldGroup.layout);\r\n\r\n        // User bind group\r\n        pShaderSetup.group(2, 'user', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'videoTextureSampler', ComputeStage.Fragment)\r\n                .asSampler(SamplerType.Filter);\r\n\r\n            pBindGroupSetup.binding(1, 'videoTexture', ComputeStage.Fragment)\r\n                .asTexture(TextureViewDimension.TwoDimension, TextureFormat.Rgba8unorm);\r\n        });\r\n    });\r\n\r\n    // Create render module from shader.\r\n    const lWoodBoxRenderModule: ShaderRenderModule = lWoodBoxShader.createRenderModule('vertex_main', 'fragment_main');\r\n\r\n    // Transformation and position group. \r\n    const lTransformationGroup = lWoodBoxRenderModule.layout.getGroupLayout('object').create();\r\n\r\n    // Create transformation.\r\n    lTransformationGroup.data('transformationMatrix').createBuffer(new Transform().addTranslation(-0.5, -0.5, 100).setScale(15, 8.4, 0).getMatrix(TransformMatrix.Transformation).dataArray);\r\n\r\n    /*\r\n     * User defined group.\r\n     */\r\n    const lUserGroup = lWoodBoxRenderModule.layout.getGroupLayout('user').create();\r\n\r\n    // Setup cube texture.\r\n    const lVideoTexture: GpuTexture = lUserGroup.data('videoTexture').createTexture().texture;\r\n\r\n    // Create video.\r\n    const lVideo = document.createElement('video');\r\n    lVideo.preload = 'auto';\r\n    lVideo.loop = true;\r\n    lVideo.muted = true; // Allways muted.\r\n    lVideo.src = '/source/game_objects/video_canvas/earth.mp4';\r\n    lVideo.addEventListener('resize', () => {\r\n        lVideoTexture.height = Math.max(lVideo.videoHeight, 1);\r\n        lVideoTexture.width = Math.max(lVideo.videoWidth, 1);\r\n    });\r\n    lVideo.play();\r\n\r\n    let lTimeStamp: number = performance.now();\r\n    pGpu.addFrameChangeListener(() => {\r\n        // Has at least one frame buffered.\r\n        if (lVideo.readyState > 1) {\r\n            const lFrameTimeStamp: number = performance.now();\r\n            createImageBitmap(lVideo).then((pImageBitmap) => {\r\n                if (lFrameTimeStamp < lTimeStamp) {\r\n                    return;\r\n                }\r\n\r\n                lTimeStamp = lFrameTimeStamp;\r\n                lVideoTexture.copyFrom(pImageBitmap);\r\n            });\r\n        }\r\n    });\r\n\r\n    // Setup Sampler.\r\n    lUserGroup.data('videoTextureSampler').createSampler();\r\n\r\n    // Generate render parameter from parameter layout.\r\n    const lMesh: VertexParameter = lWoodBoxRenderModule.vertexParameter.create(CanvasVertexIndices);\r\n    lMesh.create('position', CanvasVertexPositionData);\r\n    lMesh.create('uv', CanvasVertexUvData);\r\n    lMesh.create('normal', CanvasVertexNormalData);\r\n\r\n    // Create pipeline.\r\n    const lPipeline: VertexFragmentPipeline = lWoodBoxRenderModule.create(pRenderTargets);\r\n    lPipeline.primitiveCullMode = PrimitiveCullMode.None;\r\n    lPipeline.depthConfig().enableWrite(false);\r\n    lPipeline.targetConfig('color')\r\n        .alphaBlend(TextureBlendOperation.Add, TextureBlendFactor.One, TextureBlendFactor.OneMinusSrcAlpha)\r\n        .colorBlend(TextureBlendOperation.Add, TextureBlendFactor.SrcAlpha, TextureBlendFactor.OneMinusSrcAlpha);\r\n\r\n    return {\r\n        pipeline: lPipeline,\r\n        parameter: lMesh,\r\n        instanceCount: 1,\r\n        data: lPipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lTransformationGroup);\r\n            pSetup.addGroup(pWorldGroup);\r\n            pSetup.addGroup(lUserGroup);\r\n        })\r\n    };\r\n};\r\n\r\nconst gGenerateParticleStep = (pGpu: GpuDevice, pRenderTargets: RenderTargets, pWorldGroup: BindGroup): [RenderInstruction, ComputeInstruction] => {\r\n    const lMaxParticleCount: number = 18000;\r\n\r\n    const lParticleRenderShader: Shader = pGpu.shader(particleShader).setup((pShaderSetup) => {\r\n        // Set parameter.\r\n        pShaderSetup.parameter('animationSeconds', ComputeStage.Vertex);\r\n\r\n        // Vertex entry.\r\n        pShaderSetup.vertexEntryPoint('vertex_main', (pVertexParameterSetup) => {\r\n            pVertexParameterSetup.buffer('position-uv', VertexParameterStepMode.Index)\r\n                .withParameter('position', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4)\r\n                .withParameter('uv', 1, BufferItemFormat.Float32, BufferItemMultiplier.Vector2);\r\n        });\r\n\r\n        // Fragment entry.\r\n        pShaderSetup.fragmentEntryPoint('fragment_main')\r\n            .addRenderTarget('main', 0, BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n\r\n        // Compute entry.\r\n        pShaderSetup.computeEntryPoint('compute_main').size(64);\r\n\r\n        // Object bind group.\r\n        pShaderSetup.group(0, 'object', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'transformationMatrix', ComputeStage.Vertex)\r\n                .asBuffer().withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n            pBindGroupSetup.binding(1, 'particles', ComputeStage.Vertex, StorageBindingType.Read)\r\n                .asBuffer().withArray().withStruct((pStructSetup) => {\r\n                    pStructSetup.property('position').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector3);\r\n                    pStructSetup.property('rotation').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector3);\r\n                    pStructSetup.property('velocity').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector3);\r\n                    pStructSetup.property('lifetime').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Single);\r\n                });\r\n        });\r\n\r\n        // World bind group.\r\n        pShaderSetup.group(1, pWorldGroup.layout);\r\n\r\n        pShaderSetup.group(2, 'user', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'textureSampler', ComputeStage.Fragment)\r\n                .asSampler(SamplerType.Filter);\r\n\r\n            pBindGroupSetup.binding(1, 'texture', ComputeStage.Fragment)\r\n                .asTexture(TextureViewDimension.TwoDimension, TextureFormat.Rgba8unorm);\r\n        });\r\n    });\r\n\r\n    // Create render module from shader.\r\n    const lParticleRenderModule = lParticleRenderShader.createRenderModule('vertex_main', 'fragment_main');\r\n\r\n    // Transformation and position group. \r\n    const lParticleInformationGroup = lParticleRenderModule.layout.getGroupLayout('object').create();\r\n    lParticleInformationGroup.data('particles').createBuffer(lMaxParticleCount);\r\n\r\n    // Create transformation.\r\n    lParticleInformationGroup.data('transformationMatrix').createBuffer(new Transform().setScale(0.02, 0.02, 0.02).getMatrix(TransformMatrix.Transformation).dataArray);\r\n\r\n    // Transformation and position group. \r\n    const lParticleTextureGroup = lParticleRenderShader.layout.getGroupLayout('user').create();\r\n\r\n    const lImageTexture: GpuTexture = lParticleTextureGroup.data('texture').createTexture().texture;\r\n    lImageTexture.depth = 6;\r\n    (async () => {\r\n        const lSourceList: Array<string> = [\r\n            '/source/game_objects/leaf_particle/leaf.png'\r\n        ];\r\n\r\n        let lHeight: number = 0;\r\n        let lWidth: number = 0;\r\n\r\n        // Parallel load images.\r\n        const lImageLoadPromiseList: Array<Promise<ImageBitmap>> = lSourceList.map(async (pSource) => {\r\n            // Load image with html image element.\r\n            const lImage: HTMLImageElement = new Image();\r\n            lImage.src = pSource;\r\n            await lImage.decode();\r\n\r\n            // Init size.\r\n            if (lHeight === 0 || lWidth === 0) {\r\n                lWidth = lImage.naturalWidth;\r\n                lHeight = lImage.naturalHeight;\r\n            }\r\n\r\n            // Validate same image size for all layers.\r\n            if (lHeight !== lImage.naturalHeight || lWidth !== lImage.naturalWidth) {\r\n                throw new Error(`Texture image layers are not the same size. (${lImage.naturalWidth}, ${lImage.naturalHeight}) needs (${lWidth}, ${lHeight}).`);\r\n            }\r\n\r\n            return createImageBitmap(lImage);\r\n        });\r\n\r\n        // Resolve all bitmaps.\r\n        const lImageList: Array<ImageBitmap> = await Promise.all(lImageLoadPromiseList);\r\n\r\n        // Set new texture size.\r\n        lImageTexture.width = lWidth;\r\n        lImageTexture.height = lHeight;\r\n        lImageTexture.depth = lSourceList.length;\r\n\r\n        // Copy images into texture.\r\n        lImageTexture.copyFrom(...lImageList);\r\n    })();\r\n\r\n    // Setup Sampler.\r\n    lParticleTextureGroup.data('textureSampler').createSampler();\r\n\r\n    // Generate render parameter from parameter layout.\r\n    const lMesh: VertexParameter = lParticleRenderModule.vertexParameter.create(ParticleVertexIndices);\r\n    lMesh.create('position-uv', ParticleVertexPositionUvData);\r\n\r\n    const lParticlePipeline: VertexFragmentPipeline = lParticleRenderModule.create(pRenderTargets);\r\n    lParticlePipeline.primitiveCullMode = PrimitiveCullMode.None;\r\n    lParticlePipeline.depthConfig().enableWrite(true).compareWith(CompareFunction.Less);\r\n    lParticlePipeline.targetConfig('color')\r\n        .alphaBlend(TextureBlendOperation.Add, TextureBlendFactor.One, TextureBlendFactor.OneMinusSrcAlpha)\r\n        .colorBlend(TextureBlendOperation.Add, TextureBlendFactor.SrcAlpha, TextureBlendFactor.OneMinusSrcAlpha);\r\n\r\n    // vertexCount: GPUSize32, instanceCount?: GPUSize32, firstVertex?: GPUSize32, firstInstance?: GPUSize32    \r\n    const lIndirectionBuffer: GpuBuffer = new GpuBuffer(pGpu, 4 * 4).initialData(new Uint32Array([ParticleVertexIndices.length, 0, 0, 0]));\r\n\r\n    const lRenderInstruction: RenderInstruction = {\r\n        pipeline: lParticlePipeline,\r\n        parameter: lMesh,\r\n        instanceCount: 0,\r\n        data: lParticlePipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lParticleTextureGroup);\r\n            pSetup.addGroup(pWorldGroup);\r\n            pSetup.addGroup(lParticleInformationGroup);\r\n        }),\r\n        indirectBuffer: lIndirectionBuffer\r\n    };\r\n\r\n    /*\r\n     * Compute shader.\r\n     */\r\n    const lParticleComputeShader: Shader = pGpu.shader(particleComputeShader).setup((pShaderSetup) => {\r\n        // Set parameter.\r\n        pShaderSetup.parameter('animationSeconds', ComputeStage.Vertex);\r\n\r\n        // Compute entry.\r\n        pShaderSetup.computeEntryPoint('compute_main').size(64);\r\n\r\n        // Object bind group.\r\n        pShaderSetup.group(0, 'object', (pBindGroupSetup) => {\r\n            pBindGroupSetup.binding(0, 'particles', ComputeStage.Compute, StorageBindingType.ReadWrite)\r\n                .asBuffer().withArray().withStruct((pStructSetup) => {\r\n                    pStructSetup.property('position').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector3);\r\n                    pStructSetup.property('rotation').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector3);\r\n                    pStructSetup.property('velocity').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector3);\r\n                    pStructSetup.property('lifetime').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Single);\r\n                });\r\n\r\n            pBindGroupSetup.binding(1, 'indirect', ComputeStage.Compute, StorageBindingType.ReadWrite)\r\n                .asBuffer().withPrimitive(BufferItemFormat.Uint32, BufferItemMultiplier.Vector4);\r\n        });\r\n\r\n        // World bind group.\r\n        pShaderSetup.group(1, pWorldGroup.layout);\r\n    });\r\n\r\n    // Create render module from shader.\r\n    const lParticleComputeModule = lParticleComputeShader.createComputeModule('compute_main');\r\n\r\n    // Create compute pipeline.\r\n    const lComputePipeline: ComputePipeline = new ComputePipeline(pGpu, lParticleComputeModule);\r\n    lComputePipeline.setParameter('animationSeconds', 30);\r\n\r\n    // Transformation and position group. \r\n    const lParticleComputeInformationGroup = lParticleComputeModule.layout.getGroupLayout('object').create();\r\n    lParticleComputeInformationGroup.data('particles').set(lParticleInformationGroup.data('particles').getRaw());\r\n    lParticleComputeInformationGroup.data('indirect').set(lIndirectionBuffer);\r\n\r\n    // Create compute instruction\r\n    const lComputeInstruction: ComputeInstruction = {\r\n        pipeline: lComputePipeline,\r\n        data: lComputePipeline.layout.withData((pSetup) => {\r\n            pSetup.addGroup(lParticleComputeInformationGroup);\r\n            pSetup.addGroup(pWorldGroup);\r\n        }),\r\n        dimensions: {\r\n            x: Math.ceil(lMaxParticleCount / (lParticleComputeModule.workGroupSizeX * lParticleComputeModule.workGroupSizeY * lParticleComputeModule.workGroupSizeZ)),\r\n            y: 1,\r\n            z: 1\r\n        }\r\n    };\r\n\r\n    return [lRenderInstruction, lComputeInstruction];\r\n};\r\n\r\nconst gGenerateWorldBindGroup = (pGpu: GpuDevice): BindGroup => {\r\n    const lWorldGroupLayout = new BindGroupLayout(pGpu, 'world').setup((pBindGroupSetup) => {\r\n        pBindGroupSetup.binding(0, 'camera', ComputeStage.Vertex | ComputeStage.Compute).asBuffer().withStruct((pStructSetup) => {\r\n            pStructSetup.property('viewProjection').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n            pStructSetup.property('view').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n            pStructSetup.property('projection').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n\r\n            pStructSetup.property('translation').asStruct((pTranslationStruct) => {\r\n                pTranslationStruct.property('rotation').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n                pTranslationStruct.property('translation').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n            });\r\n\r\n            pStructSetup.property('invertedTranslation').asStruct((pTranslationStruct) => {\r\n                pTranslationStruct.property('rotation').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n                pTranslationStruct.property('translation').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Matrix44);\r\n            });\r\n\r\n            pStructSetup.property('position').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector3);\r\n        });\r\n\r\n        pBindGroupSetup.binding(1, 'timestamp', ComputeStage.Vertex | ComputeStage.Fragment | ComputeStage.Compute).asBuffer().withStruct((pTimeStruct) => {\r\n            pTimeStruct.property('timestamp').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Single);\r\n            pTimeStruct.property('delta').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Single);\r\n        });\r\n\r\n        pBindGroupSetup.binding(2, 'ambientLight', ComputeStage.Fragment)\r\n            .asBuffer().withStruct((pStruct) => {\r\n                pStruct.property('color').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n            });\r\n\r\n        pBindGroupSetup.binding(3, 'pointLights', ComputeStage.Fragment | ComputeStage.Vertex, StorageBindingType.Read)\r\n            .asBuffer().withArray().withStruct((pStruct) => {\r\n                pStruct.property('position').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n                pStruct.property('color').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Vector4);\r\n                pStruct.property('range').asPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Single);\r\n            });\r\n\r\n        pBindGroupSetup.binding(4, 'debugValue', ComputeStage.Fragment | ComputeStage.Compute, StorageBindingType.ReadWrite)\r\n            .asBuffer().withPrimitive(BufferItemFormat.Float32, BufferItemMultiplier.Single);\r\n\r\n    });\r\n\r\n    /*\r\n     * Camera and world group. \r\n     */\r\n    const lWorldGroup: BindGroup = lWorldGroupLayout.create();\r\n    lWorldGroup.data('camera').createBuffer();\r\n\r\n    // Create ambient light.\r\n    const lAmbientLight: AmbientLight = new AmbientLight();\r\n    lAmbientLight.setColor(0.3, 0.3, 0.3);\r\n    lWorldGroup.data('ambientLight').createBuffer(lAmbientLight.data);\r\n\r\n    // Create point lights.\r\n    lWorldGroup.data('pointLights').createBuffer([\r\n        /* Position */1, 1, 1, 1, /* Color */1, 0, 0, 1,/* Range */ 200,\r\n        /* Position */10, 10, 10, 1, /* Color */0, 0, 1, 1,/* Range */ 200,\r\n        /* Position */-10, 10, 10, 1, /* Color */0, 1, 0, 1,/* Range */ 200\r\n    ]);\r\n\r\n    // Create timestamp.\r\n    lWorldGroup.data('timestamp').createBuffer();\r\n\r\n    // Create debug value.\r\n    lWorldGroup.data('debugValue').createBuffer();\r\n    const lDebugBuffer: GpuBufferView<Float32Array> = lWorldGroup.data('debugValue').asBufferView(Float32Array);\r\n    (<any>window).debugBuffer = () => {\r\n        lDebugBuffer.read().then((pResulto) => {\r\n            // eslint-disable-next-line no-console\r\n            console.log(pResulto);\r\n        });\r\n    };\r\n\r\n    return lWorldGroup;\r\n};\r\n\r\n(async () => {\r\n    const lGpu: GpuDevice = await GpuDevice.request('high-performance', {\r\n        features: [\r\n            { name: GpuFeature.TimestampQuery, required: true }\r\n        ]\r\n    });\r\n\r\n    // Create canvas.\r\n    const lCanvasTexture: CanvasTexture = lGpu.canvas(document.getElementById('canvas') as HTMLCanvasElement);\r\n\r\n    // Create and configure render targets.\r\n    const lRenderTargets: RenderTargets = lGpu.renderTargets(true).setup((pSetup) => {\r\n        // Add \"color\" target and init new texture.\r\n        pSetup.addColor('color', 0, true, { r: 0, g: 1, b: 0, a: 0 })\r\n            .new(TextureFormat.Bgra8unorm, lCanvasTexture);\r\n\r\n        // Add depth texture and init new texture.    \r\n        pSetup.addDepthStencil(true, 1)\r\n            .new(TextureFormat.Depth24plus);\r\n    });\r\n\r\n    // Resize canvas.\r\n    (() => {\r\n        const lCanvasWrapper: HTMLDivElement = document.querySelector('.canvas-wrapper') as HTMLDivElement;\r\n        new ResizeObserver(() => {\r\n            const lNewCanvasHeight: number = Math.max(0, lCanvasWrapper.clientHeight - 20);\r\n            const lNewCanvasWidth: number = Math.max(lCanvasWrapper.clientWidth - 20, 0);\r\n\r\n            // Resize displayed render targets.\r\n            lRenderTargets.resize(lNewCanvasHeight, lNewCanvasWidth);\r\n        }).observe(lCanvasWrapper);\r\n    })();\r\n\r\n    // Create camera perspective.\r\n    const lPerspectiveProjection: PerspectiveProjection = new PerspectiveProjection();\r\n    lPerspectiveProjection.aspectRatio = lRenderTargets.width / lRenderTargets.height;\r\n    lPerspectiveProjection.angleOfView = 72;\r\n    lPerspectiveProjection.near = 0.1;\r\n    lPerspectiveProjection.far = Number.MAX_SAFE_INTEGER;\r\n    lRenderTargets.addInvalidationListener(() => {\r\n        lPerspectiveProjection.aspectRatio = lRenderTargets.width / lRenderTargets.height;\r\n    }, RenderTargetsInvalidationType.Resize);\r\n\r\n    // Create camera.\r\n    const lCamera: ViewProjection = new ViewProjection(lPerspectiveProjection);\r\n    lCamera.transformation.setTranslation(0, 0, -4);\r\n\r\n    const lWorldGroup: BindGroup = gGenerateWorldBindGroup(lGpu);\r\n    const lTimestampBuffer: GpuBufferView<Float32Array> = lWorldGroup.data('timestamp').asBufferView(Float32Array);\r\n\r\n    const [lParticelRenderInstruction, lParticelComputeInstruction] = gGenerateParticleStep(lGpu, lRenderTargets, lWorldGroup);\r\n\r\n    // Create instruction.\r\n    const lRenderSteps: Array<RenderInstruction> = [\r\n        gGenerateSkyboxStep(lGpu, lRenderTargets, lWorldGroup),\r\n        gGenerateCubeStep(lGpu, lRenderTargets, lWorldGroup),\r\n        gGenerateLightBoxStep(lGpu, lRenderTargets, lWorldGroup),\r\n        gGenerateVideoCanvasStep(lGpu, lRenderTargets, lWorldGroup),\r\n        ...gGenerateColorCubeStep(lGpu, lRenderTargets, lWorldGroup),\r\n        lParticelRenderInstruction\r\n    ];\r\n    const lRenderPass: RenderPass = lGpu.renderPass(lRenderTargets, (pContext) => {\r\n        for (const lStep of lRenderSteps) {\r\n            if (lStep.indirectBuffer) {\r\n                pContext.drawIndirect(\r\n                    lStep.pipeline,\r\n                    lStep.parameter,\r\n                    lStep.data,\r\n                    lStep.indirectBuffer\r\n                );\r\n            } else {\r\n                pContext.drawDirect(\r\n                    lStep.pipeline,\r\n                    lStep.parameter,\r\n                    lStep.data,\r\n                    lStep.instanceCount\r\n                );\r\n            }\r\n        }\r\n    });\r\n\r\n    (<any>window).renderpassRuntime = () => {\r\n        lRenderPass.probeTimestamp().then(([pStart, pEnd]) => {\r\n            // eslint-disable-next-line no-console\r\n            console.log('Runtime:', Number(pEnd - pStart) / 1000000, 'ms');\r\n        });\r\n    };\r\n\r\n    // Create instruction.\r\n    const lComputeSteps: Array<ComputeInstruction> = [\r\n        lParticelComputeInstruction\r\n    ];\r\n    const lComputePass: ComputePass = lGpu.computePass((pContext) => {\r\n        for (const lStep of lComputeSteps) {\r\n            pContext.computeDirect(\r\n                lStep.pipeline,\r\n                lStep.data,\r\n                lStep.dimensions.x,\r\n                lStep.dimensions.y,\r\n                lStep.dimensions.z\r\n            );\r\n        }\r\n    });\r\n\r\n    (<any>window).computepassRuntime = () => {\r\n        lComputePass.probeTimestamp().then(([pStart, pEnd]) => {\r\n            // eslint-disable-next-line no-console\r\n            console.log('Runtime:', Number(pEnd - pStart) / 1000000, 'ms');\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Controls\r\n     */\r\n    InitCameraControls(lCanvasTexture.canvas, lCamera, lWorldGroup.data('camera').asBufferView(Float32Array));\r\n\r\n    /*\r\n     * Execution \r\n     */\r\n    const lRenderExecutor: GpuExecution = lGpu.executor((pExecutor) => {\r\n        lComputePass.execute(pExecutor);\r\n        lRenderPass.execute(pExecutor);\r\n    });\r\n\r\n    const lFpsLabel = document.getElementById('fpsCounter')!;\r\n\r\n    // Actual execute.\r\n    let lLastTime: number = 0;\r\n    let lCurrentFps: number = 0;\r\n    const lRender = (pTime: number) => {\r\n        // Start new frame.\r\n        lGpu.startNewFrame();\r\n\r\n        // Generate fps and smooth fps numbers.\r\n        const lFps: number = 1000 / (pTime - lLastTime);\r\n        lCurrentFps = (1 - 0.05) * lCurrentFps + 0.05 * lFps;\r\n\r\n        // Update time stamp data.\r\n        lTimestampBuffer.write([pTime / 1000, (pTime - lLastTime) / 1000]);\r\n\r\n        lLastTime = pTime;\r\n\r\n        // Generate encoder and add render commands.\r\n        lRenderExecutor.execute();\r\n\r\n        // Update fps display.\r\n        UpdateFpsDisplay(lFps, lRenderTargets.width);\r\n\r\n        // Update FPS counter.\r\n        lFpsLabel.textContent = lCurrentFps.toFixed(0);\r\n\r\n        // Refresh canvas\r\n        requestAnimationFrame(lRender);\r\n    };\r\n    requestAnimationFrame(lRender);\r\n})();\r\n\r\ntype RenderInstruction = {\r\n    pipeline: VertexFragmentPipeline;\r\n    parameter: VertexParameter;\r\n    instanceCount: number;\r\n    data: PipelineData;\r\n    indirectBuffer?: GpuBuffer;\r\n};\r\n\r\ntype ComputeInstruction = {\r\n    pipeline: ComputePipeline;\r\n    data: PipelineData;\r\n    dimensions: {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n    };\r\n};"],"names":["core_1","require","vector_1","AmbientLight","data","mColor","constructor","Vector","setColor","pRed","pGreen","pBlue","Exception","exports","Euler","x","mX","pValue","y","mY","z","mZ","Matrix","fromArray","pArray","pHeight","pWidth","lData","Array","lRowIndex","lRowData","lColumnIndex","push","identity","pSize","fill","mData","dataArray","width","height","length","pData","add","pAddData","adjoint","lMatrixData","lMatrixRow","lColumIndex","lDeterminant","omit","determinant","Math","pow","lCofactorMatrix","transpose","lIterationIndex","lSignedNumber","lDeterminantMatrix","inverse","lAdjoint","mult","pMultData","lProduct","lComponentIndex","pOmitRow","pOmitColumn","sub","vectorMult","lVectorComponent","lMutiplicatedMatrix","lVectorData","euler_1","matrix_1","Quaternion","fromRotation","pPitch","pYaw","pRoll","lPitchRadian","PI","lYawRadian","lRollRadian","lCosPitch","cos","lSinPitch","sin","lCosYaw","lSinYaw","lCosRoll","lSinRoll","lQuaternion","w","vectorForward","lSquareX","lSquareY","lProductXz","lProductYw","mW","lProductYz","lProductXw","lX","lY","lZ","vectorRight","lSquareZ","lProductXy","lProductZw","vectorUp","pW","pX","pY","pZ","addEulerRotation","asEuler","lEuler","lSinPitchCosYaw","lCosPitchCosYaw","atan2","lPitchDegree","sqrt","lYawDegree","lSinRollCosYaw","lCosRollCosYaw","lRollDegree","asMatrix","lMatrix","pQuaternion","lW","normalize","lLength","hypot","lIndex","lItem","multCross","pVector","multDot","pSubData","quaternion_1","Transform","pivotX","mPivot","pivotY","pivotZ","rotationPitch","mRotation","rotationRoll","rotationYaw","scaleDepth","mScale","scaleHeight","scaleWidth","translationX","mTranslation","translationY","translationZ","addRotation","addScale","pDepth","addTranslation","getMatrix","pType","TransformMatrix","Scale","Translation","Rotation","PivotRotation","lRotationMatrix","lPivotRotation","Transformation","lScale","lTranslation","lRotation","setRotation","lPitch","lYaw","lRoll","setScale","setTranslation","translateInDirection","pForward","pRight","pUp","lTranslationVector","lDirectionVector","PerspectiveProjection","angleOfView","mAngleOfView","mCacheProjectionMatrix","aspectRatio","mAspectRatio","far","mFar","near","mNear","projectionMatrix","createMatrix","lFar","lNear","lTop","tan","lBottom","lRight","lLeft","transform_1","ViewProjection","projection","mProjection","transformation","mTransformation","pProjection","CameraMatrix","Projection","View","lView","lProjection","CanvasVertexPositionData","CanvasVertexUvData","CanvasVertexNormalData","CanvasVertexIndices","CubeVertexPositionData","CubeVertexUvData","CubeVertexNormalData","CubeVertexIndices","ParticleVertexPositionUvData","ParticleVertexIndices","web_game_input_1","view_projection_1","InitCameraControls","pCanvas","pCamera","pCameraBuffer","lDefaultConfiguaration","DeviceConfiguration","addAction","KeyboardButton","KeyW","KeyS","KeyA","KeyD","ShiftLeft","ControlLeft","KeyQ","KeyE","MouseButton","Xaxis","Yaxis","triggerTolerance","lInputConfiguration","InputConfiguration","lInputDevices","InputDevices","registerConnector","MouseKeyboardConnector","lCurrentActionValue","Dictionary","lKeyboard","devices","addEventListener","pEvent","set","action","state","window","setInterval","lSpeed","get","write","requestPointerLock","UpdateFpsDisplay","lMaxFps","pFps","lCanvas","document","getElementById","lCanvasContext","getContext","willReadFrequently","lLastFpsData","getImageData","lScaling","clearRect","lScalingSize","floor","putImageData","lRectHeight","fillStyle","fillRect","gpu_object_1","BaseMemoryLayout","GpuObject","pDevice","gpu_limit_enum_1","storage_binding_type_enum_1","GpuBufferView","buffer","mBuffer","dynamicOffsetIndex","mDynamicOffset","mLayout","fixedSize","format","mTypedArrayConstructor","size","BYTES_PER_ELEMENT","pBuffer","pLayout","pDynamicOffsetIndex","pStorageType","StorageBindingType","None","variableSize","lOffsetAlignment","device","capabilities","getLimit","GpuLimit","MinUniformBufferOffsetAlignment","MinStorageBufferOffsetAlignment","lMinBufferSize","ceil","read","pLayoutPath","_this","_asyncToGenerator","lLocation","locationOf","offset","_this2","lDataBuffer","buffer_usage_enum_1","gpu_resource_object_1","gpu_buffer_view_1","GpuBuffer","GpuResourceObject","native","mByteSize","pByteCount","invalidate","GpuResourceObjectInvalidationType","ResourceRebuild","writeBufferLimitation","mWriteBuffer","limitation","pLimit","extendUsage","BufferUsage","CopyDestination","CopySource","Number","MAX_SAFE_INTEGER","ready","Set","mReadBuffer","mInitialData","initialData","pInitialData","pOffset","lOffset","lSize","gpu","createBuffer","label","usage","GPUBufferUsage","MAP_READ","COPY_DST","mappedAtCreation","lCommandDecoder","createCommandEncoder","copyBufferToBuffer","queue","submit","finish","mapAsync","GPUMapMode","READ","lBufferReadResult","getMappedRange","slice","unmap","view","lNative","lStagingBuffer","MAP_WRITE","COPY_SRC","pop","lDataArrayBuffer","ArrayBuffer","isView","lDataByteLength","byteLength","writeBuffer","lMappedBuffer","Int8Array","WRITE","then","has","catch","delete","destroy","destroyNative","pNativeObject","lWriteBuffer","clear","generateNative","pLastNative","lBuffer","undefined","min","buffer_alignment_type_enum_1","base_buffer_memory_layout_1","ArrayBufferMemoryLayout","BaseBufferMemoryLayout","alignment","mAlignment","arraySize","mArraySize","innerType","mInnerType","pParameter","alignmentType","BufferAlignmentType","Packed","Storage","Uniform","pPathName","lPathName","lItemIndexString","shift","isNaN","lArrayItemSize","lArrayItemOffset","parseInt","lInnerLocation","base_memory_layout_1","mAlignmentType","pAlignmentType","buffer_item_format_enum_1","buffer_item_multiplier_enum_1","PrimitiveBufferMemoryLayout","itemCountOfMultiplier","pMultiplier","BufferItemMultiplier","Single","Vector2","Vector3","Vector4","Matrix22","Matrix23","Matrix24","Matrix32","Matrix33","Matrix34","Matrix42","Matrix43","Matrix44","itemFormatByteCount","pItemFormat","BufferItemFormat","Float16","Float32","Uint32","Sint32","Uint8","Sint8","Uint16","Sint16","Unorm16","Snorm16","Unorm8","Snorm8","mSize","formatByteCount","mFormatByteCount","itemFormat","mItemFormat","itemMultiplier","mItemMultiplier","primitiveFormat","primitiveMultiplier","overrideSize","overrideAlignment","gpu_object_child_setup_1","array_buffer_memory_layout_1","primitive_buffer_memory_layout_1","struct_buffer_memory_layout_1","StructBufferMemoryLayoutPropertySetup","GpuObjectChildSetup","pSetupReference","pDataCallback","asArray","setupReferences","pMemoryLayout","lLayout","sendData","asPrimitive","pPrimitiveFormat","pPrimitiveMultiplier","pAlignment","asStruct","pSetupCall","StructBufferMemoryLayout","setup","gpu_object_setup_1","struct_buffer_memory_layout_property_setup_1","StructBufferMemoryLayoutSetup","GpuObjectSetup","property","pName","lProperty","name","orderIndex","setupData","properties","layout","fillDefaultData","pDataReference","struct_buffer_memory_layout_setup_1","ensureSetup","mFixedSize","mInnerProperties","mVariableSize","lPropertyName","lPropertyOffset","lFoundProperty","lPropertyLocation","pSetupCallback","onSetup","pReferences","sort","pA","pB","lRawDataSize","lPropertyLayout","onSetupObjectCreate","INDEX","VERTEX","UNIFORM","STORAGE","INDIRECT","CompareFunction","ComputeStage","GPUShaderStage","FRAGMENT","COMPUTE","FilterMode","GpuFeature","PrimitiveCullMode","PrimitiveFrontFace","PrimitiveTopology","SamplerType","StencilOperation","TextureAspect","TextureBlendFactor","TextureBlendOperation","TextureDimension","TextureFormat","TextureOperation","TextureSampleType","TextureUsage","GPUTextureUsage","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","TextureViewDimension","VertexParameterStepMode","WrappingMode","gpu_feature_enum_1","GpuDeviceCapabilities","mFeatures","lFeature","features","lGpuFeature","EnumUtil","cast","mLimits","lLimitName","valuesOf","limits","hasFeature","pFeature","texture_aspect_enum_1","texture_dimension_enum_1","texture_format_enum_1","texture_sample_type_enum_1","texture_usage_enum_1","GpuTextureFormatCapabilities","preferredCanvasFormat","navigator","getPreferredCanvasFormat","mDevice","lFloat32Filterable","UnfilterableFloat","Float32Filterable","Float","mFormatCapabilitys","R8unorm","aspect","types","Red","byteCost","dimensions","OneDimension","TwoDimension","ThreeDimension","type","compressionBlock","textureBinding","renderAttachment","resolveTarget","blendable","multisample","copy","compatible","textureSource","textureDestination","imageSource","imageDestination","storage","R8snorm","R8uint","UnsignedInteger","R8sint","SignedInteger","R16uint","R16sint","R16float","Rg8unorm","Green","Rg8snorm","Rg8uint","Rg8sint","R32uint","readonly","writeonly","readwrite","R32sint","R32float","Rg16uint","Rg16sint","Rg16float","Rgba8unorm","Blue","Alpha","Rgba8unormSrgb","Rgba8snorm","Rgba8uint","Rgba8sint","Bgra8unorm","Bgra8unormSrgb","Bgra8unormStorage","Rgb9e5ufloat","Rgb10a2uint","Rgb10a2unorm","Rg11b10ufloat","Rg11b10ufloatRenderable","Rg32uint","Rg32sint","Rg32float","Rgba16uint","Rgba16sint","Rgba16float","Rgba32uint","Rgba32sint","Rgba32float","Stencil8","Stencil","Depth16unorm","Depth","Depth24plus","Depth24plusStencil8","Depth32float","Depth32floatStencil8","TextureCompressionBc","lBcTextureFormatCapability","pFormat","pAspects","pByteOfAspect","pCompatible","lFormat","TextureCompressionBcSliced3d","Bc1RgbaUnorm","Bc1RgbaUnormSrgb","Bc2RgbaUnorm","Bc2RgbaUnormSrgb","Bc3RgbaUnorm","Bc3RgbaUnormSrgb","Bc4Runorm","Bc4Rsnorm","Bc5RgUnorm","Bc5RgSnorm","Bc6hRgbUfloat","Bc6hRgbFloat","Bc7RgbaUnorm","Bc7RgbaUnormSrgb","TextureCompressionEtc2","lEtc2TextureFormatCapability","Etc2Rgb8unorm","Etc2Rgb8unormSrgb","Etc2Rgb8a1unorm","Etc2Rgb8a1unormSrgb","Etc2Rgba8unorm","Etc2Rgba8unormSrgb","EacR11unorm","EacR11snorm","EacRg11unorm","EacRg11snorm","TextureCompressionAstc","lAstcTextureFormatCapability","pCompressionLevel","Astc4x4unorm","Astc4x4unormSrgb","Astc5x4unorm","Astc5x4unormSrgb","Astc5x5unorm","Astc5x5unormSrgb","Astc6x5unorm","Astc6x5unormSrgb","Astc6x6unorm","Astc6x6unormSrgb","Astc8x5unorm","Astc8x5unormSrgb","Astc8x6unorm","Astc8x6unormSrgb","Astc8x8unorm","Astc8x8unormSrgb","Astc10x5unorm","Astc10x5unormSrgb","Astc10x6unorm","Astc10x6unormSrgb","Astc10x8unorm","Astc10x8unormSrgb","Astc10x10unorm","Astc10x10unormSrgb","Astc12x10unorm","Astc12x10unormSrgb","Astc12x12unorm","Astc12x12unormSrgb","capabilityOf","lCapabilityDefinition","lTextureUsages","TextureBinding","RenderAttachment","lSampleTypes","lAllSampleTypes","copyCompatible","textureUsages","aspects","sampleTypes","primary","all","textureTarget","imageTarget","gpu_execution_1","compute_pass_1","render_pass_1","render_targets_1","shader_1","canvas_texture_1","gpu_device_capabilities_1","gpu_texture_format_capabilities_1","GpuDevice","request","pPerformance","pOptions","lAdapter","requestAdapter","powerPreference","lFeatures","lLimits","required","lLimit","lAdapterLimit","lAvailableLimit","value","lDevice","requestDevice","requiredFeatures","requiredLimits","mCapabilities","formatValidator","mFormatValidator","frameCount","mFrameCounter","mGpuDevice","mFrameChangeListener","List","addFrameChangeListener","pListener","canvas","createElement","CanvasTexture","computePass","pExecution","ComputePass","executor","pOnExecute","GpuExecution","removeFrameChangeListener","remove","renderPass","pRenderTargets","pStaticBundle","RenderPass","renderTargets","pMultisampled","RenderTargets","shader","pSource","Shader","startNewFrame","lListener","mExecutionFunction","execute","lCommandEncoder","commandEncoder","ComputePassContext","pEncoder","mEncoder","mComputeResourceBuffer","pipeline","pipelineDataGroupList","highestBindGroupListIndex","computeDirect","pPipeline","pPipelineData","setupEncoderData","dispatchWorkgroups","computeIndirect","pIndirectBuffer","Indirect","dispatchWorkgroupsIndirect","lNativePipeline","lLocalHighestBindGroupListIndex","lPipelineDataGroupList","lBindGroupIndex","lPipelineDataGroup","lCurrentPipelineDataGroup","bindGroup","offsetId","hasDynamicOffset","setBindGroup","offsets","setPipeline","gpu_buffer_1","compute_pass_context_1","mQueries","pExecutionContext","lComputePassDescriptor","timestamp","timestampWrites","query","lComputePassEncoder","beginComputePass","end","resolveQuerySet","querySet","probeTimestamp","TimestampQuery","lTimestampQuerySet","createQuerySet","count","lTimestampBuffer","QUERY_RESOLVE","beginningOfPassWriteIndex","endOfPassWriteIndex","resolver","lTimedata","BigUint64Array","RenderPassContext","usedResources","mUsedResources","pRecordResources","mRenderTargets","mRecordResources","parameter","indirectBuffer","pipelines","pipelineData","mRenderResourceBuffer","vertexBuffer","highestVertexParameterIndex","drawDirect","pInstanceCount","pInstanceOffset","module","vertexParameter","executeDirectDraw","drawIndirect","executeIndirectDraw","lLocalHighestVertexParameterListIndex","lBufferNames","bufferNames","lBufferIndex","lAttributeBufferName","lNewAttributeBuffer","setVertexBuffer","lVertexParameterBufferIndex","indexable","indexBuffer","Uint16Array","setIndexBuffer","drawIndexed","draw","vertexCount","drawIndexedIndirect","pipeline_data_1","vertex_fragment_pipeline_1","vertex_parameter_1","render_pass_context_1","mBundleConfig","enabled","bundle","descriptor","resourceInvalidator","lRenderPassDescriptor","lRenderPassEncoder","beginRenderPass","cachedExecute","resolveCanvasTargets","pRenderPassEncoder","lRenderBundleEncoderDescriptor","colorFormats","colorTargetNames","map","pColorTargetName","colorTarget","sampleCount","multisampled","depthReadOnly","stencilReadOnly","hasDepth","hasStencil","depthStencilFormat","depthStencilTarget","lParameter","removeInvalidationListener","lBindgroup","lPipeline","lRenderBundleEncoder","createRenderBundleEncoder","lRenderPassContext","addInvalidationListener","VertexParameterInvalidationType","Data","PipelineDataInvalidationType","VertexFragmentPipelineInvalidationType","NativeRebuild","executeBundles","resolveCanvasList","lColorTargetList","pResolveTexture","source","createView","loadOp","storeOp","colorAttachments","lResolveTexture","lSource","texture","mipLevel","mipLevelStart","lDestination","lCopySize","depthOrArrayLayers","arrayLayerStart","copyTextureToTexture","mSetupReference","mSetupCallback","ensureThatInSetup","inSetup","GpuObjectInvalidationReasons","deconstruct","mDeconstruct","pDeconstruct","mReasons","pReason","any","gpu_object_invalidation_reasons_1","isSetup","mIsSetup","readNative","mDeconstructed","mNativeObject","mUpdateListener","mUpdateListenerAffectedTyped","WeakMap","mInvalidationReasons","pFirstAffected","pAffected","lAffectedList","lAffectedType","pReasons","lExecuteReasonListener","lListenerList","lReason","_pNative","_pReasons","_pCurrentNative","_pReferences","lSetupReferences","lSetupObject","updateNative","lUpdateSuccessfull","lCurrentNative","mResourceUsage","pUsage","texture_view_dimension_enum_1","gpu_texture_1","sampler_memory_layout_1","texture_view_memory_layout_1","texture_sampler_1","BindGroupDataSetup","pCurrentData","mCurrentData","mBindLayout","asBufferView","pValueType","getRaw","lBufferLayout","pDataOrVariableLength","isArray","createBufferFromArray","createEmptyBuffer","createBufferWithRawData","lVariableItemCount","lBufferByteLength","lItemCount","lByteSize","storageType","createSampler","SamplerMemoryLayout","lSampler","TextureSampler","createTexture","TextureViewMemoryLayout","lTextureDimension","dimension","TwoDimensionArray","Cube","CubeArray","lTexture","GpuTexture","lTextureView","useAs","lUnwrapedLayout","unwrapLayouts","fixedItemCount","lVariableRepetitionCount","variableItemCount","lDynamicOffsetAlignment","lDynamicOffsetCount","lBufferData","lBufferDataView","DataView","lDataIndex","lByteOffset","lWriteLayout","pUnwrappedLayout","pOverwrittenAlignment","lLayoutAlignment","lRepetitionCount","lLayoutRepetionIndex","lInnerFormat","lItemIndex","setBufferData","itemByteCount","lOffsetIndex","pVariableSizeCount","pBufferDataView","pByteOffset","setFloat32","setUint32","setInt32","lParameterItemCount","lParameterItemFormat","lInnerFormatUnwrapped","max","lFixedItemCount","lPropertyFormats","lPropertyFormatUnwrapped","bind_group_data_setup_1","gpu_texture_view_1","BindGroup","pBindGroupLayout","mBindData","mDataInvalidationListener","pBindName","lBindLayout","getBind","lDataSetupReferences","GpuTextureView","lOldData","lBindDataInvalidationListener","BindGroupInvalidationType","lEntryList","lBindname","orderedBindingNames","lBindData","lGroupEntry","binding","index","resource","createBindGroup","entries","BindGroupLayoutBufferMemoryLayoutSetup","withArray","withPrimitive","withStruct","bind_group_layout_buffer_memory_layout_setup_1","BindGroupLayoutMemoryLayoutSetup","asBuffer","pHasDynamicOffset","asSampler","pSamplerType","asTexture","pTextureDimension","pTextureFormat","bind_group_layout_memory_layout_setup_1","BindGroupLayoutSetup","pIndex","pVisibility","pStorageBinding","lBind","visibility","bindings","lAlignmentType","bind_group_1","bind_group_layout_setup_1","BindGroupLayout","mHasDynamicOffset","mName","mOrderedBindingNames","resourceCounter","mResourceCounter","storageDynamicOffset","uniformDynamicOffset","sampler","sampledTextures","storageTextures","storageBuffers","uniformBuffers","mBindings","create","lEntry","values","lLayoutEntry","lBufferBindingType","Read","minBindingSize","samplerType","lTextureFormatCapabilities","sampleType","viewDimension","lStorageAccess","ReadWrite","Write","storageTexture","access","createBindGroupLayout","lMaxBindGroupCount","MaxBindingsPerBindGroup","lBindingIndices","lBindingName","lBinding","compute_stage_enum_1","ComputePipeline","mShaderModule","pShader","mLoadedPipeline","mParameter","setParameter","pParameterName","lParameterUsage","lUsage","ComputePipelineInvalidationType","_pLastNative","pInvalidationReason","lLoadedPipeline","lPipelineDescriptor","compute","entryPoint","constants","Compute","createComputePipelineAsync","NativeLoaded","PipelineLayout","groups","mBindGroupNames","keys","pInitialGroups","mBindGroups","lMaxCounter","dynamicStorageBuffers","dynamicUniformBuffers","MaxBindGroups","lGroupIndex","lGroup","MaxDynamicStorageBuffersPerPipelineLayout","MaxDynamicUniformBuffersPerPipelineLayout","MaxSamplersPerShaderStage","MaxSampledTexturesPerShaderStage","MaxStorageTexturesPerShaderStage","MaxStorageBuffersPerShaderStage","MaxUniformBuffersPerShaderStage","getGroupLayout","pGroupName","groupIndex","withData","PipelineData","lPipelineLayoutDescriptor","bindGroupLayouts","lBindGroupLayout","createPipelineLayout","PipelineDataGroupSetup","withOffset","pBindingName","pOffsetIndex","bindingName","offsetIndex","pipeline_data_group_setup_1","PipelineDataSetup","addGroup","pBindGroup","lBindGroup","pBindingOffsets","pipeline_data_setup_1","mOrderedBindData","pPipelineLayout","mInvalidationListener","group","pBindGroupName","lGroupName","lBindGroupSetupData","find","lBindGroupName","lBindingLayout","lBindingDynamicOffsetIndex","lBufferMemoryLayout","lSingleLayoutLength","lBufferSize","join","texture_operation_enum_1","render_targets_texture_setup_1","RenderTargetsSetup","mMultisampled","addColor","pLocationIndex","pKeepOnEnd","pClearValue","lTarget","clearValue","storeOperation","Keep","Clear","textureView","resolveCanvas","colorTargets","RenderTargetTextureSetup","pTexture","addDepthStencil","pDepthKeepOnEnd","pDepthClearValue","pStencilKeepOnEnd","pStencilClearValue","depthStencil","depth","stencil","new","pResolve","use","pTextureView","render_targets_setup_1","lColorAttachmentNameList","lColorAttachment","mColorTargets","mDepthStencilTarget","mResolveCanvasList","mColorTargetNames","mTargetViewUpdateQueue","pTargetName","lColorTargetIndex","target","hasColorTarget","resize","applyResize","RenderTargetsInvalidationType","Resize","lColorAttachments","lStoreOperation","lPassColorAttachment","lDescriptor","lDepthStencilTexture","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","pReferenceData","lMaxRenderTargets","MaxColorAttachments","setTextureInvalidationListener","lFormatCapability","lAttachment","pNative","lTargetIndex","lCurrentAttachment","pTextureIndex","NativeUpdate","VertexFragmentPipelineDepthConfiguration","pCallback","mCallback","mDataReference","bias","pBias","depthBias","biasClamp","depthBiasClamp","biasSlopeScale","depthBiasSlopeScale","compareWith","pFunction","depthCompare","enableWrite","pEnable","depthWriteEnabled","VertexFragmentPipelineStencilConfiguration","back","pCompare","pFailOperation","pPassOperation","pDepthFailOperation","stencilBack","compare","failOperation","passOperation","depthFailOperation","front","stencilFront","readMask","pBitMask","stencilReadMask","writeMask","stencilWriteMask","VertexFragmentPipelineTargetConfiguration","alphaBlend","pOperation","pSourceFactor","pDestinationFactor","operation","sourceFactor","destinationFactor","colorBlend","aspectWriteMask","compare_function_enum_1","primitive_cullmode_enum_1","primitive_front_face_enum_1","primitive_topology_enum_1","stencil_operation_enum_1","texture_blend_factor_enum_1","texture_blend_operation_enum_1","vertex_fragment_pipeline_depth_configuration_1","vertex_fragment_pipeline_stencil_configuration_1","vertex_fragment_pipeline_target_configuration_1","VertexFragmentPipeline","primitiveCullMode","mPrimitiveCullMode","primitiveFrontFace","mPrimitiveFrontFace","primitiveTopology","mPrimitiveTopology","pShaderRenderModule","mRenderTargetConfig","mDepthConfiguration","Less","mStencilConfiguration","Allways","TriangleList","Back","ClockWise","depthConfig","stencilConfig","targetConfig","Add","One","Zero","lPipelineLayout","vertex","vertexEntryPoint","buffers","Vertex","primitive","generatePrimitive","fragmentEntryPoint","lFragmentTargetList","lRenderTargetName","lRenderTarget","blend","generateRenderTargetBlendState","generateRenderTargetWriteMask","fragment","targets","Fragment","LineList","LineStrip","PointList","failOp","depthFailOp","passOp","createRenderPipelineAsync","lStripIndexFormat","TriangleStrip","lPrimitiveState","topology","frontFace","cullMode","unclippedDepth","stripIndexFormat","lConfig","lBlendState","color","srcFactor","dstFactor","alpha","lWriteMask","VertexParameterBufferLayoutSetup","withParameter","pLocation","location","multiplier","vertex_parameter_buffer_layout_setup_1","VertexParameterLayoutSetup","pBufferName","pStepMode","stepMode","vertex_parameter_step_mode_enum_1","vertex_parameter_layout_setup_1","VertexParameterLayout","mIndexable","parameterNames","pIndexData","VertexParameter","parameterBuffer","lLayoutList","lCurrentBufferByteLength","lVertexAttributes","lPrimitiveParameterLayout","lItemMultiplier","lParameterLocation","shaderLocation","lStepmode","Instance","arrayStride","attributes","lCanBeIndexed","lAllowedMultiplier","lParameterIndicies","lBufferSetupData","pSetup","lParameterSetupData","mIndexBufferView","mIndices","pVertexParameterLayout","pIndices","lIndexBufferLayout","lIndexBuffer","Index","Uint32Array","lParameterLayout","lStrideParameter","lStrideDataCount","lBufferParameter","lDataStart","lDataEnd","lStrideCount","lSetData","setUint8","setInt8","setUint16","setInt16","lStrideIndex","lStrideItem","lStrideItemIndex","lParameterBuffer","ShaderComputeEntryPointSetup","ShaderFragmentEntryPointSetup","addRenderTarget","pDataFormat","pDataMultiplier","bind_group_layout_1","vertex_parameter_layout_1","shader_compute_entry_point_setup_1","shader_fragment_entry_point_setup_1","ShaderSetup","computeEntryPoint","lEntryPoint","workgroupDimension","computeEntrypoints","fragmentEntrypoints","pRenderTarget","pGroupOrName","bindingGroups","pStageUsage","lVertexParameterLayout","vertexEntrypoints","compute_pipeline_1","ShaderComputeModule","mEntryPoint","mShader","workGroupSizeX","workGroupSizeY","workGroupSizeZ","pEntryPointName","ShaderRenderModule","mFragmentEntryPoint","mVertexEntryPoint","mVertexParameter","pVertexEntryPointName","pVertexParameter","pFragmentEntryPointName","pipeline_layout_1","shader_setup_1","shader_compute_module_1","shader_render_module_1","mPipelineLayout","pSourceMap","mSource","mSourceMap","mEntryPoints","createComputeModule","pEntryName","static","createRenderModule","pVertexEntryName","pFragmentEntryName","lVertexEntryPoint","lFragmentEntryPoint","lParameterType","lCompilationHints","lEntryName","createShaderModule","code","compilationHints","sourceMap","lFragmentEntry","lRenderTargetLocations","lRenderTargets","lVertexEntry","lComputeEntry","lInitialPipelineLayout","mCanvas","mipCount","mContext","mFrameListener","CanvasTextureInvalidationType","_pNativeObject","unconfigure","configure","alphaMode","getCurrentTexture","arrayLayerEnd","mArrayLayerEnd","pArrayLayer","mArrayLayerStart","pArrayLayerIndex","mipLevelEnd","mMipLevelEnd","pMipLevel","mMipLevelStart","mTexture","lNativeTexture","lMipLevelEnd","mipLevelCount","lArrayLayerEnd","lDimensionViewDepthCount","baseMipLevel","baseArrayLayer","arrayLayerCount","mDepth","mDimension","mFormat","mHeight","mMipLevelCount","pMipCount","multiSampled","mWidth","copyFrom","pTextures","lCopyConfig","lTextureIndex","lCopyTexture","external","sourceOrigin","targetOrigin","ImageBitmap","lExternal","lSourceTexture","origin","lDestinationMaxSize","lClampedCopySize","copyExternalImageToTexture","pDimension","lViewDimension","pOldTexture","lTextureDimensions","lDimensionLimit","MaxTextureDimension1D","textureDimension","clampedDimensions","lArrayLayerLimit","MaxTextureArrayLayers","MaxTextureDimension3D","lMaxMipCount","log2","lNewTexture","lCopyMipCount","lMipLevel","lSourceMaxSize","mSamplerType","filter_mode_enum_1","sampler_type_enum_1","wrapping_mode_enum_1","mCompare","lodMaxClamp","mLodMaxClamp","lodMinClamp","mLodMinClamp","magFilter","mMagFilter","maxAnisotropy","mMaxAnisotropy","memoryLayout","mMemoryLayout","minFilter","mMinFilter","mipmapFilter","mMipmapFilter","wrapMode","mWrapMode","ClampToEdge","Linear","lSamplerOptions","addressModeU","addressModeV","addressModeW","Comparison","gpu_device_1","ambient_light_1","perspective_projection_1","color_cube_shader_wgsl_1","cube_shader_wgsl_1","particle_compute_shader_wgsl_1","particle_shader_wgsl_1","light_box_shader_wgsl_1","sky_box_shader_wgsl_1","video_canvas_shader_wgsl_1","canvas_mesh_1","cube_mesh_1","particle_mesh_1","util_1","gGenerateCubeStep","pGpu","pWorldGroup","lHeight","lWidth","lDepth","lWoodBoxShader","default","pShaderSetup","pVertexParameterSetup","pBindGroupSetup","Filter","lWoodBoxRenderModule","lWoodBoxTransformationGroup","lCubeInstanceTransformationData","lWidthIndex","lHeightIndex","lDepthIndex","lWoodBoxUserGroup","lImageTexture","lSourceList","lColorList","random","toString","lImageLoadPromiseList","_ref2","lImage","Image","src","decode","naturalWidth","naturalHeight","Error","lWaiter","lMipList","createImageBitmap","pBitmap","OffscreenCanvas","globalAlpha","drawImage","Promise","_x","_x2","apply","arguments","flat","lImageList","lMesh","lWoodBoxPipeline","Front","animationSpeed","pSeconds","instanceCount","gGenerateColorCubeStep","lColorBoxShader","lColorBoxTransformationGroup","Float32Array","lColorBoxPipeline","gGenerateLightBoxStep","lLightBoxShader","lLightBoxRenderModule","lLightBoxTransformationGroup","lLightBoxPipeline","lPointLightsBuffer","gGenerateSkyboxStep","lSkyBoxShader","lSkyBoxRenderModule","lSkyBoxTextureGroup","_ref4","_x3","lSkyBoxPipeline","gGenerateVideoCanvasStep","lTransformationGroup","lUserGroup","lVideoTexture","lVideo","preload","loop","muted","videoHeight","videoWidth","play","lTimeStamp","performance","now","readyState","lFrameTimeStamp","pImageBitmap","OneMinusSrcAlpha","SrcAlpha","gGenerateParticleStep","lMaxParticleCount","lParticleRenderShader","pStructSetup","lParticleRenderModule","lParticleInformationGroup","lParticleTextureGroup","_ref6","_x4","lParticlePipeline","lIndirectionBuffer","lRenderInstruction","lParticleComputeShader","lParticleComputeModule","lComputePipeline","lParticleComputeInformationGroup","lComputeInstruction","gGenerateWorldBindGroup","lWorldGroupLayout","pTranslationStruct","pTimeStruct","pStruct","lWorldGroup","lAmbientLight","lDebugBuffer","debugBuffer","pResulto","console","log","lGpu","lCanvasTexture","r","g","b","a","lCanvasWrapper","querySelector","ResizeObserver","lNewCanvasHeight","clientHeight","lNewCanvasWidth","clientWidth","observe","lPerspectiveProjection","lCamera","lParticelRenderInstruction","lParticelComputeInstruction","lRenderSteps","lRenderPass","pContext","lStep","renderpassRuntime","pStart","pEnd","lComputeSteps","lComputePass","computepassRuntime","lRenderExecutor","pExecutor","lFpsLabel","lLastTime","lCurrentFps","lRender","pTime","lFps","textContent","toFixed","requestAnimationFrame"],"sourceRoot":""}